{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AGAT's documentation!","text":""},{"location":"#agat-another-gtfgff-analysis-toolkit","title":"AGAT: Another GTF/GFF Analysis Toolkit","text":"<p>A GFF/GTF toolkit allowing you to perform almost everything you might want to achieve ^^</p> <p>The GTF/GFF formats are 9-column text formats used to describe and represent genomic features. The formats have quite evolved since 1997, and despite well-defined specifications existing nowadays they have a great flexibility allowing holding wide variety of information. This flexibility has a drawback aspect, there is an incredible amount of flavor of the formats: GFF / GFF1 / GFF2 / GFF2.5 / GFF3 / GTF / GTF2 / GTF2.1 / GTF2.2 / GTF2.5 / GTF3</p> <p>It's often hard to understand and differentiate all GFF/GTF formats/flavors. Many tools using GTF/GFF formats fails due to specific expectations. AGAT is a suite of tools able to deal with any GTF/GFF formats and perform most of the possible tasks you would need.</p> <p></p>"},{"location":"agat_for_you/","title":"What can AGAT do for you?","text":"<p>AGAT a GFF/GTF toolkit allowing you to perform almost everything you might want to achieve ^^</p> <p>AGAT has the power to check, fix, pad missing information (features/attributes) of any kind of GTF and GFF to create complete, sorted and standardised gff3 format. Over the years it has been enriched by many many tools to perform just about any tasks that is possible related to GTF/GFF format files (sanitizing, conversions, merging, modifying, filtering, FASTA sequence extraction, adding information, etc). Comparing to other methods AGAT is robust to even the most despicable GTF/GFF files.</p> <ul> <li>Standardize/sanitize any GTF/GFF file into a comprehensive GFF3 format (script with <code>_sp_</code> prefix)</li> </ul> task tool check, fix, pad missing information into sorted and standardised gff3 <code>agat_convert_sp_gxf2gxf.pl</code> <pre><code>* add missing parent features (e.g. gene and mRNA if only CDS/exon exists).  \n* add missing features (e.g. exon and UTR).  \n* add missing mandatory attributes (i.e. ID, Parent).  \n* fix identifiers to be uniq.  \n* fix feature locations.  \n* remove duplicated features.  \n* group related features (if spread in different places in the file).  \n* sort features (tabix optional).  \n* merge overlapping loci into one single locus (only if option activated).\n</code></pre> <ul> <li>Convert many formats</li> </ul> task tool convert any GTF/GFF into BED format <code>agat_convert_sp_gff2bed.pl</code> convert any GTF/GFF into GTF format <code>agat_convert_sp_gff2gtf.pl</code> convert any GTF/GFF into tabulated format <code>agat_sp_gff2tsv.pl</code> convert any BAM from minimap2 into GFF format <code>agat_convert_sp_minimap2_bam2gff.pl</code> convert any GTF/GFF into ZFF format <code>agat_sp_gff2zff.pl</code> convert any GTF/GFF into any GTF/GFF (bioperl) format <code>agat_convert_sp_gxf2gxf.pl</code> convert BED format into GFF3 format <code>agat_convert_bed2gff.pl</code> convert EMBL format into GFF3 format <code>agat_convert_embl2gff.pl</code> convert genscan format into GFF3 format <code>agat_convert_genscan2gff.pl</code> convert mfannot format into GFF3 format <code>agat_convert_mfannot2gff.pl</code> <ul> <li>Perform numerous tasks (Just about anything that is possible)</li> </ul> task tool make feature statistics <code>agat_sp_statistics.pl</code> make function statistics <code>agat_sp_functional_statistics.pl</code> extract any type of sequence <code>agat_sp_extract_sequences.pl</code> extract attributes <code>agat_sp_extract_attributes.pl</code> complement annotations (non-overlapping loci) <code>agat_sp_complement_annotations.pl</code> merge annotations <code>agat_sp_merge_annotations.pl</code> filter gene models by ORF size <code>agat_sp_filter_by_ORF_size.pl</code> filter to keep only longest isoforms <code>agat_sp_keep_longest_isoform.pl</code> create introns features <code>agat_sp_add_introns.pl</code> fix cds phases <code>agat_sp_fix_cds_phases.pl</code> manage IDs <code>agat_sp_manage_IDs.pl</code> manage UTRs <code>agat_sp_manage_UTRs.pl</code> manage introns <code>agat_sp_manage_introns.pl</code> manage functional annotation <code>agat_sp_manage_functional_annotation.pl</code> specificity sensitivity <code>agat_sp_sensitivity_specificity.pl</code> fusion / split analysis between two annotations <code>agat_sp_compare_two_annotations.pl</code> analyze differences between BUSCO results <code>agat_sp_compare_two_BUSCOs.pl</code> ... and much more ... ... see here ..."},{"location":"agat_how_does_it_work/","title":"How does AGAT work?","text":"<p>All tools taking GFF/GTF as input can be divided in two groups: <code>_sp_</code> and <code>_sq_</code>.</p> <ul> <li>Tools with <code>_sp_</code> prefix</li> </ul> <p>_sp_ stands for SLURP. Those tools will charge the file in memory in a specific data structure. It has a memory cost but makes life smoother. Indeed, it allows to perform complicated tasks in a more time efficient way ( Any features can be accessed at any time by AGAT). Moreover, it allows to fix all potential errors in the limit of the possibilities given by the format itself. See the AGAT parser section for more information about it.  </p> <ul> <li>with <code>_sq_</code> prefix</li> </ul> <p>_sq_ stands for SEQUENTIAL. Those tools will read and process GFF/GTF files from the top to the bottom, line by line, performing tasks on the fly. This is memory efficient but the sanity check of the file is minimum. Those tools are not intended to perform complex tasks.</p>"},{"location":"agat_how_does_it_work/#the-agat-parser-used-by-_sp_-prefix-tools-standardisation-to-create-gxf-files-compliant-to-any-tool","title":"The AGAT parser / used by _sp_ prefix tools / Standardisation to create GXF files compliant to any tool","text":"<p>The first step of AGAT' tools with the _sp_ prefix of is to fix the file to standardize it. (e.g. a file containing only exon will be modified to create mRNA and gene features). To perform this task AGAT parses and slurps the entire data into a specific data structure. Below you will find more information about peculiarity of this data structure, and the parsing approach used.</p>"},{"location":"agat_how_does_it_work/#what-performs-the-agat-parser","title":"What performs the AGAT parser","text":"<ul> <li>It creates missing parental features. (e.g if a level2 or level3 feature do not have parental feature(s) we create the missing level2 and/or level1 feature(s)).    </li> <li>It creates missing mandatory attributes (ID and/or Parent).  </li> <li>It fixes identifier to be uniq.  </li> <li>It removes duplicated features (same position, same ID, same Parent).  </li> <li>It expands level3 features sharing multiple parents (e.g  if one exon has list of multiple parent mRNA in its Parent attribute, one exon per parent with uniq ID will be created.  </li> <li>It fixes feature location errors (e.g an mRNA spanning over its gene location, we fix the gene location).  </li> <li>It adds UTR if possible (CDS and exon present).  </li> <li>It adds exon if possible (CDS has to be present).  </li> <li>It groups features together (if related features are spread at different places in the file).  </li> </ul>"},{"location":"agat_how_does_it_work/#the-data-structure","title":"The data structure","text":"<p>The method create a hash structure containing all the data in memory. We call it OMNISCIENT. The OMNISCIENT structure is a three levels structure: <pre><code>$omniscient{level1}{tag_l1}{level1_id} = feature &lt;= tag could be gene, match  \n$omniscient{level2}{tag_l2}{idY} = @featureListL2 &lt;= tag could be mRNA,rRNA,tRNA,etc. idY is a level1_id (know as Parent attribute within the level2 feature). The @featureList is a list to be able to manage isoform cases.  \n$omniscient{level3}{tag_l3}{idZ} =  @featureListL3 &lt;= tag could be exon,cds,utr3,utr5,etc. idZ is the ID of a level2 feature (know as Parent attribute within the level3 feature). The @featureList is a list to be able to put all the feature of a same tag together.  \n</code></pre></p>"},{"location":"agat_how_does_it_work/#how-does-the-agat-parser-work","title":"How does the AGAT parser work","text":"<p>The AGAT parser phylosophy will use several approach to understand the links/relationships betwen the featrures:  </p> <ul> <li>1) Parse by Parent/child relationship or gene_id/transcript_id relationship.</li> <li>2) ELSE Parse by a common tag  (an attribute value shared by feature that must be grouped together. By default we are using locus_tag but can be set by parameter).  </li> <li>3) ELSE Parse sequentially (mean group features in a bucket, and the bucket change at each level2 feature, and bucket are join in a common tag at each new L1 feature).  </li> </ul> <p>To resume by priority of way to parse: Parent/child or gene_id/transcript_id relationship &gt; common attribute/tag &gt; sequential. </p> <p></p> <p>The parser may used only one or a mix of these approaches according of the peculiarity of the gtf/gff file you provide.</p> <p>1. Parsing approach 1: by Parent/child relationship</p> <p>Example of Parent/ID relationship used by the GFF format:</p> <pre><code>chr12   HAVANA  gene    100 500 .   +   .   ID=gene1\nchr12   HAVANA  transcript  100 500 .   +   .   ID=transcript1;Parent=gene1\nchr12   HAVANA  exon    100 500 .   +   .   ID=exon1;Parent=transcript1  \nchr12   HAVANA  CDS 100 500 .   +   0   ID=cds-1;Parent=transcript1\n</code></pre> <p>Example of gene_id/transcript_id relationship used by the GTF format:</p> <pre><code>chr12   HAVANA  gene    100 500 .   +   .   gene_id \"gene1\";\nchr12   HAVANA  transcript  100 500 .   +   .   gene_id \"gene1\"; transcript_id \"transcript1\";\nchr12   HAVANA  exon    100 500 .   +   .   gene_id \"gene1\"; transcript_id \"transcript1\"; exon_id=exon1;\nchr12   HAVANA  CDS 100 500 .   +   0   gene_id \"gene1\"; transcript_id \"transcript1\"; cds_id=cds-1;\n</code></pre> <p>2. ELSE Parsing approach 2: by a common attribute/tag </p> <p>a common attribute (or common tag) is an attribute value shared by feature that must be grouped together. AGAT uses default attributes (<code>gene_id</code> and <code>locus_tag</code>) displayed in the log but can be set by the user modifying the AGAT configuration file <code>agat_config.yaml</code>.   You can modify the <code>agat_config.yaml</code> either running <code>agat config --expose</code> to access it (it will be copied in the current directory) and then modifying it manually; or running <code>agat config --expose --locus_tag attribute_name</code> that will copy the <code>agat_config.yaml</code> locally with the modification of the <code>locus_tag</code> parameter accordingly.</p> <p>Example of relationship made using a common tag (here locus_tag):</p> <pre><code>chr12   HAVANA  gene    100 500 .   +   .   locus_tag=\"gene1\"\nchr12   HAVANA  transcript  100 500 .   +   .   locus_tag=\"gene1\";ID=\"transcript1\"\nchr12   HAVANA  exon    100 500 .   +   .   locus_tag=\"gene1\";ID=exon1;\nchr12   HAVANA  CDS 100 500 .   +   0   locus_tag=\"gene1\";ID=cds-1;\n</code></pre> <p>3. ELSE Parsing approach 3: sequentially</p> <p>Reading from top to the botom of the file, level3 features (e.g. exon, CDS, UTR) are attached to the last level2 feature (e.g. mRNA) met, and level2 feature are attached to the last L1 feature (e.g. gene) met. To see the list of features of each level see the feature_levels.yaml file (In the share folder in the github repo or using <code>agat levels --expose</code>).</p> <p>Example of relationship made sequentially:</p> <pre><code>chr12   HAVANA  gene    100 500 .   +   .   ID=\"aaa\"\nchr12   HAVANA  transcript  100 500 .   +   .   ID=\"bbb\"\nchr12   HAVANA  exon    100 500 .   +   .   ID=\"ccc\"\nchr12   HAVANA  CDS 100 500 .   +   0   ID=\"ddd\"\nchr12   HAVANA  gene    1000    5000    .   +   .   ID=\"xxx\"\nchr12   HAVANA  transcript  1000    5000    .   +   .   ID=\"yyy\"\nchr12   HAVANA  exon    1000    5000    .   +   .   ID=\"zzz\"\nchr12   HAVANA  CDS 1000    5000    .   +   0   ID=\"www\"\n</code></pre> <p>/!\\ Cases with only level3 features (i.e rast or some prokka files), sequential parsing may not work as expected if Parent/ID gene_id/transcript_id attributes are missing. Indeed all features will be the child of only one newly created Parent. To create a parent per feature or group of features, a common tag must be used to group them correctly (by default gene_id and locus_tag but you can set up the ones of your choice). See Particular case.</p>"},{"location":"agat_how_does_it_work/#particular-case","title":"Particular case","text":"<p>Below you will find more information about peculiar GXF files and how the AGAT parser behaves and uses the different parsing approaches.</p>"},{"location":"agat_how_does_it_work/#a-level1-feature-type-missing-and-no-parentgene_id","title":"A. Level1 feature type missing and no Parent/gene_id","text":"<p>If you have isoforms (for Eukaryote organism) in your files and the <code>common attribute</code> used is not set properly you can end up with isoforms having independent parent gene features. See below for more details.</p> <p>Here an example of three transcripts from two different genes (isoforms exist - testA.gff):</p> <pre><code>chr12   HAVANA  transcript  100 500 .   +   .   ID=\"bbb\";common_tag=\"gene1\";transcript_id=\"transcript1\";gene_info=\"gene1\"\nchr12   HAVANA  exon    100 500 .   +   .   ID=\"ccc\";common_tag=\"gene1\"\nchr12   HAVANA  CDS 100 500 .   +   0   ID=\"ddd\";common_tag=\"gene1\"\nchr12   HAVANA  transcript  100 600 .   +   .   ID=\"bbb2\";common_tag=\"gene1\";transcript_id=\"transcript2\";gene_info=\"gene1\"\nchr12   HAVANA  exon    100 600 .   +   .   ID=\"ccc2\";common_tag=\"gene1\"\nchr12   HAVANA  CDS 100 600 .   +   0   ID=\"ddd2\";common_tag=\"gene1\"\nchr12   HAVANA  transcript  1000    5000    .   +   .   ID=\"yyy\";common_tag=\"gene2\";transcript_id=\"transcript3\";gene_info=\"gene2\"\nchr12   HAVANA  exon    1000    5000    .   +   .   ID=\"zzz\";common_tag=\"gene2\"\nchr12   HAVANA  CDS 1000    5000    .   +   0   ID=\"www\";common_tag=\"gene2\"\n</code></pre> <ul> <li>/!\\ Be careful in Eukaryote annotation containing isoforms. Indeed AGAT will create a gene feature by transcript. As in the example this is wrong because transcript1 and transcript2 should be attached to the same gene:  </li> </ul> <p><code>agat_convert_sp_gxf2gxf.pl --gff testA.gff</code></p> <pre><code>chr12   HAVANA  gene    100 500 .   +   .   ID=nbisL1-transcript-1;common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript1\"\nchr12   HAVANA  transcript  100 500 .   +   .   ID=\"bbb\";Parent=nbisL1-transcript-1;common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript1\"\nchr12   HAVANA  exon    100 500 .   +   .   ID=\"ccc\";Parent=\"bbb\";common_tag=\"gene1\"\nchr12   HAVANA  CDS 100 500 .   +   0   ID=\"ddd\";Parent=\"bbb\";common_tag=\"gene1\"\nchr12   HAVANA  gene    100 600 .   +   .   ID=nbisL1-transcript-2;common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript2\"\nchr12   HAVANA  transcript  100 600 .   +   .   ID=\"bbb2\";Parent=nbisL1-transcript-2;common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript2\"\nchr12   HAVANA  exon    100 600 .   +   .   ID=\"ccc2\";Parent=\"bbb2\";common_tag=\"gene1\"\nchr12   HAVANA  CDS 100 600 .   +   0   ID=\"ddd2\";Parent=\"bbb2\";common_tag=\"gene1\"\nchr12   HAVANA  gene    1000    5000    .   +   .   ID=nbisL1-transcript-3;common_tag=\"gene2\";gene_info=\"gene2\";transcript_id=\"transcript3\"\nchr12   HAVANA  transcript  1000    5000    .   +   .   ID=\"yyy\";Parent=nbisL1-transcript-3;common_tag=\"gene2\";gene_info=\"gene2\";transcript_id=\"transcript3\"\nchr12   HAVANA  exon    1000    5000    .   +   .   ID=\"zzz\";Parent=\"yyy\";common_tag=\"gene2\"\nchr12   HAVANA  CDS 1000    5000    .   +   0   ID=\"www\";Parent=\"yyy\";common_tag=\"gene2\"\n</code></pre> <ul> <li>! A way to fix that is to use a common attribute (i.e. locus tag). AGAT uses <code>locus_tag</code> and <code>gene_id</code> by default. If you are lucky those attributes already exist. Here they are absent, you can use either <code>common_tag</code>, <code>transcript_id</code>, or <code>gene_info</code>. Let's investigate each case:</li> </ul> <p><code>agat config --expose --locus_tag common_tag # Modify the locus_tag parameter via the AGAT configuration file agat_config.yaml</code> <code>agat_convert_sp_gxf2gxf.pl --gff testA.gff</code></p> <p>This will work well even if transcript isoforms exist. This will use the parsing approach 2 (only using common attribute).</p> <pre><code>chr12   HAVANA  gene    100 600 .   +   .   ID=nbisL1-transcript-1;common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript1\"\nchr12   HAVANA  transcript  100 500 .   +   .   ID=\"bbb\";Parent=nbisL1-transcript-1;common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript1\"\nchr12   HAVANA  exon    100 500 .   +   .   ID=\"ccc\";Parent=\"bbb\";common_tag=\"gene1\"\nchr12   HAVANA  CDS 100 500 .   +   0   ID=\"ddd\";Parent=\"bbb\";common_tag=\"gene1\"\nchr12   HAVANA  transcript  100 600 .   +   .   ID=\"bbb2\";Parent=nbisL1-transcript-1;common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript2\"\nchr12   HAVANA  exon    100 600 .   +   .   ID=\"ccc2\";Parent=\"bbb2\";common_tag=\"gene1\"\nchr12   HAVANA  CDS 100 600 .   +   0   ID=\"ddd2\";Parent=\"bbb2\";common_tag=\"gene1\"\nchr12   HAVANA  gene    1000    5000    .   +   .   ID=nbisL1-transcript-2;common_tag=\"gene2\";gene_info=\"gene2\";transcript_id=\"transcript3\"\nchr12   HAVANA  transcript  1000    5000    .   +   .   ID=\"yyy\";Parent=nbisL1-transcript-2;common_tag=\"gene2\";gene_info=\"gene2\";transcript_id=\"transcript3\"\nchr12   HAVANA  exon    1000    5000    .   +   .   ID=\"zzz\";Parent=\"yyy\";common_tag=\"gene2\"\nchr12   HAVANA  CDS 1000    5000    .   +   0   ID=\"www\";Parent=\"yyy\";common_tag=\"gene2\"\n</code></pre> <p><code>agat config --expose --locus_tag gene_info # Modify the locus_tag parameter via the AGAT configuration file agat_config.yaml</code> <code>agat_convert_sp_gxf2gxf.pl --gff testA.gff</code></p> <p>This will work well even if transcript isoforms exist. This will use the parsing approach 2 (common attribute gene_info) for transcript features and approach 3 (sequential) for subfeatures, which do not have the transcript_id attribute.</p> <pre><code>chr12   HAVANA  gene    100 600 .   +   .   ID=\"gene1\";common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript1\"\nchr12   HAVANA  transcript  100 500 .   +   .   ID=\"bbb\";Parent=\"gene1\";common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript1\"\nchr12   HAVANA  exon    100 500 .   +   .   ID=\"ccc\";Parent=\"bbb\";common_tag=\"gene1\"\nchr12   HAVANA  CDS 100 500 .   +   0   ID=\"ddd\";Parent=\"bbb\";common_tag=\"gene1\"\nchr12   HAVANA  transcript  100 600 .   +   .   ID=\"bbb2\";Parent=\"gene1\";common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript2\"\nchr12   HAVANA  exon    100 600 .   +   .   ID=\"ccc2\";Parent=\"bbb2\";common_tag=\"gene1\"\nchr12   HAVANA  CDS 100 600 .   +   0   ID=\"ddd2\";Parent=\"bbb2\";common_tag=\"gene1\"\nchr12   HAVANA  gene    1000    5000    .   +   .   ID=\"gene2\";common_tag=\"gene2\";gene_info=\"gene2\";transcript_id=\"transcript3\"\nchr12   HAVANA  transcript  1000    5000    .   +   .   ID=\"yyy\";Parent=\"gene2\";common_tag=\"gene2\";gene_info=\"gene2\";transcript_id=\"transcript3\"\nchr12   HAVANA  exon    1000    5000    .   +   .   ID=\"zzz\";Parent=\"yyy\";common_tag=\"gene2\"\nchr12   HAVANA  CDS 1000    5000    .   +   0   ID=\"www\";Parent=\"yyy\";common_tag=\"gene2\"\n</code></pre> <p><code>agat config --expose --locus_tag transcript_id # Modify the locus_tag parameter via the AGAT configuration file agat_config.yaml</code> <code>agat_convert_sp_gxf2gxf.pl --gff testA.gff</code> </p> <p>/!\\ In our case, using <code>transcript_id</code> is not a good choice. Indeed each transcript will have its own gene feature, so isoform will not be linked to the same gene feature as expected. This will use the parsing approach 2 (common attribute transcript_id) for transcript features and approach 3 (sequential) for subfeatures that do not have the transcript_id attribute.</p> <pre><code>chr12    HAVANA  gene    100 500 .   +   .   ID=\"transcript1\";common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript1\"\nchr12   HAVANA  transcript  100 500 .   +   .   ID=\"bbb\";Parent=\"transcript1\";common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript1\"\nchr12   HAVANA  exon    100 500 .   +   .   ID=\"ccc\";Parent=\"bbb\";common_tag=\"gene1\"\nchr12   HAVANA  CDS 100 500 .   +   0   ID=\"ddd\";Parent=\"bbb\";common_tag=\"gene1\"\nchr12   HAVANA  gene    100 600 .   +   .   ID=\"transcript2\";common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript2\"\nchr12   HAVANA  transcript  100 600 .   +   .   ID=\"bbb2\";Parent=\"transcript2\";common_tag=\"gene1\";gene_info=\"gene1\";transcript_id=\"transcript2\"\nchr12   HAVANA  exon    100 600 .   +   .   ID=\"ccc2\";Parent=\"bbb2\";common_tag=\"gene1\"\nchr12   HAVANA  CDS 100 600 .   +   0   ID=\"ddd2\";Parent=\"bbb2\";common_tag=\"gene1\"\nchr12   HAVANA  gene    1000    5000    .   +   .   ID=\"transcript3\";common_tag=\"gene2\";gene_info=\"gene2\";transcript_id=\"transcript3\"\nchr12   HAVANA  transcript  1000    5000    .   +   .   ID=\"yyy\";Parent=\"transcript3\";common_tag=\"gene2\";gene_info=\"gene2\";transcript_id=\"transcript3\"\nchr12   HAVANA  exon    1000    5000    .   +   .   ID=\"zzz\";Parent=\"yyy\";common_tag=\"gene2\"\nchr12   HAVANA  CDS 1000    5000    .   +   0   ID=\"www\";Parent=\"yyy\";common_tag=\"gene2\"\n</code></pre>"},{"location":"agat_how_does_it_work/#b-level1-and-level2-feature-types-missing-only-level3-features","title":"B. Level1 and Level2 feature types missing (Only Level3 features!)","text":"<p>In such case the sequential approach cannot be used (Indeed no level1 (e.g. gene) and no lelve2 (e.g. mrna) feature is present in the file). So the presence of parent/ID transcript_id/gene_id relationships and/or a proper common attribute is crucial.</p>"},{"location":"agat_how_does_it_work/#1-case-with-parentid-transcript_idgene_id-relationships","title":"1. Case with Parent/ID transcript_id/gene_id relationships.","text":"<p>If you have isoforms (for Eukaryote organism) in your files and the <code>common attribute</code> used is not set properly you can end up with isoforms having independent parent gene features. See below for more details.</p> <p>1.1</p> <p>Input (testB.gff):  </p> <pre><code>    chr12   HAVANA  exon    100 500 .   +   .   ID=exon1;Parent=transcript1;locus_id=\"gene1\"\n    chr12   HAVANA  CDS 100 500 .   +   0   ID=cds-1;Parent=transcript1;locus_id=\"gene1\"\n    chr12   HAVANA  exon    100 600 .   +   .   ID=exon2;Parent=transcript2;locus_id=\"gene1\"\n    chr12   HAVANA  CDS 100 600 .   +   0   ID=cds-2;Parent=transcript2;locus_id=\"gene1\"\n    chr12   HAVANA  exon    700 900 .   +   .   ID=exonb;Parent=transcriptb;locus_id=\"gene2\"\n    chr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;Parent=transcriptb;locus_id=\"gene2\"\n</code></pre> <ul> <li>/!\\ Be careful in Eukaryote annotation containing isoforms. Indeed there is no Leve2 feature (e.g. mRNA) to indicate to which parental gene to link isoforms to. By default (see below) the result will be wrong because transcript1 and transcript2 should be attached to the same gene:  </li> </ul> <p><code>agat_convert_sp_gxf2gxf.pl --gff testB.gff</code></p> <pre><code>    chr12   HAVANA  gene    100 500 .   +   .   ID=nbis-gene-1;locus_id=\"gene1\"\n    chr12   HAVANA  mRNA    100 500 .   +   .   ID=transcript1;Parent=nbis-gene-1;locus_id=\"gene1\"\n    chr12   HAVANA  exon    100 500 .   +   .   ID=exon1;Parent=transcript1;locus_id=\"gene1\"\n    chr12   HAVANA  CDS 100 500 .   +   0   ID=cds-1;Parent=transcript1;locus_id=\"gene1\"\n    chr12   HAVANA  gene    100 600 .   +   .   ID=nbis-gene-2;locus_id=\"gene1\"\n    chr12   HAVANA  mRNA    100 600 .   +   .   ID=transcript2;Parent=nbis-gene-2;locus_id=\"gene1\"\n    chr12   HAVANA  exon    100 600 .   +   .   ID=exon2;Parent=transcript2;locus_id=\"gene1\"\n    chr12   HAVANA  CDS 100 600 .   +   0   ID=cds-2;Parent=transcript2;locus_id=\"gene1\"\n    chr12   HAVANA  gene    700 900 .   +   .   ID=nbis-gene-3;locus_id=\"gene2\"\n    chr12   HAVANA  mRNA    700 900 .   +   .   ID=transcriptb;Parent=nbis-gene-3;locus_id=\"gene2\"\n    chr12   HAVANA  exon    700 900 .   +   .   ID=exonb;Parent=transcriptb;locus_id=\"gene2\"\n    chr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;Parent=transcriptb;locus_id=\"gene2\"\n</code></pre> <ul> <li>! A way to fix that is to use a <code>common attribute</code> to group the feature properly: AGAT uses <code>locus_tag</code> and <code>gene_id</code> by default. If you are lucky those attributes already exist. Here they are absent, you can use <code>locus_id</code> instead.</li> </ul> <p><code>agat config --expose --locus_tag locus_id # Modify the locus_tag parameter via the AGAT configuration file agat_config.yaml</code> <code>agat_convert_sp_gxf2gxf.pl --gff testB.gff</code></p> <pre><code>chr12   HAVANA  gene    100 600 .   +   .   ID=\"gene1\";locus_id=\"gene1\"\nchr12   HAVANA  mRNA    100 500 .   +   .   ID=transcript1;Parent=\"gene1\";locus_id=\"gene1\"\nchr12   HAVANA  exon    100 500 .   +   .   ID=exon1;Parent=transcript1;locus_id=\"gene1\"\nchr12   HAVANA  CDS 100 500 .   +   0   ID=cds-1;Parent=transcript1;locus_id=\"gene1\"\nchr12   HAVANA  mRNA    100 600 .   +   .   ID=transcript2;Parent=\"gene1\";locus_id=\"gene1\"\nchr12   HAVANA  exon    100 600 .   +   .   ID=exon2;Parent=transcript2;locus_id=\"gene1\"\nchr12   HAVANA  CDS 100 600 .   +   0   ID=cds-2;Parent=transcript2;locus_id=\"gene1\"\nchr12   HAVANA  gene    700 900 .   +   .   ID=\"gene2\";locus_id=\"gene2\"\nchr12   HAVANA  mRNA    700 900 .   +   .   ID=transcriptb;Parent=\"gene2\";locus_id=\"gene2\"\nchr12   HAVANA  exon    700 900 .   +   .   ID=exonb;Parent=transcriptb;locus_id=\"gene2\"\nchr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;Parent=transcriptb;locus_id=\"gene2\"\n</code></pre> <p>1.2</p> <p>Here we have only level3 features, Parent/ID transcript_id/gene_id relationships present, default <code>common attributes</code> ( <code>locus_tag</code> or <code>gene_id</code>) is set for some features.</p> <p>Input testF.gff:</p> <pre><code>    chr12   HAVANA  exon    100 500 .   +   .   ID=exon1;Parent=transcript1;locus_tag=\"gene1\"\n    chr12   HAVANA  CDS 100 500 .   +   0   ID=cds-1;Parent=transcript1;locus_tag=\"gene1\"\n    chr12   HAVANA  exon    100 600 .   +   .   ID=exon2;Parent=transcript2;locus_tag=\"gene1\"\n    chr12   HAVANA  CDS 100 600 .   +   0   ID=cds-2;Parent=transcript2;locus_tag=\"gene1\"\n    chr12   HAVANA  exon    700 900 .   +   .   ID=exonb;Parent=transcriptb;locus_tag=\"gene2\"\n    chr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;Parent=transcriptb;locus_tag=\"gene2\"\n    chr12   HAVANA  exon    1000    1110    .   +   .   ID=exon4;Parent=transcript4\n    chr12   HAVANA  CDS 1000    1110    .   +   0   ID=cds4;Parent=transcript4\n</code></pre> <p><code>agat_convert_sp_gxf2gxf.pl --gff testF.gff</code></p> <pre><code>    chr12   HAVANA  gene    100 600 .   +   .   ID=\"gene1\";locus_tag=\"gene1\"\n    chr12   HAVANA  mRNA    100 500 .   +   .   ID=transcript1;Parent=\"gene1\";locus_tag=\"gene1\"\n    chr12   HAVANA  exon    100 500 .   +   .   ID=exon1;Parent=transcript1;locus_tag=\"gene1\"\n    chr12   HAVANA  CDS 100 500 .   +   0   ID=cds-1;Parent=transcript1;locus_tag=\"gene1\"\n    chr12   HAVANA  mRNA    100 600 .   +   .   ID=transcript2;Parent=\"gene1\";locus_tag=\"gene1\"\n    chr12   HAVANA  exon    100 600 .   +   .   ID=exon2;Parent=transcript2;locus_tag=\"gene1\"\n    chr12   HAVANA  CDS 100 600 .   +   0   ID=cds-2;Parent=transcript2;locus_tag=\"gene1\"\n    chr12   HAVANA  gene    700 900 .   +   .   ID=\"gene2\";locus_tag=\"gene2\"\n    chr12   HAVANA  mRNA    700 900 .   +   .   ID=transcriptb;Parent=\"gene2\";locus_tag=\"gene2\"\n    chr12   HAVANA  exon    700 900 .   +   .   ID=exonb;Parent=transcriptb;locus_tag=\"gene2\"\n    chr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;Parent=transcriptb;locus_tag=\"gene2\"\n    chr12   HAVANA  gene    1000    1110    .   +   .   ID=nbis-gene-1\n    chr12   HAVANA  mRNA    1000    1110    .   +   .   ID=transcript4;Parent=nbis-gene-1\n    chr12   HAVANA  exon    1000    1110    .   +   .   ID=exon4;Parent=transcript4\n    chr12   HAVANA  CDS 1000    1110    .   +   0   ID=cds4;Parent=transcript4\n</code></pre> <p>The <code>common attributes</code> is used to attach isoforms to a common gene feature. As transcript4 has no common attribute, it will have its own parent features.</p>"},{"location":"agat_how_does_it_work/#2-case-without-parentid-transcript_idgene_id-relationships-only-common-attribute-approach-to-parse-the-file-can-be-used","title":"2. Case without Parent/ID transcript_id/gene_id relationships. Only <code>common attribute</code> approach to parse the file can be used.","text":"<p>2.1</p> <p>Here we have only level3 features, no Parent/ID transcript_id/gene_id relationships, but a default <code>common attributes</code> ( <code>locus_tag</code> or <code>gene_id</code>) is present.</p> <p>Input testE.gff:</p> <pre><code>    chr12   HAVANA  exon    100 300 .   +   .   ID=exon1;locus_tag=\"gene1\"\n    chr12   HAVANA  CDS 100 300 .   +   0   ID=cds-1;locus_tag=\"gene1\"\n    chr12   HAVANA  exon    500 600 .   +   .   ID=exon2;locus_tag=\"gene1\"\n    chr12   HAVANA  CDS 500 600 .   +   0   ID=cds-2;locus_tag=\"gene1\"\n    chr12   HAVANA  exon    700 900 .   +   .   ID=exonb;locus_tag=\"gene2\"\n    chr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;locus_tag=\"gene2\"\n</code></pre> <p><code>agat_convert_sp_gxf2gxf.pl --gff testE.gff</code></p> <pre><code>    chr12   HAVANA  gene    100 600 .   +   .   ID=nbis-gene-1;locus_tag=\"gene1\"\n    chr12   HAVANA  mRNA    100 600 .   +   .   ID=nbisL2-exon-1;Parent=nbis-gene-1;locus_tag=\"gene1\"\n    chr12   HAVANA  exon    100 300 .   +   .   ID=exon1;Parent=nbisL2-exon-1;locus_tag=\"gene1\"\n    chr12   HAVANA  exon    500 600 .   +   .   ID=exon2;Parent=nbisL2-exon-1;locus_tag=\"gene1\"\n    chr12   HAVANA  CDS 100 300 .   +   0   ID=cds-1;Parent=nbisL2-exon-1;locus_tag=\"gene1\"\n    chr12   HAVANA  CDS 500 600 .   +   0   ID=cds-2;Parent=nbisL2-exon-1;locus_tag=\"gene1\"\n    chr12   HAVANA  gene    700 900 .   +   .   ID=nbis-gene-2;locus_tag=\"gene2\"\n    chr12   HAVANA  mRNA    700 900 .   +   .   ID=nbisL2-exon-2;Parent=nbis-gene-2;locus_tag=\"gene2\"\n    chr12   HAVANA  exon    700 900 .   +   .   ID=exonb;Parent=nbisL2-exon-2;locus_tag=\"gene2\"\n    chr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;Parent=nbisL2-exon-2;locus_tag=\"gene2\"\n</code></pre> <p>/!\\ In Eukaryote annotation containing isoforms it will not work properly. Indeed, it will result of isoforms merged in chimeric transcripts (It will be really unlucky to end up in such situation, because even a human cannot resolve such type of situation. There is no information about isoforms structure...). In Eukaryote cases (even for multi-exon CDS) with absence of isoforms, it will work correctly.</p> <p>2.2</p> <p>Here the worse case that can append: only level3 features, no Parent/ID transcript_id/gene_id relationships, and the default <code>common attributes</code> ( <code>locus_tag</code> and <code>gene_id</code>) are absent. Sequential approach will be used by AGAT but as there are only level3 features, all will be linked to only one parent. See below for more details.</p> <p>Input testC.gff:  </p> <pre><code>chr12   HAVANA  exon    100 500 .   +   .   ID=exon1;locus_id=\"gene1\"\nchr12   HAVANA  CDS 100 500 .   +   0   ID=cds-1;locus_id=\"gene1\"\nchr12   HAVANA  exon    510 600 .   +   .   ID=exon2;locus_id=\"gene1\"\nchr12   HAVANA  CDS 510 600 .   +   0   ID=cds-2;locus_id=\"gene1\"\nchr12   HAVANA  exon    700 900 .   +   .   ID=exonb;locus_id=\"gene2\"\nchr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;locus_id=\"gene2\"\n</code></pre> <p><code>agat_convert_sp_gxf2gxf.pl --gff testC.gff</code> </p> <pre><code>chr12   HAVANA  gene    100 900 .   +   .   ID=nbis-gene-1;locus_id=\"gene1\"\nchr12   HAVANA  mRNA    100 900 .   +   .   ID=nbisL2-exon-1;Parent=nbis-gene-1;locus_id=\"gene1\"\nchr12   HAVANA  exon    100 600 .   +   .   ID=exon1;Parent=nbisL2-exon-1;locus_id=\"gene1\"\nchr12   HAVANA  exon    700 900 .   +   .   ID=exonb;Parent=nbisL2-exon-1;plocus_id=\"gene2\"\nchr12   HAVANA  CDS 100 500 .   +   0   ID=cds-1;Parent=nbisL2-exon-1;locus_id=\"gene1\"\nchr12   HAVANA  CDS 100 600 .   +   0   ID=cds-2;Parent=nbisL2-exon-1;locus_id=\"gene1\"\nchr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;Parent=nbisL2-exon-1;locus_id=\"gene2\"\n</code></pre> <p>/!\\ All features are collected under a single gene and mRNA feature, which is wrong.</p> <p>As the default <code>common attribute</code> are absent (gene_id or locus_tag), you have to inform AGAT what attribute to use to group features together properly, here <code>locus_id</code> is a good choice:  </p> <p><code>agat config --expose --locus_tag locus_id # Modify the locus_tag parameter via the AGAT configuration file agat_config.yaml</code> <code>agat_convert_sp_gxf2gxf.pl --gff testC.gff</code> </p> <pre><code>chr12   HAVANA  gene    100 600 .   +   .   ID=nbis-gene-1;locus_id=\"gene1\"\nchr12   HAVANA  mRNA    100 600 .   +   .   ID=nbisL2-exon-1;Parent=nbis-gene-1;locus_id=\"gene1\"\nchr12   HAVANA  exon    100 600 .   +   .   ID=exon1;Parent=nbisL2-exon-1;locus_id=\"gene1\"\nchr12   HAVANA  CDS 100 500 .   +   0   ID=cds-1;Parent=nbisL2-exon-1;locus_id=\"gene1\"\nchr12   HAVANA  CDS 100 600 .   +   0   ID=cds-2;Parent=nbisL2-exon-1;locus_id=\"gene1\"\nchr12   HAVANA  gene    700 900 .   +   .   ID=nbis-gene-2;locus_id=\"gene2\"\nchr12   HAVANA  mRNA    700 900 .   +   .   ID=nbisL2-exon-2;Parent=nbis-gene-2;locus_id=\"gene2\"\nchr12   HAVANA  exon    700 900 .   +   .   ID=exonb;Parent=nbisL2-exon-2;locus_id=\"gene2\"\nchr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;Parent=nbisL2-exon-2;locus_id=\"gene2\"\n</code></pre> <p>/!\\ In Eukaryote annotation containing isoforms it will not work properly. Indeed, it will result of isoforms merged in chimeric transcripts (It will be really unlucky to end up in such situation, because even a human cannot resolve such type of situation. There is no information about isoforms structure...). In Eukaryote cases (even for multi-exon CDS) with absence of isoforms, it will work correctly.</p>"},{"location":"agat_how_does_it_work/#3-in-the-extreme-case-where-you-have-only-one-type-of-feature-you-may-decide-to-use-the-id-as-common-attribute","title":"3. In the extreme case where you have only one type of feature, you may decide to use the ID as common attribute.","text":"<p>This is the same problem as seen previously. Here the worse case that can append: only level3 features, no Parent/ID transcript_id/gene_id relationships, and the default <code>common attributes</code> ( <code>locus_tag</code> and <code>gene_id</code>) are absent. Sequential approach will be used by AGAT but as there are only level3 features, all will be linked to only one parent. See below for more details.</p> <p>Input (testD.gff):</p> <pre><code>    chr10   Liftoff CDS 100 300 .   +   0   ID=cds1\n    chr10   Liftoff CDS 600 900 .   +   0   ID=cds2\n    chr10   Liftoff CDS 400 490 .   -   0   ID=cds3\n</code></pre> <p><code>agat_convert_sp_gxf2gxf.pl --gff testD.gff</code> </p> <pre><code>    chr10   Liftoff gene    100 900 .   +   .   ID=nbis-gene-1\n    chr10   Liftoff mRNA    100 900 .   +   .   ID=nbisL2-cds-1;Parent=nbis-gene-1\n    chr10   Liftoff exon    100 300 .   +   .   ID=nbis-exon-1;Parent=nbisL2-cds-1\n    chr10   Liftoff exon    400 490 .   +   .   ID=nbis-exon-2;Parent=nbisL2-cds-1\n    chr10   Liftoff exon    600 900 .   +   .   ID=nbis-exon-3;Parent=nbisL2-cds-1\n    chr10   Liftoff CDS 100 300 .   +   0   ID=cds1;Parent=nbisL2-cds-1\n    chr10   Liftoff CDS 400 490 .   -   0   ID=cds3;Parent=nbisL2-cds-1\n    chr10   Liftoff CDS 600 900 .   +   0   ID=cds2;Parent=nbisL2-cds-1\n</code></pre> <p>/!\\ All features are collected under a single gene and mRNA feature, which is wrong.</p> <p><code>agat config --expose --locus_tag ID # Modify the locus_tag parameter via the AGAT configuration file agat_config.yaml</code> <code>agat_convert_sp_gxf2gxf.pl --gff testD.gff</code></p> <pre><code>    chr10   Liftoff gene    100 300 .   +   0   ID=nbis-gene-1\n    chr10   Liftoff mRNA    100 300 .   +   0   ID=nbisL2-cds-1;Parent=nbis-gene-1\n    chr10   Liftoff exon    100 300 .   +   .   ID=nbis-exon-1;Parent=nbisL2-cds-1\n    chr10   Liftoff CDS 100 300 .   +   0   ID=cds1;Parent=nbisL2-cds-1\n    chr10   Liftoff gene    400 490 .   -   0   ID=nbis-gene-3\n    chr10   Liftoff mRNA    400 490 .   -   0   ID=nbisL2-cds-3;Parent=nbis-gene-3\n    chr10   Liftoff exon    400 490 .   -   .   ID=nbis-exon-3;Parent=nbisL2-cds-3\n    chr10   Liftoff CDS 400 490 .   -   0   ID=cds3;Parent=nbisL2-cds-3\n    chr10   Liftoff gene    600 900 .   +   0   ID=nbis-gene-2\n    chr10   Liftoff mRNA    600 900 .   +   0   ID=nbisL2-cds-2;Parent=nbis-gene-2\n    chr10   Liftoff exon    600 900 .   +   .   ID=nbis-exon-2;Parent=nbisL2-cds-2\n    chr10   Liftoff CDS 600 900 .   +   0   ID=cds2;Parent=nbisL2-cds-2\n</code></pre> <p>This case is fine for Prokaryote annotation. /!\\ For Eukaryote it might work is some conditions: A) The annotation should not contain isoforms (Indeed, there is no existing information to decipher to which isoform a CDS will be part of. If isoforms are present, each one will be linked to its own gene feature). B) If there are multi-exon CDS, CDS parts must share the same ID (Indeed multi-exon CDS can share or not the same ID. Both way are allowed by the GFF format. If the CDS parts share the same ID, the CDS parts will be collected properly. If the CDS parts do not share the same ID, AGAT will slice it and create a gene/mRNA feature by CDS part!).</p>"},{"location":"agat_how_does_it_work/#4-case-where-you-have-only-one-type-of-feature-and-some-feature-have-parent-attributes-and-some-other-have-common-attributes","title":"4. Case where you have only one type of feature, and some feature have Parent attributes and some other have common attributes.","text":"<p>Input (testG.gff):</p> <pre><code>    chr12   HAVANA  exon    100 500 .   +   .   ID=exon1;Parent=transcript1\n    chr12   HAVANA  CDS 100 500 .   +   0   ID=cds-1;Parent=transcript1\n    chr12   HAVANA  exon    100 600 .   +   .   ID=exon2;Parent=transcript2\n    chr12   HAVANA  CDS 100 600 .   +   0   ID=cds-2;Parent=transcript2\n    chr12   HAVANA  exon    700 900 .   +   .   ID=exonb;locus_tag=\"gene1\"\n    chr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;locus_tag=\"gene1\"\n    chr12   HAVANA  exon    1000    1110    .   +   .   ID=exon4;locus_tag=\"gene2\"\n    chr12   HAVANA  CDS 1000    1110    .   +   0   ID=cds4;locus_tag=\"gene2\"\n</code></pre> <p><code>agat_convert_sp_gxf2gxf.pl --gff testG.gff</code> </p> <pre><code>    chr12   HAVANA  gene    100 500 .   +   .   ID=nbis-gene-3\n    chr12   HAVANA  mRNA    100 500 .   +   .   ID=transcript1;Parent=nbis-gene-3\n    chr12   HAVANA  exon    100 500 .   +   .   ID=exon1;Parent=transcript1\n    chr12   HAVANA  CDS 100 500 .   +   0   ID=cds-1;Parent=transcript1\n    chr12   HAVANA  gene    100 600 .   +   .   ID=nbis-gene-4\n    chr12   HAVANA  mRNA    100 600 .   +   .   ID=transcript2;Parent=nbis-gene-4\n    chr12   HAVANA  exon    100 600 .   +   .   ID=exon2;Parent=transcript2\n    chr12   HAVANA  CDS 100 600 .   +   0   ID=cds-2;Parent=transcript2\n    chr12   HAVANA  gene    700 900 .   +   .   ID=nbis-gene-1;locus_tag=\"gene1\"\n    chr12   HAVANA  mRNA    700 900 .   +   .   ID=nbisL2-exon-1;Parent=nbis-gene-1;locus_tag=\"gene1\"\n    chr12   HAVANA  exon    700 900 .   +   .   ID=exonb;Parent=nbisL2-exon-1;locus_tag=\"gene1\"\n    chr12   HAVANA  CDS 700 900 .   +   0   ID=cds-b;Parent=nbisL2-exon-1;locus_tag=\"gene1\"\n    chr12   HAVANA  gene    1000    1110    .   +   .   ID=nbis-gene-2;locus_tag=\"gene2\"\n    chr12   HAVANA  mRNA    1000    1110    .   +   .   ID=nbisL2-exon-2;Parent=nbis-gene-2;locus_tag=\"gene2\"\n    chr12   HAVANA  exon    1000    1110    .   +   .   ID=exon4;Parent=nbisL2-exon-2;locus_tag=\"gene2\"\n    chr12   HAVANA  CDS 1000    1110    .   +   0   ID=cds4;Parent=nbisL2-exon-2;locus_tag=\"gene2\"\n</code></pre> <p>/!\\ For Eukaryote annotation with isoforms, features would need to have the Parent attribute along with a common attribute to help AGAT to properly reconstruct the parental features (a single gene feature for isoforms).</p>"},{"location":"gff_to_bed/","title":"GFF to BED conversion","text":"<p>It exists many GFF formats and many GTF formats (see here for a complete review) and many tools to perform the conversion. We will try to see in this review the main differences.</p>"},{"location":"gff_to_bed/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Test resume</li> <li>The GFF file to convert</li> <li>The converters</li> <li>AGAT</li> <li>PASA</li> <li>bedops</li> <li>Kent utils</li> <li>The bed format</li> </ul>"},{"location":"gff_to_bed/#test-summary","title":"Test summary","text":"tool Comment AGAT default RGB color to 255,0,0 PASA Particular 3rd column that contains a list of names bedops each gff feature give one line. Only the 6 first colums are correct Kent utils extra coma at the end of 11th and 12th column"},{"location":"gff_to_bed/#the-gff-file-to-convert","title":"The GFF file to convert","text":"<p>The test file is a GFF3 file:</p> <pre><code>##gff-version 3\n# This is a test sample\nscaffold625 maker   gene    337818  343277  .   +   .   ID=CLUHARG00000005458;Name=TUBB3_2\nscaffold625 maker   mRNA    337818  343277  .   +   .   ID=CLUHART00000008717;Parent=CLUHARG00000005458\nscaffold625 maker   tss 337916  337918  .   +   .   ID=CLUHART00000008717:tss;Parent=CLUHART00000008717\nscaffold625 maker   start_codon 337916  337918  .   +   .   ID=CLUHART00000008717:start;Parent=CLUHART00000008717\nscaffold625 maker   CDS 337915  337971  .   +   0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 340733  340841  .   +   0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 341518  341628  .   +   2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 341964  343033  .   +   2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   stop_codon  343031  343033  .   +   .   ID=CLUHART00000008717:stop;Parent=CLUHART00000008717\nscaffold625 maker   exon    337818  337971  .   +   .   ID=CLUHART00000008717:exon1;Parent=CLUHART00000008717\nscaffold625 maker   exon    340733  340841  .   +   .   ID=CLUHART00000008717:exon2;Parent=CLUHART00000008717\nscaffold625 maker   exon    341518  341628  .   +   .   ID=CLUHART00000008717:exon3;Parent=CLUHART00000008717\nscaffold625 maker   exon    341964  343277  .   +   .   ID=CLUHART00000008717:exon4;Parent=CLUHART00000008717\nscaffold625 maker   five_prime_utr  337818  337914  .   +   .   ID=CLUHART00000008717:five_prime_utr;Parent=CLUHART00000008717\nscaffold625 maker   three_prime_UTR 343034  343277  .   +   .   ID=CLUHART00000008717:three_prime_utr;Parent=CLUHART00000008717\n</code></pre>"},{"location":"gff_to_bed/#agat","title":"AGAT","text":"<p>AGAT v0.2.2  </p> <p><code>agat_convert_sp_gff2bed.pl --gff 1_test.gff -o 1_test_agat.bed</code></p> <pre><code>scaffold625 337817  343277  CLUHART00000008717  0   +   337914  343033  255,0,0 4   154,109,111,1314    0,2915,3700,4146\n</code></pre>"},{"location":"gff_to_bed/#pasa","title":"PASA","text":"<p>PASA pasa-v2.4.1</p> <p><code>./PASApipeline/misc_utilities/gff3_file_to_bed.pl test_1.gff &gt; 1_test_transdecoder.bed</code></p> <pre><code>#gffTags\nscaffold625 337817  343277  ID=CLUHART00000008717;CLUHARG00000005458;TUBB3_2    0   +   337914  343033  0   4   154,109,111,1314    0,2915,3700,4146\n</code></pre>"},{"location":"gff_to_bed/#bedops","title":"bedops","text":"<p>version: 2.4.37</p> <p><code>gff2bed &lt; 1_test.gff &gt; 1_test_bedops.bed</code></p> <pre><code>scaffold625 337817  337914  CLUHART00000008717:five_prime_utr   .   +   maker   five_prime_utr  .   ID=CLUHART00000008717:five_prime_utr;Parent=CLUHART00000008717\nscaffold625 337817  337971  CLUHART00000008717:exon1    .   +   maker   exon    .   ID=CLUHART00000008717:exon1;Parent=CLUHART00000008717\nscaffold625 337817  343277  CLUHARG00000005458  .   +   maker   gene    .   ID=CLUHARG00000005458;Name=TUBB3_2\nscaffold625 337817  343277  CLUHART00000008717  .   +   maker   mRNA    .   ID=CLUHART00000008717;Parent=CLUHARG00000005458\nscaffold625 337914  337971  CLUHART00000008717:cds  .   +   maker   CDS 0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 337915  337918  CLUHART00000008717:start    .   +   maker   start_codon .   ID=CLUHART00000008717:start;Parent=CLUHART00000008717\nscaffold625 337915  337918  CLUHART00000008717:tss  .   +   maker   tss .   ID=CLUHART00000008717:tss;Parent=CLUHART00000008717\nscaffold625 340732  340841  CLUHART00000008717:cds  .   +   maker   CDS 0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 340732  340841  CLUHART00000008717:exon2    .   +   maker   exon    .   ID=CLUHART00000008717:exon2;Parent=CLUHART00000008717\nscaffold625 341517  341628  CLUHART00000008717:cds  .   +   maker   CDS 2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 341517  341628  CLUHART00000008717:exon3    .   +   maker   exon    .   ID=CLUHART00000008717:exon3;Parent=CLUHART00000008717\nscaffold625 341963  343033  CLUHART00000008717:cds  .   +   maker   CDS 2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 341963  343277  CLUHART00000008717:exon4    .   +   maker   exon    .   ID=CLUHART00000008717:exon4;Parent=CLUHART00000008717\nscaffold625 343030  343033  CLUHART00000008717:stop .   +   maker   stop_codon  .   ID=CLUHART00000008717:stop;Parent=CLUHART00000008717\nscaffold625 343033  343277  CLUHART00000008717:three_prime_utr  .   +   maker   three_prime_UTR .   ID=CLUHART00000008717:three_prime_utr;Parent=CLUHART00000008717\n</code></pre>"},{"location":"gff_to_bed/#kent-utils","title":"Kent utils","text":"<p>version from 26-Feb-2020</p> <p><code>./gff3ToGenePred.dms 1_test.gff temp.genePred</code> <code>./genePredToBed.dms temp.genePred 1_test_genePred.bed</code></p> <pre><code>scaffold625 337817  343277  CLUHART00000008717  0   +   337914  343033  0   4   154,109,111,1314,   0,2915,3700,4146,\n</code></pre>"},{"location":"gff_to_bed/#the-bed-format","title":"The bed format","text":"<p>Detailed information can be found here: https://genome.ucsc.edu/FAQ/FAQformat.html Below a description of the different fields:</p> column feature type mandatory comment 1 chrom X The name of the chromosome (e.g. chr3, chrY, chr2_random) or scaffold (e.g. scaffold10671). 2 chromStart X The starting position of the feature in the chromosome or scaffold. The first base in a chromosome is numbered 0. 3 chromEnd X The ending position of the feature in the chromosome or scaffold. The chromEnd base is not included in the display of the feature. For example, the first 100 bases of a chromosome are defined as chromStart=0, chromEnd=100, and span the bases numbered 0-99. 4 name Defines the name of the BED line. This label is displayed to the left of the BED line in the Genome Browser window when the track is open to full display mode or directly to the left of the item in pack mode. 5 score A score between 0 and 1000. If the track line useScore attribute is set to 1 for this annotation data set, the score value will determine the level of gray in which this feature is displayed (higher numbers = darker gray). 6 strand Defines the strand - either '+' or '-'. 7 thickStart The starting position at which the feature is drawn thickly 8 thickEnd The ending position at which the feature is drawn thickly 9 itemRgb An RGB value of the form R,G,B (e.g. 255,0,0). If the track line itemRgb attribute is set to \"On\", this RBG value will determine the display color of the data contained in this BED line. NOTE: It is recommended that a simple color scheme (eight colors or less) be used with this attribute to avoid overwhelming the color resources of the Genome Browser and your Internet browser. 10 blockCount The number of blocks (exons) in the BED line. 11 blockSizes A comma-separated list of the block sizes. The number of items in this list should correspond to blockCount. 12 blockStarts A comma-separated list of block starts. All of the blockStart positions should be calculated relative to chromStart. The number of items in this list should correspond to blockCount. <p>/!\\ location BED format is 0-based, half-open [start-1, end), while GFF is 1-based, closed [start, end].</p> <p></p>"},{"location":"gff_to_gtf/","title":"GFF to GTF conversion","text":"<p>It exists many GFF formats and many GTF formats (see here for a complete review) and many tools to perform the conversion. We will try to see in this review the main differences.</p>"},{"location":"gff_to_gtf/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Test summary</li> <li>The GFF file to convert</li> <li>The converters</li> <li>AGAT</li> <li>gffread</li> <li>GenomeTools</li> <li>ea-utils</li> <li>TransDecoder</li> <li>Kent utils</li> <li>Feature types in GTF versions</li> </ul>"},{"location":"gff_to_gtf/#test-summary","title":"Test summary","text":"tool respect GTF format UTR conserved attribute conserved Stop codon removed from CDS Comment AGAT Yes - All (default GTF3) Yes it converts UTR terms to the appropriate ones according to the GTF version selected. Yes - All Yes (Only if the feature is present in the file. If not it is possible to add it via agat_sp_add_start_and_stop.pl) Can take any GTF GFF as input. The only one keeping comments at the beginning of the file. gffread No - They say GTF2.2 but it is not: transcript should be removed; start_codon and stop_codon should stay. No No No GenomeTools No - only CDS and exon kept No No No gene_id and transcript_id get new identifiers. ea-utils No - only CDS and exon kept No No No TransDecoder No - start and stop codon removed No Name only No Needs the fasta file for the conversion. Location of the last CDS modified and incorrect Kent utils No - gene is missing or transcript is superfluous to be compliant to one of the GTF format No No Yes Create a new attribute 'gene_name'."},{"location":"gff_to_gtf/#the-gff-file-to-convert","title":"The GFF file to convert","text":"<p>The test file is a GFF3 file:</p> <pre><code>##gff-version 3\n# This is a test sample\nscaffold625 maker   gene    337818  343277  .   +   .   ID=CLUHARG00000005458;Name=TUBB3_2\nscaffold625 maker   mRNA    337818  343277  .   +   .   ID=CLUHART00000008717;Parent=CLUHARG00000005458\nscaffold625 maker   tss 337916  337918  .   +   .   ID=CLUHART00000008717:tss;Parent=CLUHART00000008717\nscaffold625 maker   start_codon 337916  337918  .   +   .   ID=CLUHART00000008717:start;Parent=CLUHART00000008717\nscaffold625 maker   CDS 337915  337971  .   +   0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 340733  340841  .   +   0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 341518  341628  .   +   2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 341964  343033  .   +   2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   stop_codon  343031  343033  .   +   .   ID=CLUHART00000008717:stop;Parent=CLUHART00000008717\nscaffold625 maker   exon    337818  337971  .   +   .   ID=CLUHART00000008717:exon1;Parent=CLUHART00000008717\nscaffold625 maker   exon    340733  340841  .   +   .   ID=CLUHART00000008717:exon2;Parent=CLUHART00000008717\nscaffold625 maker   exon    341518  341628  .   +   .   ID=CLUHART00000008717:exon3;Parent=CLUHART00000008717\nscaffold625 maker   exon    341964  343277  .   +   .   ID=CLUHART00000008717:exon4;Parent=CLUHART00000008717\nscaffold625 maker   five_prime_utr  337818  337914  .   +   .   ID=CLUHART00000008717:five_prime_utr;Parent=CLUHART00000008717\nscaffold625 maker   three_prime_UTR 343034  343277  .   +   .   ID=CLUHART00000008717:three_prime_utr;Parent=CLUHART00000008717\n</code></pre>"},{"location":"gff_to_gtf/#the-converters","title":"The converters","text":""},{"location":"gff_to_gtf/#agat","title":"AGAT","text":"<p>AGAT v0.5.1  </p> <p><code>agat_convert_sp_gff2gtf.pl --gff 1_test.gff -o 1_test_agat.gtf</code></p> <pre><code>##gtf-version 3\n##This is a test sample\nscaffold625 maker   gene    337818  343277  .   +   .   gene_id \"CLUHARG00000005458\"; ID \"CLUHARG00000005458\"; Name \"TUBB3_2\";\nscaffold625 maker   transcript  337818  343277  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717\"; Parent \"CLUHARG00000005458\"; original_biotype \"mrna\";\nscaffold625 maker   exon    337818  337971  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:exon1\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   exon    340733  340841  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:exon2\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   exon    341518  341628  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:exon3\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   exon    341964  343277  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:exon4\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   CDS 337915  337971  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:cds\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   CDS 340733  340841  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:cds\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   CDS 341518  341628  .   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:cds\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   CDS 341964  343030  .   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:cds\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   five_prime_utr  337818  337914  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:five_prime_utr\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   start_codon 337916  337918  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:start\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   stop_codon  343031  343033  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:stop\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   three_prime_utr 343034  343277  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:three_prime_utr\"; Parent \"CLUHART00000008717\"; original_biotype \"three_prime_UTR\";\n</code></pre>"},{"location":"gff_to_gtf/#gffread","title":"gffread","text":"<p>gffread 0.11.4</p> <p><code>gffread -E 1_test.gff -T -o  1_test_gffread.gtf</code></p> <pre><code>scaffold625 maker   transcript  337818  343277  .   +   .   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   exon    337818  337971  .   +   .   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   exon    340733  340841  .   +   .   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   exon    341518  341628  .   +   .   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   exon    341964  343277  .   +   .   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   CDS 337915  337971  .   +   0   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   CDS 340733  340841  .   +   0   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   CDS 341518  341628  .   +   2   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   CDS 341964  343033  .   +   2   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\n</code></pre>"},{"location":"gff_to_gtf/#genometools","title":"GenomeTools","text":"<p>GenomeTools 1.6.1 The help says it convert into GTF2.2</p> <p><code>gt gff3_to_gtf 1_test.gff &gt; 1_test_genometools.gtf</code></p> <pre><code>scaffold625 maker   exon    337818  337971  .   +   .   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   exon    340733  340841  .   +   .   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   exon    341518  341628  .   +   .   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   exon    341964  343277  .   +   .   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   CDS 337915  337971  .   +   0   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   CDS 340733  340841  .   +   0   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   CDS 341518  341628  .   +   2   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   CDS 341964  343033  .   +   2   gene_id \"1\"; transcript_id \"1.1\";\n</code></pre>"},{"location":"gff_to_gtf/#ea-utils","title":"ea-utils","text":"<p>ea-utils commit 2b3d8c5d148801c98a2b3f3d54009a72c5b99521</p> <p><code>./gff2gtf-eautils test_1.gff &gt;  1_test_ea-utils.gtf</code></p> <pre><code>scaffold625 maker   exon    337818  337971  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   CDS 337915  337971  0   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   CDS 340733  340841  0   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   exon    340733  340841  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   CDS 341518  341628  0   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   exon    341518  341628  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   CDS 341964  343033  0   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   exon    341964  343277  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\n</code></pre>"},{"location":"gff_to_gtf/#transdecoder","title":"TransDecoder","text":"<p>Transdecoder  v5.5.0</p> <p><code>gff3_gene_to_gtf_format.pl test_1.gff test_1.fa &gt; 1_test_transdecoder.gtf</code></p> <pre><code>scaffold625 maker   gene    337818  343277  0   +   .   gene_id \"CLUHARG00000005458\"; Name \"TUBB3_2\";\nscaffold625 maker   transcript  337818  343277  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   exon    337818  337971  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   CDS 337818  337971  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   exon    340733  340841  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   CDS 340733  340841  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   exon    341518  341628  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   CDS 341518  341628  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   exon    341964  343277  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   CDS 341964  343277  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\n</code></pre>"},{"location":"gff_to_gtf/#kent-utils","title":"Kent utils","text":"<p>version from 26-Feb-2020</p> <p><code>./gff3ToGenePred.dms 1_test.gff temp.genePred</code> <code>./genePredToGtf.dms file temp.genePred 1_test_genePred.gtf</code></p> <pre><code>scaffold625 temp.genePred   transcript  337818  343277  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\";  gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   exon    337818  337971  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"1\"; exon_id \"CLUHART00000008717.1\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   CDS 337915  337971  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"1\"; exon_id \"CLUHART00000008717.1\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   exon    340733  340841  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"2\"; exon_id \"CLUHART00000008717.2\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   CDS 340733  340841  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"2\"; exon_id \"CLUHART00000008717.2\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   exon    341518  341628  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"3\"; exon_id \"CLUHART00000008717.3\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   CDS 341518  341628  .   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"3\"; exon_id \"CLUHART00000008717.3\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   exon    341964  343277  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"4\"; exon_id \"CLUHART00000008717.4\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   CDS 341964  343030  .   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"4\"; exon_id \"CLUHART00000008717.4\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   start_codon 337915  337917  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"1\"; exon_id \"CLUHART00000008717.1\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   stop_codon  343031  343033  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"4\"; exon_id \"CLUHART00000008717.4\"; gene_name \"CLUHARG00000005458\";\n</code></pre>"},{"location":"gff_to_gtf/#feature-types-in-gtf-versions","title":"Feature types in GTF versions","text":"GTF version feature type accepted GTF3 gene,  transcript,  exon,  CDS,  Selenocysteine,  start_codon,  stop_codon,  three_prime_utr,  five_prime_utr GTF2_5 gene,  transcript,  exon,  CDS,  UTR,  start_codon,  stop_codon,  Selenocysteine GTF2_2 CDS,  start_codon,  stop_codon,  5UTR,  3UTR,  inter,  inter_CNS,  intron_CNS,  exon GTF2_1 CDS,  start_codon,  stop_codon,  exon,  5UTR,  3UTR GTF2 CDS,  start_codon,  stop_codon,  exon GTF1 CDS,  start_codon,  stop_codon,  exon,  intron"},{"location":"gxf/","title":"The GTF/GFF formats","text":"<p>The GTF/GFF formats are 9-column text formats used to describe and represent genomic features. The formats have quite evolved since 1997, and despite well-defined specifications existing nowadays they have a great flexibility allowing holding wide variety of information. This flexibility has a drawback aspect, there is an incredible amount of flavor of the formats: GFF / GFF1 / GFF2 / GFF2.5 / GFF3 / GTF / GTF2 / GTF2.1 / GTF2.2 / GTF2.5 / GTF3</p> <p>It's often hard to understand and differentiate all GFF/GTF formats/flavors. Many tools using GTF/GFF formats fails due to specific expectations. Here is a comprehensive overview of the formats and their histories to help disentangle this complexity.</p>"},{"location":"gxf/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Forewords</li> <li>Introduction</li> <li>GFF<ul> <li>GFF0 (before 13-11-1997)</li> <li>GFF1 (13-11-1997)</li> <li>GFF2 (29-09-2000)  </li> <li>GFF3 (2004)</li> </ul> </li> <li>GTF<ul> <li>GTF1 (2000)</li> <li>GTF2 and GFF2.5 (2003)</li> <li>GTF2.1 (2005)</li> <li>GTF2.2 (2007)</li> <li>GTF2.5 unofficial (2012)</li> <li>GTF3 unofficial (2013)</li> </ul> </li> <li>Resume<ul> <li>Timeline of the different formats</li> <li>Main points and differences between GFF formats</li> <li>Main points and differences between GTF formats</li> <li>Discussion</li> </ul> </li> <li>Extra<ul> <li>Problem encountered due to lack of standardization</li> <li>Ensembl GTF formats<ul> <li>Evolution of the 3rd and 9th column</li> <li>Difference between GENCODE and Ensembl GTF</li> </ul> </li> </ul> </li> </ul>"},{"location":"gxf/#forewords","title":"Forewords","text":"<p>\u21e8  When I use the term gff it includes all gff formats/flavors. (The first version of the format was not called gff1 but gff. But to make it easier I will always specify the version of the format saying gff1 when I talk about the first version of it).  </p> <p>\u21e8  In the same way, when I use the term gtf it includes all gtf formats/flavors.  </p> <p>\u21e8  I have created the term gxf that means all the gff and gtf formats/flavors.</p>"},{"location":"gxf/#introduction","title":"Introduction","text":"<p>GFF (Gene-Finding Format) is a general-purpose genome annotation format. It was conceived during a 1997 meeting on computational genefinding at the Isaac Newton Institute, Cambridge, UK and developed in collaboration between the Sanger Centre, the University of California at Santa Cruz and other participants (Holmes I: Studies in Probabilistic Sequence Alignment and Evolution. PhD thesis University of Cambridge 1998.). The key players have been Richard Durbin and David Haussler.  </p> <p>GFF is a one-line-per-record format that can be used to identify a substring of a biological sequence. It is an extension of a basic (name, start, end) tuple (or \"NSE\"). It was originally designed as a common format for sharing information between gene-finding sensors (finding signals: starts, splice sites, stops, motifs; finding regions: exons, introns, protein domains etc.), and gene predictors (predicting gene, RNA transcript or protein structures). These two steps were usually performed within the same program but thanks to the GFF format they can be decoupled, allowing the transfer of feature information from one tool to another. But its uses go beyond gene-finding and it is used as a convenient way to represent a set of many kinds of features. The GFF fomat has been developed to be easy to parse and process by a variety of programs in different languages (e.g Unix tools as grep and sort, perl, awk, etc.). For these reasons, they decided that each feature is described on a single line, and line order is not relevant.</p>"},{"location":"gxf/#gff","title":"GFF","text":""},{"location":"gxf/#gff0","title":"GFF0","text":"<p>(before 13-11-1997)  </p> <p>There is no clear information about how the format looked at that time but it was close to the GFF1 format specification without the field <code>source</code> added the 1997-11-13.</p>"},{"location":"gxf/#gff1","title":"GFF1","text":"<p>(13-11-1997)  </p> <p>For a complete description of the format please refer to this link: https://web.archive.org/web/19980222142332/http://www.sanger.ac.uk:80/~rd/gff.html. This is the oldest description of the format I found (1998-02-22).</p> <p>I consider the format as GFF1 when they definitely defined the 9th field of the format (1997-11-13 rd: added extra <code>source</code> field as discussed at Newton Institute meeting 971029). Before that, the format only existed in its 0th version.</p> <p>This GFF1 format contains 8 mandatory fields followed by one optional field. The fields are:  </p> <pre><code>&lt;seqname&gt; &lt;source&gt; &lt;feature&gt; &lt;start&gt; &lt;end&gt; &lt;score&gt; &lt;strand&gt; &lt;frame&gt; [group]\n</code></pre> <p>They are defined as follows:</p> <pre><code>&lt;seqname&gt;\n    The name of the sequence. Having an explicit sequence name allows a feature file to be prepared for a data set of multiple sequences. Normally the seqname will be the identifier of the sequence in an accompanying fasta format file. An alternative is that 'seqname' is the identifier for a sequence in a public database, such as an EMBL/Genbank/DDBJ accession number. Which is the case, and which file or database to use, should be explained in accompanying information.\n&lt;source&gt;\n    The source of this feature. This field will normally be used to indicate the program making the prediction, or if it comes from public database annotation, or is experimentally verified, etc.\n&lt;feature&gt;\n    The feature type name. We hope to suggest a standard set of features, to facilitate import/export, comparison etc.. Of course, people are free to define new ones as needed. For example, Genie splice detectors account for a region of DNA, and multiple detectors may be available for the same site, as shown above.\n&lt;start&gt;, &lt;end&gt;\n    Integers. &lt;start&gt; must be less than or equal to &lt;end&gt;. Sequence numbering starts at 1, so these numbers should be between 1 and the length of the relevant sequence, inclusive.\n&lt;score&gt;\n    A floating point value. When there is no score (i.e., for a sensor that just records the possible presence of a signal, as \"splice5\" above) you must give something, by convention 0.\n&lt;strand&gt;\n    One of '+', '-' or '.'. '.' should be used when strand is not relevant, e.g. for dinucleotide repeats.\n&lt;frame&gt;\n    One of '0', '1', '2' or '.'. '0' indicates that the specified region is in frame, i.e., that its first base corresponds to the first base of a codon. '1' indicates that there is one extra base, i.e., that the second base of the region corresponds to the first base of a codon, and '2' means that the third base of the region is the first base of a codon. If the strand is '-', then the first base of the region is value of &lt;end&gt;, because the corresponding coding region will run from &lt;end&gt; to &lt;start&gt; on the reverse strand.\n[group]\n    An optional string-valued field that can be used as a name to group together a set of records. Typical uses might be to group the introns and exons in one gene prediction (or experimentally verified gene structure), or to group multiple regions of match to another sequence, such as an EST or a protein. See below for examples.\n\n=&gt; All strings (i.e., values of the &lt;seqname&gt;, &lt;feature&gt; or &lt;group&gt; fields) should be under 256 characters long, and should not include whitespace. The whole line should be under 32k long. A character limit is not very desirable, but helps write parsers in some languages. The slightly silly 32k limit is to allow plenty of space for comments/extra data.\n=&gt; Fields must be separated by TAB characters ('\\t').\n</code></pre> <p>Extra features of the format:</p> <pre><code>Comments\n\nComments are allowed, starting with \"#\" as in Perl, awk etc. Everything following # until the end of the line is ignored. Effectively this can be used in two ways. Either it must be at the beginning of the line (after any whitespace), to make the whole line a comment, or the comment could come after all the required fields on the line.\nWe also permit extra information to be given on the line following the group field without a '#' character. This allows extra method-specific information to be transferred with the line. However, we discourage overuse of this feature: better to find a way to do it with more true feature lines, and perhaps groups.\n\n## comment lines for meta information\n\nThere is a set of standardised (i.e., parsable) ## line types that can be used optionally at the top of a gff file. The philosophy is a little like the special set of %% lines at the top of postscript files, used for example to give the BoundingBox for EPS files.\nCurrent proposed ## lines are:\n\n ##gff-version 1\nGFF version - in case it is a real success and we want to change it. The current version is 1.\n ##source-version {source} {version text}\nSo that people can record what version of a program or package was used to make the data in this file. I suggest the version is text without whitespace. That allows things like 1.3, 4a etc.\n ##date {date}\nThe date the file was made, or perhaps that the prediction programs were run. We suggest to use astronomical format: 1997-11-08 for 8th November 1997, first because these sort properly, and second to avoid any US/European bias.\n\n ##DNA {seqname}\n ##acggctcggattggcgctggatgatagatcagacgac\n ##...\n ##end-DNA\nTo give a DNA sequence. Several people have pointed out that it may be convenient to include the sequence in the file. It should not become mandatory to do so. Often the seqname will be a well-known identifier, and the sequence can easily be retrieved from a database, or an accompanying file.\n ##sequence-region {seqname} {start} {end}\nTo indicate that this file only contains entries for the the specified subregion of a sequence.\nPlease feel free to propose new ## lines. The ## line proposal came out of some discussions including Anders Krogh, David Haussler, people at the Newton Institute on 1997-10-29 and some email from Suzanna Lewis. Of course, naive programs can ignore all of these...\n</code></pre> <p>Here is an example of GFF1:  </p> <pre><code>##gff-version 1\nSEQ1    EMBL    atg 103 105 .   +   0\nSEQ1    EMBL    exon    103 172 .   +   0\nSEQ1    EMBL    splice5 172 173 .   +   .\nSEQ1    netgene splice5 172 173 0.94    +   .\n# this is comment that will be skipped by the parser\nSEQ1    genie   sp5-20  163 182 2.3 +   .\nSEQ1    genie   sp5-10  168 177 2.1 +   .\nSEQ2    grail   ATG 17  19  2.1 -   0\nSEQ3    pred    exon    100 135 .   +   0   locus1 # this is also a comment that will be skipped by the parser\nSEQ3    pred    exon    235 260 .   +   2   locus1 This is an example of extra information... They discourage overuse of this feature.\nSEQ3    pred    exon    360 396 .   +   0   locus1\n</code></pre>"},{"location":"gxf/#gff2","title":"GFF2","text":"<p>(29-09-2000)  </p> <p>/!\\ Note: Some of the changes we will see have been implemented before the offical release of GFF2. As a consequence, several interemediate states between version 1 and 2 have existed. We can call them GFF1.X. I will not further discuss these intermediate states.</p> <p>16/12/98: Discussions with Lincoln Stein and others, the Version 2 format of GFF is proposed.  </p> <p>17/11/99: Gene Feature Finding Version 2 format is conceptually generalized to be the General Feature Format</p> <p>The GFF2 format is conceptualized since the 16/12/98 but becomes officially the default version the 2000-9-29. Here is the official description which is a snapshot from here: https://web.archive.org/web/20010208224442/http://www.sanger.ac.uk:80/Software/formats/GFF/GFF_Spec.shtml.  </p> <p>You can find the first description (03 Feb 2000) of the GFF2 here that comes from here: ftp://ftp.sanger.ac.uk/pub/resources/software/gff-old/gff/.</p> <p>Here we will review changes from GFF1.</p> <p>=&gt; The Gene Feature Finding has been  generalized to accomodate RNA and Protein feature files and has been renamed the General Feature Format while retaining the same acronym GFF.  </p> <p>The main change from Version 1 to Version 2 is the revision of the optional 9th field with tag-value type structure (essentially semicolon-separated .ace format) used for any additional material on the line. Version 2 also allows '.' as a score, for features for which there is no score. With the changes taking place to version 2 of the format, we also allow for feature sets to be defined over RNA and Protein sequences, as well as genomic DNA. This is used for example by the EMBOSS project to provide standard format output for all features as an option. In this case the  and  fields should be set to '.'. To assist this transition in specification, a new #Type Meta-Comment has been added."},{"location":"gxf/#definition","title":"Definition","text":"<p>This GFF2 format contains 8 mandatory fields followed by optional fields. Fields are:  </p> <pre><code>&lt;seqname&gt; &lt;source&gt; &lt;feature&gt; &lt;start&gt; &lt;end&gt; &lt;score&gt; &lt;strand&gt; &lt;frame&gt; [group/attributes] [comments]\n</code></pre> <p>Differences in these fields from GFF1 are as follows:</p> <pre><code>&lt;seqname&gt;\n    /\n&lt;source&gt;\n    /\n&lt;feature&gt;\n    Version 2 change: Standard Table of Features - we would like to enforce a standard nomenclature for common GFF features. This does not forbid the use of other features, rather, just that if the feature is obviously described in the standard list, that the standard label should be used. For this standard table we propose to fall back on the international public standards for genomic database feature annotation, specifically, the DDBJ/EMBL/GenBank feature table.\n&lt;start&gt;, &lt;end&gt;\n    Version 2 change: version 2 condones values of &lt;start&gt; and &lt;end&gt; that extend outside the reference sequence. This is often more natural when dumping from acedb, rather than clipping. It means that some software using the files may need to clip for itself.\n&lt;score&gt;\n    Version 2 change: When there is no score (i.e., for a sensor that just records the possible presence of a signal, as for the EMBL features above) you should use '.' instead of 0.\n&lt;strand&gt;\n    Version 2 change: This field is left empty '.' for RNA and protein features.\n&lt;frame&gt;\n    Version 2 change: This field is left empty '.' for RNA and protein features.\n[group/attribute]\n    [New] Standard Table of Attribute Tag Identifiers The semantics of tags in attribute field tag-values pairs has not yet been completely formalized, however a useful constraint is that they be equivalent, where appropriate, to DDBJ/EMBL/GenBank feature 'qualifiers' of given features (see EMBL feature descriptions).\n\nIn addition to these, ACEDB typically dumps GFF with specific tag-value pairs for given feature types. These tag-value pairs may be considered 'standard' GFF tag-values with respect to ACEDB databases. (rbsk: These will be summarized in a table here in the near future)\n\nVersion 2 change: In version 2, the optional [group] field is renamed to [attribute] (09/99) and must have an tag-value structure following the syntax used within objects in a .ace file, flattened onto one line by semicolon separators. Tags must be standard identifiers ([A-Za-z][A-Za-z0-9_]*). Free text values must be quoted with double quotes. Note: all non-printing characters in such free text value strings (e.g. newlines, tabs, control characters, etc) must be explicitly represented by their C (UNIX) style backslash-escaped representation (e.g. newlines as '\\n', tabs as '\\t'). As in ACEDB, multiple values can follow a specific tag. The aim is to establish consistent use of particular tags, corresponding to an underlying implied ACEDB model if you want to think that way (but acedb is not required). Examples of these would be:\nseq1     BLASTX  similarity   101  235 87.1 + 0 Target \"HBA_HUMAN\" 11 55 ; E_value 0.0003\ndJ102G20 GD_mRNA coding_exon 7105 7201   .  - 2 Sequence \"dJ102G20.C1.1\"\n\n=&gt; Version 2 change: field and line size limitations are removed; however, fields (except the optional [attribute] field above) must still not include whitespace.\n=&gt; Version 2 note: previous Version 2 permission to use arbitrary whitespace as field delimiters is now revoked! (99/02/26)\n</code></pre> <p>Extra features of the format:</p> <pre><code>Comments\n\n[...]\nWe also permit extra information to be given on the line following the attribute field without a '#' character (Version 2 change: this extra information must be delimited by the '#' comment delimiter OR by another tab field delimiter character, following any and all [attribute] field tag-value pairs).\n[...]\n\nVersion 2 change: we gave in and defined a structured way of passing additional information, as described above under [attribute]. But the sentiment of this paragraph still applies - don't overuse the tag-value syntax. The use of tag-value pairs (with whitespace) renders problematic the parsing of Version 1 style comments (following the attribute field, without a '#' character), so in Version 2, such [attribute] trailing comments must either start with the \"#\" as noted above, or with at least one additional tab character. Moreover, '#' characters embedded within quoted text string values of [attribute] tag-values should not be parsed as the beginning of a comment.\n\n## comment lines for meta information\n\nThere is a set of standardised (i.e., parsable) ## line types that can be used optionally at the top of a gff file. The philosophy is a little like the special set of %% lines at the top of postscript files, used for example to give the BoundingBox for EPS files.\nCurrent proposed ## lines are:\n\n  ##gff-version 2\n    The current version is 2. (Version 2 change!)\n ##source-version {source} {version text}\n    /\n ##date {date}\n    /\n  ##Type &lt;type&gt; [&lt;name&gt;]\n    [New] The type of host sequence described by the features. Standard types are 'DNA', 'Protein' and 'RNA'. The optional &lt;name&gt; allows multiple ##Type definitions describing multiple GFF sets in one file, each which have a distinct type. If the name is not provided, then all the features in the file are of the given type. Thus, with this meta-comment, a single file could contain DNA, RNA and Protein features, for example, representing a single genomic locus or 'gene', alongside type-specific features of its transcribed mRNA and translated protein sequences. If no ##Type meta-comment is provided for a given GFF file, then the type is assumed to be DNA.\n\n ##DNA {seqname}\n ##acggctcggattggcgctggatgatagatcagacgac\n ##...\n ##end-DNA\n    /\n\n ##RNA &lt;seqname&gt;\n ##acggcucggauuggcgcuggaugauagaucagacgac\n ##...\n ##end-RNA\n    Similar to DNA. Creates an implicit ##Type RNA &lt;seqname&gt; directive.\n\n ##Protein &lt;seqname&gt;\n ##MVLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSF\n ##...\n ##end-Protein\n    Similar to DNA. Creates an implicit ##Type Protein &lt;seqname&gt; directive.\n\n  ##sequence-region {seqname} {start} {end}\n    /\n</code></pre> <p>Here is an example of GFF2:  </p> <pre><code>##gff-version 2\nSEQ1    EMBL    atg 103 105 .   +   0\nSEQ1    netgene splice5 172 173 0.94    +   .\n# this is comment that will be skipped by the parser\nSEQ1    genie   sp5-10  168 177 2.1 +   .\nSEQ2    grail   ATG 17  19  2.1 -   0\nSEQ3    BLASTX    similarity    100 135 .   +   0   Target \"HBA_HUMAN\" ; E_value 0.0003 # this is also a comment that will be skipped by the parser\nSEQ3    BLASTX    similarity    235 260 .   +   2   Target \"HBA_HUMAN\" ; E_value 0.0005\nSEQ3    BLASTX    similarity    360 396 .   +   0   Target \"HBA_HUMAN\" ; E_value 0.001\n</code></pre>"},{"location":"gxf/#gff3","title":"GFF3","text":"<p>(2004)  </p> <p>GFF3 addresses several shortcomings in its predecessor, GFF2. Actually it addresses the most common extensions to GFF, while preserving backward compatibility with previous formats. It has been conceptualized by Lincoln Stein. The First specification draft I found is from 10 September 2003 (version 1.00rc1). The first offical specification is the version 1 published the 30 September 2004.</p> <p>Last updated the 26 February 2013 with version 1.23. Here is the last description of the specifications: https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md</p> <p>The majors updates are:   * the limitations of the feature type (3rd column) that is constrained to be either a term from the Sequence Ontology or an SO accession number (2278 possibilities).  * Some attribute's tags have predefined meanings: ID, Name, Alias, Parent, Target, Gap, Derives_from, Note, Dbxref, Ontology_term, Is_circular.   * Parent, Alias, Note, Dbxref and Ontology_term attributes can have multiple values (separated with the comma \",\" character).   * The ID indicates the ID of the feature. The ID attribute is required for features that have children (e.g. gene and mRNAs), or for those that span multiple lines, but are optional for other features. IDs for each feature must be unique within the scope of the GFF file. In the case of discontinuous features (i.e., a single feature that exists over multiple genomic locations) the same ID may appear on multiple lines. All lines that share an ID must collectively represent a single feature.   * The reserved Parent attribute can be used to establish a part-of relationship between two features. A feature that has the Parent attribute set is interpreted as asserting that it is a part of the specified Parent feature</p>"},{"location":"gxf/#gtf","title":"GTF","text":""},{"location":"gxf/#gtf1","title":"GTF1","text":"<p>(2000 - generally called GTF)</p> <p>GTF stands for Gene Transfer Format.</p> <p>GTF borrows from the GFF file format [1], but has additional structure that warrants a separate definition and format name. The structure is similar to GFF, so the fields are:  </p> <pre><code>&lt;seqname&gt;&lt;source&gt;&lt;feature&gt;&lt;start&gt;&lt;end&gt;&lt;score&gt;&lt;strand&gt;&lt;frame&gt;&lt;attributes&gt;\n</code></pre> <p>In this paper from 2003 (Keibler E, Brent M: Eval: a software package for analysis of genome annotations. BMC Bioinformatics 2003, 4:50.) they say:</p> <pre><code>Annotations are submitted to Eval in GTF file format http://genes.cse.wustl.edu/GTF2.html, \na community standard developed in the course of several collaborative genome annotations projects \n[Reese MG, Hartzell G, Harris NL, Ohler U, Abril JF, Lewis SE. Genome annotation assessment in \nDrosophila melanogaster. Genome Res. 2000;10:483\u2013501. doi: 10.1101/gr.10.4.483. | Mouse Genome\nSequencing Consortium Initial sequencing and comparative analysis of the mouse genome. Nature. \n2002;420:520\u2013562. doi: 10.1038/nature01262.].\nAs such it can be run on the output of any annotation system.\n</code></pre> <p>So the oldest paper they point to is the one from Reese et al. from February 9, 2000 (Genome annotation assessment in Drosophila melanogaster) that says:</p> <pre><code>We found that the General Feature Format (GFF) (formerly known as the Gene Feature Finding \nformat) was an excellent fit to our needs. The GFF format is an extension of a simple name, \nstart, end record that includes some additional information about the sequence being annotated: \nthe source of the feature; the type of feature; the location of the feature in the sequence; and\na score, strand, and frame for the feature. It has an optional ninth field that can be used to \ngroup multiple predictions into single annotations.\nMore information can be found at the GFF web site:  http://www.sanger.ac.uk/Software/formats/GFF/. \nOur evaluation tools used a GFF parser for the PERL programming language that is also available \nat the GFF web site. We found that it was necessary to specify a standard set of feature names \nwithin the GFF format, for instance, declaring that submitters should describe coding exons with \nthe feature name CDS.\n</code></pre> <p>From this, we can understand that in ~2000 for the drosophila genome project they have use the GFF format with particuliar specification that lead to the emergence of the GTF format.</p> <p>In another paper, The Human Genome Browser at UCSC. Genome Res. 2002 Jun; 12(6): 996\u20131006. doi:10.1101/gr.229102 the authors say that the GTF format has been designed specifically for the human genome project:</p> <pre><code>Since August 2001, it has become possible for users to upload their own annotations for display\nin the browser. These annotations can be in the standard GFF format \n(http://www.sanger.ac.uk/Software/formats/GFF), or in some formats designed specifically for the \nhuman genome project including GTF, PSL, and BED. The formats are described in detail in the web\npage http://genome.cse.ucsc.edu/goldenPath/help/customTrack.html. Note that the GFF and GTF files\nmust be tab delimited rather than space delimited.\n</code></pre> <p>With this last paper, it's hard to understand from which project the GTF format is finally born.</p> <p>Until now I havn't find a comprehensive description of the original GTF version (Ensembl version ?), but based on some hints from the Masters Project Report of Evan Keibler <code>Eval: A Gene Set Comparison System</code> and from other ressources I can say that the GTF1 was similar to GTF2. With few differences listed here:</p> <ul> <li> <p>feature  </p> <pre><code>The feature field can take 5 values: `CDS`, `start_codon`, `stop_codon`, `exon` and `intron`.\n</code></pre> </li> <li> <p>strand  </p> <pre><code>The strand value must be `+`, `-`, or `.`.\n</code></pre> </li> </ul>"},{"location":"gxf/#gtf2-and-gff25","title":"GTF2 and GFF2.5","text":"<p>(2003)  </p> <p>We can find in some places that GTF2 is similar to GFF2.5, but I do not know of a coherent explanation about it. It sounds definitely to be GTF format. The original GTF described by Ensembl has been adapted and became GTF2 for the need of the the Mouse/Human Annotation Collaboration.</p> <p>Here the description from the Brent Lab at the Washington University in St. Louis. Found from the Eval publication received the 18 July 2003 mentioning the address http://genes.cse.wustl.edu/GTF2.html that has been archived in the web-archive the 12/12/2003. Prior to the publication in BMC Bioinformatics (and after 1 January 2003 because it's the most recent  journal cited in his report) E. Kleiber released a Master project report named \"Eval: A Gene Set Comparison System\" where he mention and describe the GTF, maybe the first version of the GTF2 format.</p> <p>GTF borrows from the GFF file format [1], but has additional structure that warrants a separate definition and format name. The structure is similar to GFF, so the fields are:  </p> <pre><code>&lt;seqname&gt;&lt;source&gt;&lt;feature&gt;&lt;start&gt;&lt;end&gt;&lt;score&gt;&lt;strand&gt;&lt;frame&gt;&lt;attributes&gt;\n</code></pre> <p>Definition of these fields are:</p> <pre><code>&lt;seqname&gt;\n    The &lt;seqname&gt; field contains the name of the sequence which this gene is on.\n&lt;source&gt;\n    The &lt;source&gt; field should be a unique label indicating where the annotations came from \u2013 typically the name of either a prediction program or a public database.\n&lt;feature&gt;\n    The &lt;feature&gt; field can take 4 values: \"CDS\", \"start_codon\", \"stop_codon\" and \"exon\". The \u201cCDS\u201d feature represents the coding sequence starting with the first translated codon and proceeding to the last translated codon. Unlike Genbank annotation, the stop codon is not included in the \u201cCDS\u201d feature for the terminal exon. The \u201cexon\u201d feature is used to annotate all exons, including non-coding exons. The \u201cstart_codon\u201d and \u201cstop_codon\u201d features should have a total length of three for any transcript but may be split onto more than one line in the rare case where an intron falls inside the codon.\n&lt;start&gt;, &lt;end&gt;\n    Integer start and end coordinates of the feature relative to the beginning of the sequence named in &lt;seqname&gt;. &lt;start&gt; must be less than or equal to &lt;end&gt;. Sequence numbering starts at 1. Values of &lt;start&gt; and &lt;end&gt; must fall inside the sequence on which this feature resides.\n&lt;score&gt;\n    The &lt;score&gt; field is used to store some score for the feature. This can be any numerical value, or can be left out and replaced with a period.\n&lt;strand&gt;\n    '+' or '-'.\n&lt;frame&gt;\n   A value of 0 indicates that the first whole codon of the reading frame is located at 5'-most base. 1 means that there is one extra base before the first whole codon and 2 means that there are two extra bases before the first whole codon. Note that the frame is not the length of the CDS mod 3. If the strand is '-', then the first base of the region is value of &lt;end&gt;, because the corresponding coding region will run from &lt;end&gt; to &lt;start&gt; on the reverse strand.\n&lt;attributes&gt;\n    Each attribute in the &lt;attribute&gt; field should have the form: attribute_name \u201cattribute_value\u201d;\n    Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes.\n\n   All four features have the same two mandatory attributes at the end of the record:\n</code></pre> qualifier description gene_id A unique identifier for the genomic source of the transcript. Used to group transcripts into genes. transcript_id A unique identifier for the predicted transcript. Used to group features into transcripts. <pre><code>These attributes are designed for handling multiple transcripts from the same genomic region. Any other attributes or comments must appear after these two.\n\n[comments].\n    Any line may contain comments. Comments are indicated by the # character and everything following a # character on any line is a comment. As such, all fields are prohibited from containing # characters\n</code></pre> <p>Here an example of GTF:</p> <pre><code> Hs-Ch1  Twinscan    exon    150 200 .   +   .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    300 401 .   +   .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    CDS 380 401 .   +   0   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    501 650 .   +   .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    CDS 501 650 .   +   2   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    700 800 .   + .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    CDS 700 707 .   +   2   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    900 997 .   + .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    start_codon 380 382 .   +   0   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    stop_codon  708 710 .   +   0   gene_id \"1\"; transcript_id \"1.a\";\n</code></pre>"},{"location":"gxf/#gtf21","title":"GTF2.1","text":"<p>(2005)  </p> <p>Here the description from the Brent Lab at the Washington University in St. Louis. In this version, the feature field change a little bit and can contain 6 different types:</p> <pre><code>The following feature types are required: \"CDS\", \"start_codon\", \"stop_codon\".  \nThe features \"5UTR\", \"3UTR\", and \"exon\" are optional. All other features will be ignored.\n</code></pre>"},{"location":"gxf/#gtf22","title":"GTF2.2","text":"<p>(2007)  </p> <p>In this version, they included specific 9th column terms: transcript_id, protein_id and gene_id. Here the description from the Brent Lab at the Washington University in St. Louis. The  field change a little bit and can contain 9 different types: <pre><code>The following feature types are required: \"CDS\", \"start_codon\", \"stop_codon\".  \nThe features \"5UTR\", \"3UTR\", \"inter\", \"inter_CNS\", \"intron_CNS\" and \"exon\" are optional.\n</code></pre> <p><code>inter</code> and <code>inter_CNS</code> should have an empty transcript_id and gene_id attribute: gene_id \"\"; transcript_id \"\";</p>"},{"location":"gxf/#gtf25","title":"GTF2.5","text":"<p>(2012)  </p> <p>This version is unofficial. I call it like that to differentiate it against the other GTF flavors. This GTF flavor has been developed by the GENCODE project. Here is the first desciption of this format and the last desciption of this format. The  field changed a little bit and can contain 8 different types: gene, transcript, exon, CDS, UTR, start_codon, stop_codon, Selenocysteine. <p>The tags/key-name of the  field started with 9 mandatories and 34 optionals (30 from Havanna project and 4 specific to Genecode). The most recent description of the format shows that it has existed until 11 different mandatory tags, but depending of the version and the line (feature type) the number of mandatory tags has varied a lot. There are also 76 that are optionals (70 comes from of a special set of tags, and 6 are specifics). For GRCh38 annotation lifted back to GRCh3, there are 6 other optional tags."},{"location":"gxf/#gtf3","title":"GTF3","text":"<p>(2015)  </p> <p>This version is unofficial. I call it like that to differentiate it against the other GTF flavors. Originally Ensembl has created the GTF format that has been then slightly modified into GTF2 and then broadly used. Ensembl has adopted GTF2 and used only 4 different type of feature (CDS, exon, start_codon, stop_codon) and a lot of specific attributes. Then they adopted from release 75 the GTF 2.5. More features types are used: gene, transcript, exon, CDS, Selenocysteine, start_codon, stop_codon, and UTR. Then from release 82 they move on in the format I call GTF3 where they replaced UTR by three_prime_utr and five_prime_utr.</p>"},{"location":"gxf/#resume","title":"Resume","text":""},{"location":"gxf/#timeline-of-the-different-formats","title":"Timeline of the different formats","text":""},{"location":"gxf/#main-points-and-differences-between-gff-formats","title":"Main points and differences between GFF formats","text":"format version year col1 - seqname col2 - source col3 - feature col4 - start col5 - end col6 - score col7 - strand col8 - frame col9 - attribute Comment GFF1 1997 can be anything integer integer numerical value or 0 '+', '-' or '.' '0', '1', '2' or '.' This field is originaly called group. An optional string-valued field that can be used as a name to group together a set of records. Each String had to be under 256 characters + whole line under 32 000 characters long GFF2 2000 can be anything integer integer numerical value or  '.' '+', '-' or '.' '0', '1', '2' or '.' This optional must have an tag value structure following the syntax used within objects in a .ace file, flattened onto one line by semicolon separators. Tags must be standard identifiers ([A-Za-z][A-Za-z0-9_]). Free text values must be quoted with double quotes. Note: all non-printing characters in such free text value strings (e.g. newlines, tabs, control characters, etc) must be explicitly represented by their C (UNIX) style backslash-escaped representation (e.g. newlines as '\\n', tabs as '\\t'). As in ACEDB, multiple values can follow a specific tag. form: Target \"HBA_HUMAN\" 11 55 ; E_value 0.0003* The START and STOP codons are included in the CDS GFF3 2004 [a-zA-Z0-9.:^*$@!+_?-|] Column name changed by . This is constrained to be either a term from the Sequence Ontology or an SO accession number. integer integer numerical value or  '.' '+', '-', '.' or '?' Column name changed by  '0', '1', '2' or '.' Multiple tag=value pairs are separated by semicolons. URL escaping rules are used for tags or values containing the following characters: \",=;\". Spaces are allowed in this field, but tabs must be replaced with the %09 URL escape. Attribute values do not need to be and should not be quoted. The quotes should be included as part of the value by parsers and not stripped. form: ID=cds00004;Parent=mRNA00001,mRNA00002;Name=edenprotein.4. Some tags have predefined meaning, they start by capital letter.  The ID attributes are only mandatory for those features that have children (the gene and mRNAs), or for those that span multiple lines. Consequently features having parents must have the Parent attribute. The START and STOP codons are included in the CDS"},{"location":"gxf/#main-points-and-differences-between-gtf-formats","title":"Main points and differences between GTF formats","text":"format version year col1 - seqname col2 - source col3 - feature col4 - start col5 - end col6 - score col7 - strand col8 - frame col9 - attribute Comment GTF1 2000 CDS, start_codon, stop_codon, exon, intron integer integer numerical value or  '.' '+', '-' or '.' '0', '1', '2' or '.' porbably similar to GTF2 probably similar to GTF2 GTF2 / GFF2.5 2003 CDS, start_codon, stop_codon, exon integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF2.1 2005 CDS, start_codon, stop_codon, exon, 5UTR, 3UTR integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF2.2 2007 CDS, start_codon, stop_codon, 5UTR, 3UTR, inter, inter_CNS, intron_CNS and exon integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF2.5 2012 gene, transcript, exon, CDS, UTR, start_codon, stop_codon, Selenocysteine integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; ~9 mandatory tags but this number varies depending of the version and the type of feature. Number of optional tag varies between 34 and 82 depending of the version. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF3 2015 gene, transcript, exon, CDS, Selenocysteine, start_codon, stop_codon, three_prime_utr and five_prime_utr integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon"},{"location":"gxf/#discussion","title":"Discussion","text":"<p>The main differences between GTF and GFF formats are the 3rd and 9th colomn. The feature type value of the 3rd column in GTF is constrained by a list of few feature types (&lt;10) while in GFF it is much more vast. It was not constrained until version 3 where it is now constrained to be either a term from the Sequence Ontology or an SO accession number ( 2278 possible terms ).  </p> <p>The structure of the 9th column is slightly different between the two formats:   * GTF2.2: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d;   * GFF3: ID=cds00004;Parent=mRNA00001,mRNA00002;Name=edenprotein.4 </p> <p>Within that column, the mandatory attributes are different.</p> <p>Feature type limitation wihtin GTF </p> <p>As the feature types of the 3rd column is limited by the GTF format, many groups/infrastructure use the 9th column to describe other features like tRNA, pseudogenes, etc. As an example, ENSEMBL use the attribute gene_biotype to define if a transcript feature is coding or non-coding.</p>"},{"location":"gxf/#extra","title":"Extra","text":""},{"location":"gxf/#problems-encountered-due-to-lack-of-standardization","title":"Problems encountered due to lack of standardization","text":"<p>Inconsistency in stop codon treatment in GTF tracks (from https://genome.ucsc.edu/FAQ/FAQtracks.html):  </p> <p>I've been doing some comparative gene set analysis using the gene annotation tracks and I believe I have run into an inconsistency in the way that stop codons are treated in the annotations. Looking at the Human June 2002 assembly, the annotations for Ensembl, Twinscan, SGP, and Geneid appear to exclude the stop codon in the coding region coordinates. All of the other gene annotation sets include the stop codon as part of the coding region. My guess is that this inconsistency is the result of the gene sets being imported from different file formats. The GTF2 format does not include the stop codon in the terminal exon, while the GenBank format does, and the GFF format does not specify what to do.</p> <p>Answer:  </p> <p>Your guess is correct. We haven't gotten around to fixing this situation. A while ago, the Twinscan group made a GTF validator. It interpreted the stop codon as not part of the coding region. Prior to that, all GFF and GTF annotations that we received did include the stop codon as part of the coding region; therefore, we didn't have special code in our database to enforce it. In response to the validator, Ensembl, SGP and Geneid switched their handling of stop codons to the way that Twinscan does it, hence the discrepancy.</p> <p>Inconsistency in GTF format (reported by Evan Keibler in his Masters Project Report):  </p> <p>Although the GTF file format is a fairly simple and well defined format, data is often claimed to be in GTF format when it does not comply completely with the specification. Most data is generated in some proprietary format specific to the particular program or lab which produced it. These proprietary formats often differ in small subtle ways, such as the sequence being indexed starting at position 0 or 1, or the start/stop codon being inside or outside of the initial/terminal exon. If the data is to be effectively shared with others it must be in a standard, well defined format. Though many labs do convert their data to GTF format, the files they generate rarely comply completely with the specification. For this reason the GTF validator was created. The validator allows the user to verify that the data is in correct GTF format before sharing with others. This makes communication more efficient because the receiver does not have to locate and fix the subtle differences between the many file formats.</p>"},{"location":"gxf/#ensembl-gtf-formats","title":"Ensembl GTF formats","text":""},{"location":"gxf/#evolution-of-the-3rd-and-9th-column","title":"Evolution of the 3rd and 9th column","text":"<p>Here the example of the human annotation: </p> annotation file ensembl version nb feature type (3rd column) nb attribute tag (9th column) Homo_sapiens.NCBI36.43.gtf 43 4: CDSexonstart_codonstop_codon 6: exon_numbergene_idgene_nameprotein_idtranscript_idtranscript_name Homo_sapiens.GRCh37.74.gtf 74 4: CDSexonstart_codonstop_codon 8: exon_idexon_numbergene_biotypegene_idgene_nameprotein_idtranscript_idtranscript_name Homo_sapiens.GRCh37.75.gtf 75 8: CDSSelenocysteineUTRexongenestart_codonstop_codontranscript 12: ccds_idexon_idexon_numbergene_biotypegene_idgene_namegene_sourceprotein_idtag<sup>*</sup>transcript_idtranscript_nametranscript_source Homo_sapiens.GRCh37.81.gtf 81 8: CDSSelenocysteineUTRexongenestart_codonstop_codontranscript 22: ccds_idexon_idexon_numberexon_versiongene_biotypegene_idgene_namegene_sourcegene_versionhavana_genehavana_gene_versionhavana_transcripthavana_transcript_versionprotein_idprotein_versiontag<sup>*</sup>transcript_biotypetranscript_idtranscript_nametranscript_sourcetranscript_support_leveltranscript_version Homo_sapiens.GRCh37.82.gtf 82 9: CDSSelenocysteineexonfive_prime_utrgenestart_codonstop_codonthree_prime_utrtranscript 22: same as before Homo_sapiens.GRCh38.95.gtf 95 9: CDSSelenocysteineexonfive_prime_utrgenestart_codonstop_codonthree_prime_utrtranscript 18: ccds_idexon_idexon_numberexon_versiongene_biotypegene_idgene_namegene_sourcegene_versionprotein_idprotein_versiontag<sup>*</sup>transcript_biotypetranscript_idtranscript_nametranscript_sourcetranscript_support_leveltranscript_version <sup>*</sup>Tags are additional flags used to indicate attibutes of the transcript."},{"location":"gxf/#difference-between-gencode-and-ensembl-gtf","title":"Difference between GENCODE and Ensembl GTF","text":"<p>From here.  </p> <p>The gene annotation is the same in both files. The only exception is that the genes which are common to the human chromosome X and Y PAR regions can be found twice in the GENCODE GTF, while they are shown only for chromosome X in the Ensembl file.</p> <p>In addition, the GENCODE GTF contains a number of attributes not present in the Ensembl GTF, including annotation remarks, APPRIS tags and other tags highlighting transcripts experimentally validated by the GENCODE project or 3-way-consensus pseudogenes (predicted by Havana, Yale and UCSC). See our complete list of tags for more information.</p> <p>Please note that the Ensembl GTF covers the annotation in all sequence regions whereas GENCODE produces a similar file but also a GTF file with the annotation on the reference chromosomes only.</p>"},{"location":"how_to_cite/","title":"How to cite?","text":"<p>This work has not been published (I will think about it) but you can cite it as follow:  </p> <pre><code>Dainat J. 2022. Another Gtf/Gff Analysis Toolkit (AGAT): Resolve interoperability issues and accomplish more with your annotations. Plant and Animal Genome XXIX Conference. https://github.com/NBISweden/AGAT.\n</code></pre> <p>or/and (Adapt the AGAT version to the one you used):  </p> <pre><code>Dainat J. AGAT: Another Gff Analysis Toolkit to handle annotations in any GTF/GFF format.  \n(Version v1.4.1). Zenodo. https://www.doi.org/10.5281/zenodo.3552717\n</code></pre>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#using-docker","title":"Using Docker","text":"<p>First you must have Docker installed and running. Secondly have look at the availabe AGAT biocontainers at quay.io.</p> <p>Then: <pre><code># get the chosen AGAT container version\ndocker pull quay.io/biocontainers/agat:0.8.0--pl5262hdfd78af_0\n# use an AGAT's tool e.g. agat_convert_sp_gxf2gxf.pl\ndocker run quay.io/biocontainers/agat:0.8.0--pl5262hdfd78af_0 agat_convert_sp_gxf2gxf.pl --help\n</code></pre></p>"},{"location":"install/#using-singularity","title":"Using Singularity","text":"<p>First you must have Singularity installed and running. Secondly have look at the availabe AGAT biocontainers at quay.io.</p> <p>Then: <pre><code># get the chosen AGAT container version\nsingularity pull docker://quay.io/biocontainers/agat:1.0.0--pl5321hdfd78af_0\n# run the container\nsingularity run agat_1.0.0--pl5321hdfd78af_0.sif\n</code></pre></p> <p>You are now in the container. You can use an AGAT's tool e.g. agat_convert_sp_gxf2gxf.pl doing <pre><code>agat_convert_sp_gxf2gxf.pl --help\n</code></pre> </p>"},{"location":"install/#using-bioconda","title":"Using Bioconda","text":""},{"location":"install/#install-agat","title":"Install AGAT","text":"<pre><code>conda install -c bioconda agat\n</code></pre> <p>or in a fresh environment:</p> <pre><code>conda create -c bioconda -n agat agat\n</code></pre>"},{"location":"install/#update-agat","title":"Update AGAT","text":"<pre><code>conda update agat\n</code></pre>"},{"location":"install/#uninstall-agat","title":"Uninstall AGAT","text":"<pre><code>conda uninstall agat  \n</code></pre>"},{"location":"install/#old-school-manually","title":"Old school - Manually","text":"<p>You will have to install all prerequisites and AGAT manually.</p>"},{"location":"install/#install-prerequisites","title":"Install prerequisites","text":"<ul> <li> <p>R (optional)     You can install it by conda (<code>conda install r-base</code>), through CRAN (See here for a nice tutorial) or using your package management tool (e.g apt for Debian, Ubuntu, and related Linux distributions). R is optional and can be used to perform some plots. You will need to install the perl depency Statistics::R</p> </li> <li> <p>Perl &gt;= 5.8     It should already be available on your computer. If you are unlucky perl.org is the place to go.</p> </li> <li> <p>Perl modules     They can be installed in different ways:</p> <ul> <li>using cpan or cpanm</li> </ul> <pre><code>cpanm install bioperl Clone Graph::Directed LWP::UserAgent Carp Sort::Naturally File::Share File::ShareDir::Install Moose YAML LWP::Protocol::https Term::ProgressBar\n</code></pre> <ul> <li> <p>using conda</p> </li> <li> <p>using the provided yaml file</p> </li> </ul> <pre><code>conda env create -f conda_environment_AGAT.yml\nconda activate agat\n</code></pre> <ul> <li>manually  </li> </ul> <pre><code>conda install perl-bioperl perl-clone perl-graph perl-lwp-simple perl-carp perl-sort-naturally perl-file-share perl-file-sharedir-install perl-moose perl-yaml perl-lwp-protocol-https perl-term-progressbar\n</code></pre> <ul> <li>using your package management tool (e.g apt for Debian, Ubuntu, and related Linux distributions)</li> </ul> <pre><code>apt install libbio-perl-perl libclone-perl libgraph-perl liblwp-useragent-determined-perl libstatistics-r-perl libcarp-clan-perl libsort-naturally-perl libfile-share-perl libfile-sharedir libfile-sharedir-install-perl libyaml-perl liblwp-protocol-https-perl libterm-progressbar-perl\n</code></pre> </li> <li> <p>Optional     Some scripts offer the possibility to perform plots. You will need R and Statistics::R which are not included by default.</p> <ul> <li> <p>R    You can install it by conda (<code>conda install r-base</code>), through CRAN (See here for a nice tutorial) or using your package management tool (e.g apt for Debian, Ubuntu, and related Linux distributions).</p> </li> <li> <p>Statistics::R     You can install it through conda  (<code>conda install perl-statistics-r</code>), using cpan/cpanm (<code>cpanm install Statistics::R</code>), or your package management tool  (<code>apt install libstatistics-r-perl</code>)</p> </li> </ul> </li> </ul>"},{"location":"install/#install-agat_1","title":"Install AGAT","text":"<pre><code>git clone https://github.com/NBISweden/AGAT.git # Clone AGAT\ncd AGAT                                         # move into AGAT folder\nperl Makefile.PL                                # Check all the dependencies*\nmake                                            # Compile\nmake test                                       # Test\nmake install                                    # Install\n</code></pre> <p><sup>*</sup>If dependencies are missing you will be warn. Please refer to the Install prerequisites section.</p> <p>Remark: On MS Windows, instead of make you'd probably have to use dmake or nmake depending the toolchain you have.</p>"},{"location":"install/#update-agat_1","title":"Update AGAT","text":"<p>From the folder where the repository is located.</p> <p><pre><code>git pull                                        # Update to last AGAT\nperl Makefile.PL                                # Check all the dependencies*\nmake                                            # Compile\nmake test                                       # Test\nmake install                                    # Install\n</code></pre> <sup>*</sup>If dependencies are missing you will be warn. Please refer to the Install prerequisites section.</p>"},{"location":"install/#change-to-a-specific-version","title":"Change to a specific version","text":"<p>From the folder where the repository is located.  </p> <p><pre><code>git pull                                        # Update the code\ngit checkout v0.1                               # use version v0.1 (See releases tab for a list of available versions)\nperl Makefile.PL                                # Check all the dependencies*\nmake                                            # Compile\nmake test                                       # Test\nmake install                                    # Install\n</code></pre> <sup>*</sup>If dependencies are missing you will be warn. Please refer to the Install prerequisites section.</p>"},{"location":"install/#uninstall-agat_1","title":"Uninstall AGAT","text":"<p><pre><code>perl uninstall_AGAT\n</code></pre> </p>"},{"location":"topological-sorting-of-gff-features/","title":"Topological sorting of gff features","text":"<p>It might be critical to have a GFF/GTF file properly sorted:</p> <ul> <li>Not properly sorted, a genome browser can bug or give wrong displays</li> <li>Some tools require files sorted in a particular way (e.g.tabix tool from htslib need a GFF sorted by chromosomes and positions).</li> <li>It makes it easy to ready for the human eye</li> </ul> <p>Zhigang Lu has made a nice post about his experience trying to find a way to get a correct topological sorting. See here.</p>"},{"location":"topological-sorting-of-gff-features/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Tests summary</li> <li>Example 1</li> <li>The GFF file to sort</li> <li>Results<ul> <li>AGAT</li> <li>GenomeTools</li> <li>GFF3sort</li> <li>gffread</li> </ul> </li> <li>Example 2</li> <li>The GFF file to sort</li> <li>Results<ul> <li>AGAT</li> <li>GenomeTools</li> <li>GFF3sort</li> <li>gffread</li> </ul> </li> </ul>"},{"location":"topological-sorting-of-gff-features/#tests-summary","title":"Tests summary","text":"tool option in command line Type of sorting Comment AGAT --tabix by chromosomes, by gene position, by type (mRNAs then exon, then CDS then alphabetical feature types; then mRNA2 then exon2, then CDS2 then alphabetical feature2 types) Fix GFF/GTF if needed GenomeTools -sortlines -tidy -retainids by chromosomes and positions then random feature type Lines with the same chromosomes and start positions would be placed randomly, so parent feature lines might sometimes be placed after their children lines. GenomeTools -retainids by chromosomes, by gene position, by type (mRNA then children; then mRNA2 then children2), by position (children are sorted by positions) GFF3sort --precise by chromosomes and positions then attribute with Parent attribute first. move lines with \"Parent=\" attributes (case insensitive) behind lines without \"Parent=\" attributes. The goal of GFF3sort is not to obtain a topological sorting but rather getting something that could be indexed optimally by third part tools. gffread By default, chromosomes are kept in the order they were found. With --sort-alpha parameter the chromosomes (reference sequences) are sorted alphabetically /!\\ Some feature types are lost e.g. <code>gene</code>, <code>three_prime_UTR</code>, <code>five_prime_UTR</code>, etc..."},{"location":"topological-sorting-of-gff-features/#example-1","title":"Example 1","text":"<p>This test is based on the file used by Zhigang Lu</p>"},{"location":"topological-sorting-of-gff-features/#the-gff-file-to-sort","title":"The GFF file to sort","text":"<pre><code>##gff-version 3\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    gene    103403  151162  0.12    -   .   ID=Smp_315690\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.02    -   .   ID=Smp_315690.1;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.1 -   .   ID=Smp_315690.2;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.93    -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.96    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 105920  106144  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    105920  106144  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 106876  107159  0.93    -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    106876  107159  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 140582  140849  0.85    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    140582  140849  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   Parent=Smp_315690.2\n</code></pre>"},{"location":"topological-sorting-of-gff-features/#results","title":"Results","text":""},{"location":"topological-sorting-of-gff-features/#agat","title":"AGAT","text":"<p>AGAT v1.0.0</p> <ul> <li>default sorting</li> </ul> <p><code>agat_convert_sp_gxf2gxf.pl --gff test.gff</code></p> <pre><code>##gff-version 3\nSM_V7_1 AUGUSTUS    gene    103403  151162  0.12    -   .   ID=Smp_315690\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.02    -   .   ID=Smp_315690.1;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   ID=exon-1;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   ID=exon-6;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   ID=exon-8;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   ID=exon-10;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.93    -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   ID=five_prime_utr-1;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   ID=three_prime_utr-1;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.1 -   .   ID=Smp_315690.2;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   ID=exon-2;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    105920  106144  .   -   .   ID=exon-3;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    106876  107159  .   -   .   ID=exon-4;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    140582  140849  .   -   .   ID=exon-5;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   ID=exon-7;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   ID=exon-9;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   ID=exon-11;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.96    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 105920  106144  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 106876  107159  0.93    -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 140582  140849  0.85    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   ID=five_prime_utr-2;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   ID=three_prime_utr-2;Parent=Smp_315690.2\n</code></pre> <ul> <li>Tabix sorting</li> </ul> <p><code>agat config --expose --tabix</code> <code>agat_convert_sp_gxf2gxf.pl --gff test.gff</code></p> <pre><code>##gff-version 3\nSM_V7_1 AUGUSTUS  gene  103403  151162  0.12  - . ID=Smp_315690\nSM_V7_1 AUGUSTUS  mRNA  103403  151162  0.02  - . ID=Smp_315690.1;Parent=Smp_315690\nSM_V7_1 AUGUSTUS  mRNA  103403  151162  0.1 - . ID=Smp_315690.2;Parent=Smp_315690\nSM_V7_1 AUGUSTUS  exon  103403  103770  . - . ID=exon-1;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS  three_prime_UTR 103403  103440  . - . ID=three_prime_utr-1;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS  exon  103403  103770  . - . ID=exon-2;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  three_prime_UTR 103403  103440  . - . ID=three_prime_utr-2;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  CDS 103441  103770  0.93  - 0 ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS  CDS 103441  103770  0.96  - 0 ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  exon  105920  106144  . - . ID=exon-3;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  CDS 105920  106144  1 - 0 ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  exon  106876  107159  . - . ID=exon-4;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  CDS 106876  107159  0.93  - 2 ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  exon  140582  140849  . - . ID=exon-5;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  CDS 140582  140849  0.85  - 0 ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  exon  142981  143205  . - . ID=exon-6;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS  CDS 142981  143205  1 - 0 ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS  exon  142981  143205  . - . ID=exon-7;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  CDS 142981  143205  1 - 0 ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  exon  145395  145678  . - . ID=exon-8;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS  CDS 145395  145678  1 - 2 ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS  exon  145395  145678  . - . ID=exon-9;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  CDS 145395  145678  1 - 2 ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  exon  151075  151162  . - . ID=exon-10;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS  CDS 151075  151132  1 - 0 ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS  exon  151075  151162  . - . ID=exon-11;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  CDS 151075  151132  1 - 0 ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS  five_prime_UTR  151133  151162  . - . ID=five_prime_utr-1;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS  five_prime_UTR  151133  151162  . - . ID=five_prime_utr-2;Parent=Smp_315690.2\n</code></pre>"},{"location":"topological-sorting-of-gff-features/#genometools","title":"GenomeTools","text":"<p>GenomeTools 1.6.1</p> <p><code>gt gff3 -sortlines -tidy -retainids test.gff</code></p> <pre><code>##gff-version 3\n##sequence-region   SM_V7_1 103403 151162\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    gene    103403  151162  0.12    -   .   ID=Smp_315690\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.02    -   .   ID=Smp_315690.1;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.1 -   .   ID=Smp_315690.2;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.96    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.93    -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 105920  106144  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    105920  106144  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 106876  107159  0.93    -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    106876  107159  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 140582  140849  0.85    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    140582  140849  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   Parent=Smp_315690.2\n</code></pre> <p><code>gt gff3 -retainids test.gff</code></p> <pre><code>##gff-version 3\n##sequence-region   SM_V7_1 103403 151162\nSM_V7_1 AUGUSTUS    gene    103403  151162  0.12    -   .   ID=Smp_315690\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.02    -   .   ID=Smp_315690.1;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.93    -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.1 -   .   ID=Smp_315690.2;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.96    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 105920  106144  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    105920  106144  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 106876  107159  0.93    -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    106876  107159  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 140582  140849  0.85    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    140582  140849  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   Parent=Smp_315690.2\n###\n</code></pre>"},{"location":"topological-sorting-of-gff-features/#gff3sort","title":"GFF3sort","text":"<p>GFF3sort 0.1.a1a2bc9</p> <p><code>gff3sort.pl --precise test.gff</code></p> <pre><code>##gff-version 3\nSM_V7_1 AUGUSTUS    gene    103403  151162  0.12    -   .   ID=Smp_315690\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.02    -   .   ID=Smp_315690.1;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.1 -   .   ID=Smp_315690.2;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.93    -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.96    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 105920  106144  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    105920  106144  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 106876  107159  0.93    -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    106876  107159  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 140582  140849  0.85    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    140582  140849  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   Parent=Smp_315690.2\n</code></pre>"},{"location":"topological-sorting-of-gff-features/#gffread","title":"gffread","text":"<p>gffread v0.11.4</p> <p><code>gffread test.gff</code></p> <pre><code># gffread test.gff\n# gffread v0.11.4\n##gff-version 3\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  .   -   .   ID=Smp_315690.1;geneID=Smp_315690\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 103441  103770  .   -   0   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 142981  143205  .   -   0   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 145395  145678  .   -   2   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 151075  151132  .   -   0   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  .   -   .   ID=Smp_315690.2;geneID=Smp_315690\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    105920  106144  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    106876  107159  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    140582  140849  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 103441  103770  .   -   0   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 105920  106144  .   -   0   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 106876  107159  .   -   2   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 140582  140849  .   -   0   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 142981  143205  .   -   0   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 145395  145678  .   -   2   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 151075  151132  .   -   0   Parent=Smp_315690.2\n</code></pre>"},{"location":"topological-sorting-of-gff-features/#example-2","title":"Example 2","text":"<p>This test is based on the file used by GFF3sort</p>"},{"location":"topological-sorting-of-gff-features/#the-gff-file-to-sort_1","title":"The GFF file to sort","text":"<pre><code>##gff-version 3\n###\nA01 Cufflinks   mRNA    473 6154    .   -   .   ID=XLOC_001154.41;description=Novel: Intergenic transcript\nA01 Cufflinks   exon    473 814 .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    1626    2574    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    2695    2721    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    3637    3726    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    5329    5408    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    5994    6154    .   -   .   Parent=XLOC_001154.41\n###\nA01 Cufflinks   mRNA    473 6386    .   -   .   ID=XLOC_001154.42;description=Novel: Intergenic transcript\nA01 Cufflinks   exon    473 2024    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    2615    2721    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    3637    3726    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    5329    6386    .   -   .   Parent=XLOC_001154.42\n</code></pre>"},{"location":"topological-sorting-of-gff-features/#results_1","title":"Results","text":""},{"location":"topological-sorting-of-gff-features/#agat_1","title":"AGAT","text":"<p>AGAT v0.9.0</p> <ul> <li>default sorting</li> </ul> <p><code>agat_convert_sp_gxf2gxf.pl --gff test2.gff --merge_loci</code></p> <pre><code>##gff-version 3\n###\nA01 Cufflinks   gene    473 6386    .   -   .   ID=nbisL1-mrna-1;description=Novel: Intergenic transcript\nA01 Cufflinks   mRNA    473 6154    .   -   .   ID=XLOC_001154.41;Parent=nbisL1-mrna-1;description=Novel: Intergenic transcript\nA01 Cufflinks   exon    473 814 .   -   .   ID=exon-1;Parent=XLOC_001154.41\nA01 Cufflinks   exon    1626    2574    .   -   .   ID=exon-2;Parent=XLOC_001154.41\nA01 Cufflinks   exon    2695    2721    .   -   .   ID=exon-3;Parent=XLOC_001154.41\nA01 Cufflinks   exon    3637    3726    .   -   .   ID=exon-4;Parent=XLOC_001154.41\nA01 Cufflinks   exon    5329    5408    .   -   .   ID=exon-5;Parent=XLOC_001154.41\nA01 Cufflinks   exon    5994    6154    .   -   .   ID=exon-6;Parent=XLOC_001154.41\nA01 Cufflinks   mRNA    473 6386    .   -   .   ID=XLOC_001154.42;Parent=nbisL1-mrna-1;description=Novel: Intergenic transcript\nA01 Cufflinks   exon    473 2024    .   -   .   ID=exon-7;Parent=XLOC_001154.42\nA01 Cufflinks   exon    2615    2721    .   -   .   ID=exon-8;Parent=XLOC_001154.42\nA01 Cufflinks   exon    3637    3726    .   -   .   ID=exon-9;Parent=XLOC_001154.42\nA01 Cufflinks   exon    5329    6386    .   -   .   ID=exon-10;Parent=XLOC_001154.42\n</code></pre> <ul> <li>Tabix sorting</li> </ul> <p><code>agat_convert_sp_gxf2gxf.pl --gff test2.gff --merge_loci --tabix</code></p> <pre><code>##gff-version 3\n###\nA01 Cufflinks gene  473 6386  . - . ID=nbisL1-mrna-1;description=Novel: Intergenic transcript\nA01 Cufflinks mRNA  473 6154  . - . ID=XLOC_001154.41;Parent=nbisL1-mrna-1;description=Novel: Intergenic transcript\nA01 Cufflinks mRNA  473 6386  . - . ID=XLOC_001154.42;Parent=nbisL1-mrna-1;description=Novel: Intergenic transcript\nA01 Cufflinks exon  473 814 . - . ID=exon-1;Parent=XLOC_001154.41\nA01 Cufflinks exon  473 2024  . - . ID=exon-7;Parent=XLOC_001154.42\nA01 Cufflinks exon  1626  2574  . - . ID=exon-2;Parent=XLOC_001154.41\nA01 Cufflinks exon  2615  2721  . - . ID=exon-8;Parent=XLOC_001154.42\nA01 Cufflinks exon  2695  2721  . - . ID=exon-3;Parent=XLOC_001154.41\nA01 Cufflinks exon  3637  3726  . - . ID=exon-4;Parent=XLOC_001154.41\nA01 Cufflinks exon  3637  3726  . - . ID=exon-9;Parent=XLOC_001154.42\nA01 Cufflinks exon  5329  5408  . - . ID=exon-5;Parent=XLOC_001154.41\nA01 Cufflinks exon  5329  6386  . - . ID=exon-10;Parent=XLOC_001154.42\nA01 Cufflinks exon  5994  6154  . - . ID=exon-6;Parent=XLOC_001154.41\n</code></pre>"},{"location":"topological-sorting-of-gff-features/#genometools_1","title":"GenomeTools","text":"<p>GenomeTools 1.6.1</p> <p><code>gt gff3 -sortlines -tidy -retainids test2.gff</code></p> <pre><code>##gff-version 3\n##sequence-region   A01 473 6386\nA01 Cufflinks   exon    473 814 .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    473 2024    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   mRNA    473 6154    .   -   .   ID=XLOC_001154.41;description=Novel: Intergenic transcript\nA01 Cufflinks   mRNA    473 6386    .   -   .   ID=XLOC_001154.42;description=Novel: Intergenic transcript\nA01 Cufflinks   exon    1626    2574    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    2615    2721    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    2695    2721    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    3637    3726    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    3637    3726    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    5329    5408    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    5329    6386    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    5994    6154    .   -   .   Parent=XLOC_001154.41\n###\n</code></pre> <p><code>gt gff3 -retainids test2.gff</code></p> <pre><code>##gff-version 3\n##sequence-region   SM_V7_1 103403 151162\nSM_V7_1 AUGUSTUS    gene    103403  151162  0.12    -   .   ID=Smp_315690\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.02    -   .   ID=Smp_315690.1;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.93    -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.1.cds;Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   Parent=Smp_315690.1\nSM_V7_1 AUGUSTUS    mRNA    103403  151162  0.1 -   .   ID=Smp_315690.2;Parent=Smp_315690\nSM_V7_1 AUGUSTUS    three_prime_UTR 103403  103440  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    103403  103770  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 103441  103770  0.96    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 105920  106144  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    105920  106144  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 106876  107159  0.93    -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    106876  107159  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 140582  140849  0.85    -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    140582  140849  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 142981  143205  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    142981  143205  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 145395  145678  1   -   2   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    145395  145678  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    CDS 151075  151132  1   -   0   ID=Smp_315690.2.cds;Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    exon    151075  151162  .   -   .   Parent=Smp_315690.2\nSM_V7_1 AUGUSTUS    five_prime_UTR  151133  151162  .   -   .   Parent=Smp_315690.2\n###\n</code></pre>"},{"location":"topological-sorting-of-gff-features/#gff3sort_1","title":"GFF3sort","text":"<p>GFF3sort 0.1.a1a2bc9</p> <p><code>gff3sort.pl --precise test2.gff</code></p> <pre><code>##gff-version 3\nA01 Cufflinks   mRNA    473 6154    .   -   .   ID=XLOC_001154.41;description=Novel: Intergenic transcript\nA01 Cufflinks   mRNA    473 6386    .   -   .   ID=XLOC_001154.42;description=Novel: Intergenic transcript\nA01 Cufflinks   exon    473 2024    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    473 814 .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    1626    2574    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    2615    2721    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    2695    2721    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    3637    3726    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    3637    3726    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    5329    6386    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    5329    5408    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    5994    6154    .   -   .   Parent=XLOC_001154.41\n</code></pre>"},{"location":"topological-sorting-of-gff-features/#gffread_1","title":"gffread","text":"<p>gffread v0.11.4</p> <p><code>gffread test2.gff</code></p> <pre><code># gffread test2.gff\n# gffread v0.11.4\n##gff-version 3\nA01 Cufflinks   mRNA    473 6154    .   -   .   ID=XLOC_001154.41\nA01 Cufflinks   exon    473 814 .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    1626    2574    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    2695    2721    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    3637    3726    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    5329    5408    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   exon    5994    6154    .   -   .   Parent=XLOC_001154.41\nA01 Cufflinks   mRNA    473 6386    .   -   .   ID=XLOC_001154.42\nA01 Cufflinks   exon    473 2024    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    2615    2721    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    3637    3726    .   -   .   Parent=XLOC_001154.42\nA01 Cufflinks   exon    5329    6386    .   -   .   Parent=XLOC_001154.42\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#installation-via-conda-perl-clone-missing","title":"Installation via conda - perl-clone missing","text":"<p>When installing AGAT via Conda you might encounter the following error message:</p> <pre><code>LibMambaUnsatisfiableError: Encountered problems while solving:\n  - nothing provides perl-clone needed by agat-1.4.2-pl5321hdfd78af_0\nCould not solve for environment specs\nThe following package could not be installed\n|- agat 1.4.2** is not installable because it requires\n   |- perl-clone, which does not exist (perhaps a missing channel).\n</code></pre> <p>This issue occurs when using a computer with an ARM64 processor architecture, such as an Apple computer with an M1, M2, M3, or similar processor. The perl-clone package requires platform-specific (compiled) code, and a compatible compilation has not yet been produced for this Conda recipe.</p> <p>Hopefully, this will become available in the future. In the meantime, the alternatives are to use the AGAT container via Docker or Singularity.</p>"},{"location":"troubleshooting/#agat-throws-features-out-because-the-feature-type-is-not-yet-taken-into-account","title":"AGAT throws features out, because the feature type is not yet taken into account","text":"<p>Feature types (primary_tag) handled by AGAT are defined within <code>feature_levels.yaml</code> file. Most common features are already defined in this file. If you encounter GFF/GTF files with feature types not accepted, AGAT will inform you and throw the features out. To keep those feature you must inform AGAT how to handle them: First access the feature_levels.yaml files by running: <pre><code># expose the yaml files\nagat levels --expose\n</code></pre></p> <p>Then open the file with your favorite text editor.</p> <p>Now choose which section you want to modify:  </p> <ul> <li><code>level1</code> (e.g. gene, match, region):   For features that do not have parent</li> <li><code>level2</code> (e.g. mrna, match_part, trna):   For features that have one parent and the parent is a level 1 feature.</li> <li><code>level3</code> (e.g. exon, intron, cds):   For features that have one parent (the parent has also a parent) and no children</li> </ul> <p>For features that are discontinuous (i.e. when a single feature exists over multiple genomic locations like cds, utr) you must also fil the <code>spread</code> section.</p> <p>Then add the feature type information by adding a paired-value like this: <pre><code>    \"bigRNA\":\"gene\",\n</code></pre> Where <code>bigRNA</code>is the feature type and <code>gene</code> the parent feature type expected. /!\\ For <code>level1</code> feature type the second value can be:  </p> <ul> <li><code>topfeature</code>: feature does not expect children, and will be written first in the sequence</li> <li><code>standalone</code>: feature does not expect children</li> <li>other values do not have any meaning but a value is required, write whatever you want.</li> </ul>"},{"location":"troubleshooting/#agat-throws-features-out-because-child-features-are-not-provided","title":"AGAT throws features out, because child features are not provided","text":"<p>Features level1 (e.g. gene, match, chromosome) may require to have child features or not depending of the information stored into the <code>feature_levels.yaml</code> file. If a child is required, and the GFF file does not contain it, the level1 feature will be thrown away. You must modify the <code>feature_levels.yaml</code> file to add the the term <code>standalone</code> to inform AGAT that this feature level1 do not require any child. (This work only on feature level1, not level2 or level3). To access the <code>feature_levels.yaml</code> file run the following command: <pre><code># expose the yaml files\nagat levels --expose\n</code></pre> Then open the <code>feature_levels.yaml</code> and put the value <code>standalone</code> as value to the required feature. Finally run your scripts in the same folder as the modified <code>feature_levels.yaml</code> file is standing.</p>"},{"location":"troubleshooting/#how-to-use-a-version-of-agat-from-a-specific-branch","title":"How to use a version of AGAT from a specific branch","text":"<pre><code># install AGAT dependencies\nconda install -c bioconda agat\n# clone the repo\ngit clone https://github.com/NBISweden/AGAT.git\n# if the branch you want is not the master (replace BRANCHE_NAME by the one you wish to use)\ngit checkout BRANCHE_NAME\n# move into AGAT folder\ncd AGAT \n# Check all the dependencies*\nperl Makefile.PL\n# Compile\nmake\n# Test\nmake test\n# Install\nmake install                                    \n</code></pre>"},{"location":"troubleshooting/#how-to-fix-biorootexception-met-in-agat","title":"How to fix Bio::Root::Exception met in AGAT","text":"<p>They are bioperl error messages. Encountered error can be: <pre><code>MSG: Failed validation of sequence '[unidentified sequence]'. Invalid characters \n</code></pre> or <pre><code>MSG: Each line of the file must be less than 65,536 characters.\n</code></pre></p> <p>Bio::DB::Fasta from Bioperl cannot handle line with more than 65,536 characters. So you must fold you fasta sequence before to run AGAT's scripts: <pre><code># Fold to 80 characters by line. \n# Be careful if you have long headers that can be folded over several lines. You must first shorten them, or fold with higher value.\nfold input.fa &gt; output.fa\n</code></pre></p>"},{"location":"troubleshooting/#how-to-use-codon-table-0-codon-table-1-is-used-instead","title":"How to use codon table 0 (codon table 1 is used instead)?","text":"<p>Several scripts need to use a codon table:</p> <pre><code>agat_sp_add_start_and_stop.pl  \nagat_sp_extract_sequences.pl  \nagat_sp_filter_incomplete_gene_coding_models.pl  \nagat_sp_fix_fusion.pl\nagat_sp_fix_longest_ORF.pl\nagat_sp_fix_small_exon_from_extremities.pl\nagat_sp_flag_premature_stop_codons.pl\nagat_sp_prokka_fix_fragmented_gene_annotations.pl\n</code></pre> <p>By default AGAT uses codon table 1 wich is the standard table. </p> <ul> <li> <p>What is the difference between table 1 and table 0?   The codon table 0 is strict and uses ATG-only start codon, while codon table 1 uses TTG, CTG and ATG possible start codon.</p> </li> <li> <p>What are the possible codon table?    In top of the table 0 which is specific to Bioperl many other tables are available. Their description can be found here.</p> </li> </ul>"},{"location":"troubleshooting/#why-when-asking-for-table-0-agat-keep-using-the-table-1","title":"Why when asking for table 0 AGAT keep using the table 1 ?","text":"<p>There are two possible reasons for that problem.</p> <ul> <li> <p>AGAT: Originally the problem comes from a bug in Bioperl. AGAT was trying to pass by the problem but the fix was not efficient until version 1.4.1. Please be sure to use a version &gt;= 1.4.1 to avoid any problem from the AGAT side.</p> </li> <li> <p>Bioperl: The problem has been present for a while and has been definitly fixed in the commit fa9366f from the 24th of April 2024.   So to fix the problem you need to use a bioperl version equal or later to that point. If not possible (e.g. not yet available for installation via conda) you can follow this procedure:</p> <ul> <li>run AGAT once</li> <li>catch the location of bioperl used from the prompt e.g.:     <pre><code> ------------------------------------------------------------------------------\n|   Another GFF Analysis Toolkit (AGAT) - Version: v1.4.0                      |\n|   https://github.com/NBISweden/AGAT                                          |\n|   National Bioinformatics Infrastructure Sweden (NBIS) - www.nbis.se         |\n------------------------------------------------------------------------------\n\n...\n\n=&gt; Machine information:\n      This script is being run by perl v5.32.1\n      Bioperl location being used: /usr/local/lib/perl5/site_perl/Bio/\n      Operating system being used: linux\n</code></pre>     Here the bioperl path is here: <code>/usr/local/lib/perl5/site_perl/Bio/</code></li> <li>Move into the directory found in the previous step minus <code>/Bio</code>:     <code>cd /usr/local/lib/perl5/site_perl/</code></li> <li>Copy paste locally the file and the folder from the bioperl-live repository (here)[https://github.com/bioperl/bioperl-live/tree/master/lib]: <pre><code>git clone https://github.com/bioperl/bioperl-live\ncp -r bioperl-live/lib/* .\n</code></pre></li> </ul> <p>Now you should be able to use the codon table 0. If not check your AGAT version (see above).</p> </li> </ul>"},{"location":"why_agat/","title":"Why AGAT?","text":"<p>Providing support in genome annotation within NBIS the GTF/GFF format is the main format I handle. I receive from customers file in GTF/GFF format coming from a broad range of sources. Even sometimes files from mixed sources (concatenated in the same file), or manually edited. The problem is that often those files do not follow the official specifications or even if they do, they are not even be sure to be compatible we the inputs expected by the tools.</p> <ul> <li> <p>The main idea was first to be able to parse all possible cases that can be met (I listed more than 30 cases). To my knowledge AGAT is the only one able to handle all of them.</p> </li> <li> <p>The second idea was to be able to create a full standardised GFF3 file that could actually fit in any tool. Once again AGAT is the only one recreating fully the missing information:</p> </li> <li>missing features (gene, mRNA, tRNA, exon, UTRs, etc...)</li> <li>missing attributes (ID, Parent).</li> </ul> <p>and fixing wrong information:    * identifier to be uniq.    * feature location (e.g mRNA will be stretched if shorter than its exons).    * remove duplicated features.    * merge overlapping loci (if option activate because for prokaryote is not something we would like)</p> <ul> <li> <p>The third idea was to have a correct topological sorting output. The parent features must be mentioned before children features.</p> </li> <li> <p>Finally, based on the abilities described previously I have developed a toolkit to perform different tasks. Some are originals, some are similar than what other tools could offer, but within AGAT they will always have the strength of the 3 first points.</p> </li> </ul>"},{"location":"howto/how_to_aggregate_annotation/","title":"How to aggregate several annotations?","text":"<p>There are two scripts in AGAT in order to aggregate annotations. They do not behave the same way. Find below some explanation on their behaviors.    </p> <p></p>"},{"location":"howto/how_to_extract_sequences/","title":"How to extract sequences?","text":"<p>You can use the script agat_sp_extract_sequences.pl. Find below exmaples on how to use this script.  </p> <p></p> <p></p>"},{"location":"tools/agat_convert_bed2gff/","title":"agat_convert_bed2gff.pl","text":""},{"location":"tools/agat_convert_bed2gff/#description","title":"DESCRIPTION","text":"<p>The script takes a bed file as input, and will translate it in gff format. The BED format is described here The script converts 0-based, half-open [start-1, end) bed file to 1-based, closed [start, end] General Feature Format v3 (GFF3).</p>"},{"location":"tools/agat_convert_bed2gff/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_convert_bed2gff.pl --bed infile.bed [ -o outfile ]\nagat_convert_bed2gff.pl -h\n</code></pre>"},{"location":"tools/agat_convert_bed2gff/#options","title":"OPTIONS","text":"<ul> <li> <p>--bed</p> <p>Input bed file that will be converted.</p> </li> <li> <p>--source</p> <p>The source informs about the tool used to produce the data and is stored in 2nd field of a gff file. Example: Stringtie,Maker,Augustus,etc. [default: data]</p> </li> <li> <p>--primary_tag</p> <p>The primary_tag corresponds to the data type and is stored in 3rd field of a gff file. Example: gene,mRNA,CDS,etc.  [default: gene]</p> </li> <li> <p>--inflate_off</p> <p>By default we inflate the block fields (blockCount, blockSizes, blockStarts) to create subfeatures of the main feature (primary_tag). The type of subfeature created is based on the inflate_type parameter. If you do not want this inflating behaviour you can deactivate it by using the --inflate_off option.</p> </li> <li> <p>--inflate_type</p> <p>Feature type (3rd column in gff) created when inflate parameter activated [default: exon].</p> </li> <li> <p>--verbose</p> <p>add verbosity</p> </li> <li> <p>-o , --output , --out , --outfile or --gff</p> <p>Output GFF file. If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_convert_embl2gff/","title":"agat_convert_embl2gff.pl","text":""},{"location":"tools/agat_convert_embl2gff/#description","title":"DESCRIPTION","text":"<p>The script takes an EMBL file as input, and will translate it in gff format.</p>"},{"location":"tools/agat_convert_embl2gff/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_converter_embl2gff.pl --embl infile.embl [ -o outfile ]\n</code></pre>"},{"location":"tools/agat_convert_embl2gff/#options","title":"OPTIONS","text":"<ul> <li> <p>--embl</p> <p>Input EMBL file that will be read</p> </li> <li> <p>--emblmygff3</p> <p>Bolean - Means that the EMBL flat file comes from the EMBLmyGFF3 software.  This is an EMBL format dedicated for submission and contains particularity to deal with. This parameter is needed to get a proper sequence id in the GFF3 from an embl made with EMBLmyGFF3.</p> </li> <li> <p>--primary_tag, --pt, -t</p> <p>List of \"primary tag\". Useful to discard or keep specific features. Multiple tags must be coma-separated.</p> </li> <li> <p>-d</p> <p>Bolean - Means that primary tags provided by the option \"primary_tag\" will be discarded.</p> </li> <li> <p>-k</p> <p>Bolean - Means that only primary tags provided by the option \"primary_tag\" will be kept.</p> </li> <li> <p>-o, --output, --out, --outfile or --gff</p> <p>Output GFF file. If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_convert_genscan2gff/","title":"agat_convert_genscan2gff.pl","text":""},{"location":"tools/agat_convert_genscan2gff/#description","title":"DESCRIPTION","text":"<p>The script takes a genscan file as input, and will translate it in gff format. The genscan format is described here: http://genome.crg.es/courses/Bioinformatics2003_genefinding/results/genscan.html /! vvv Known problem vvv /! You must have submited only DNA sequence, wihtout any header!! Indeed the tool expects only DNA sequences and does not crash/warn if an header is submited along the sequence. e.g If you have an header \"&gt;seq\" s-e-q are seen as the 3 first nucleotides of the sequence. Then all prediction location are shifted accordingly. (checked only on the online version http://argonaute.mit.edu/GENSCAN.html. I don't know if there is the same pronlem elsewhere.) /! ^^^ Known problem ^^^^ /!</p>"},{"location":"tools/agat_convert_genscan2gff/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_convert_genscan2gff.pl --genscan infile.bed [ -o outfile ]\nagat_convert_genscan2gff.pl -h\n</code></pre>"},{"location":"tools/agat_convert_genscan2gff/#options","title":"OPTIONS","text":"<ul> <li> <p>--genscan or -g</p> <p>Input bed file that will be convert.</p> </li> <li> <p>--seqid</p> <p>String - Sequence ID. [default: unknown]</p> </li> <li> <p>--primary_tag</p> <p>The primary_tag corresponf to the data type and is stored in 3rd field of a gff file. Example: gene,mRNA,CDS,etc.  [default: gene]</p> </li> <li> <p>--verbose or -v</p> <p>Add verbosity</p> </li> <li> <p>-o, --output, --out, --outfile or --gff</p> <p>Output GFF file. If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_convert_mfannot2gff/","title":"agat_convert_mfannot2gff.pl","text":""},{"location":"tools/agat_convert_mfannot2gff/#description","title":"DESCRIPTION","text":"<p>Conversion utility for MFannot \"masterfile\" annotation produced by the MFannot pipeline (http://megasun.bch.umontreal.ca/RNAweasel/). Reports GFF3 format.</p>"},{"location":"tools/agat_convert_mfannot2gff/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_convert_mfannot2gff.pl -m &lt;mfannot&gt; -o &lt;gff&gt;\nagat_convert_mfannot2gff.pl --help\n</code></pre>"},{"location":"tools/agat_convert_mfannot2gff/#copyright-and-license","title":"COPYRIGHT AND LICENSE","text":"<p>Copyright (C) 2015, Brandon Seah (kbseah@mpi-bremen.de) ... GPL-3 ... modified by jacques dainat 2017-11</p>"},{"location":"tools/agat_convert_mfannot2gff/#options","title":"OPTIONS","text":"<ul> <li> <p>-m or -i or --mfannot</p> <p>The mfannot input file</p> </li> <li> <p>-g or -o or --gff</p> <p>the gff output file</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--verbose or -v</p> <p>Add verbosity</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_convert_minimap2_bam2gff/","title":"agat_convert_minimap2_bam2gff.pl","text":""},{"location":"tools/agat_convert_minimap2_bam2gff/#description","title":"DESCRIPTION","text":"<p>The script converts output from minimap2 (bam or sam) into GFF file. To get bam from minimap2 use the following command:  </p> <p>minimap2 -ax splice:hq genome.fa Asecodes_parviclava.nucest.fa | samtools sort -O BAM -o output.bam  </p> <p>To use bam with this script you will need samtools in your path.</p>"},{"location":"tools/agat_convert_minimap2_bam2gff/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_convert_minimap2_bam2gff.pl -i infile.bam [ -o outfile ]\nagat_convert_minimap2_bam2gff.pl -i infile.sam [ -o outfile ]\nagat_convert_minimap2_bam2gff.pl --help\n</code></pre>"},{"location":"tools/agat_convert_minimap2_bam2gff/#options","title":"OPTIONS","text":"<ul> <li> <p>-i or --input</p> <p>Input file in sam (.sam extension) or bam (.bam extension) format.</p> </li> <li> <p>-b or --bam</p> <p>To force to use the input file as sam file.</p> </li> <li> <p>-s or --sam</p> <p>To force to use the input file as sam file.</p> </li> <li> <p>-o, --out or --output</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_convert_sp_gff2bed/","title":"agat_convert_sp_gff2bed.pl","text":""},{"location":"tools/agat_convert_sp_gff2bed/#description","title":"DESCRIPTION","text":"<p>The script aims to convert GTF/GXF file into bed file. It will convert level2 features from gff (mRNA, transcripts) into bed features. If the selected level2 subfeatures (defaut: exon) exist, they are reported in the block fields (9-12th colum in bed). CDS Start and End are reported in column 7 and 8 accordingly.</p> <p>Definintion of the bed format:  <pre><code>## 1 chrom - The name of the chromosome (e.g. chr3, chrY, chr2_random) or scaffold (e.g. scaffold10671).  \n## 2 chromStart - The starting position of the feature in the chromosome or scaffold. The first base in a chromosome is numbered 0.  \n## 3 chromEnd - The ending position of the feature in the chromosome or scaffold. The chromEnd base is not included in the display of the feature. For example, the first 100 bases of a chromosome are defined as chromStart=0, chromEnd=100, and span the bases numbered 0-99.  \n########### OPTIONAL fields ##########  \n## 4 name - Defines the name of the BED line. This label is displayed to the left of the BED line in the Genome Browser window when the track is open to full display mode or directly to the left of the item in pack mode.  \n## 5 score - A score between 0 and 1000. If the track line useScore attribute is set to 1 for this annotation data set, the score value will determine the level of gray in which this feature is displayed (higher numbers = darker gray).  \n## 6 strand - Defines the strand - either '+' or '-'.  \n## 7 thickStart - The starting position at which the feature is drawn thickly  \n## 8 thickEnd - The ending position at which the feature is drawn thickly  \n## 9 itemRgb - An RGB value of the form R,G,B (e.g. 255,0,0). If the track line itemRgb attribute is set to \"On\", this RBG value will determine the display color of the data contained in this BED line. NOTE: It is recommended that a simple color scheme (eight colors or less) be used with this attribute to avoid overwhelming the color resources of the Genome Browser and your Internet browser.  \n## 10 blockCount - The number of blocks (exons) in the BED line.  \n## 11 blockSizes - A comma-separated list of the block sizes. The number of items in this list should correspond to blockCount.  \n## 12 blockStarts - A comma-separated list of block starts. All of the blockStart positions should be calculated relative to chromStart. The number of items in this list should correspond to blockCount.  \n</code></pre></p>"},{"location":"tools/agat_convert_sp_gff2bed/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_convert_sp_gff2bed.pl --gff file.gff  [ -o outfile ]\nagat_convert_sp_gff2bed.pl --help\n</code></pre>"},{"location":"tools/agat_convert_sp_gff2bed/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff</p> <p>Input GFF3 file that will be read</p> </li> <li> <p>--nc</p> <p>STRING - behaviour for non-coding features (e.g. recored wihtout CDS). [keep,filter,transcript] keep - Default, they are kept but no CDS position is reported in the 7th and 8th columns (a period is reported instead). filter - We remove them. transcript - We keep them but values in 7th and 8th columns will contains transcript's start and stop.</p> </li> <li> <p>--sub</p> <p>Define the subfeature (level3, e.g exon,cds,utr,etc...) to report as blocks in the bed output. Defaut: exon.</p> </li> <li> <p>--outfile, --out, --output, or -o</p> <p>File where will be written the result. If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_convert_sp_gff2gtf/","title":"agat_convert_sp_gff2gtf.pl","text":""},{"location":"tools/agat_convert_sp_gff2gtf/#description","title":"DESCRIPTION","text":"<p>The script aims to convert any GTF/GFF file into a proper GTF file. Full information about the format can be found here: https://agat.readthedocs.io/en/latest/gxf.html You can choose among 7 different GTF types (1, 2, 2.1, 2.2, 2.5, 3 or relax). Depending the version selected the script will filter out the features that are not accepted. For GTF2.5 and 3, every level1 feature (e.g nc_gene pseudogene) will be converted into gene feature and every level2 feature (e.g mRNA ncRNA) will be converted into transcript feature. You can even produce a GFF-like GTF using the relax option. It allows to keep all original feature types (3rd column). No modification will occur e.g. mRNA to transcript. </p> <p>To be fully GTF compliant all feature have a gene_id and a transcript_id attribute. The gene_id is unique identifier for the genomic source of the transcript, which is used to group transcripts into genes. The transcript_id   is a unique identifier for the predicted transcript, which is used to group features into transcripts.</p>"},{"location":"tools/agat_convert_sp_gff2gtf/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_convert_sp_gff2gtf.pl --gff infile.gtf [ -o outfile ]\nagat_convert_sp_gff2gtf -h\n</code></pre>"},{"location":"tools/agat_convert_sp_gff2gtf/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or --in</p> <p>Input GFF file that will be read</p> </li> <li> <p>--gtf_version     version of the GTF output (1,2,2.1,2.2,2.5,3 or relax). Default 3.</p> <p>relax: all feature types are accepted.</p> <p>3: GTF3 (9 feature types accepted): gene, transcript, exon, CDS, Selenocysteine, start_codon, stop_codon, three_prime_utr and five_prime_utr</p> <p>2.5: GTF2.5 (8 feature types accepted): gene, transcript, exon, CDS, UTR, start_codon, stop_codon, Selenocysteine</p> <p>2.2: GTF2.2 (9 feature types accepted): CDS, start_codon, stop_codon, 5UTR, 3UTR, inter, inter_CNS, intron_CNS and exon</p> <p>2.1: GTF2.1 (6 feature types accepted): CDS, start_codon, stop_codon, exon, 5UTR, 3UTR</p> <p>2: GTF2 (4 feature types accepted): CDS, start_codon, stop_codon, exon</p> <p>1: GTF1 (5 feature types accepted): CDS, start_codon, stop_codon, exon, intron</p> </li> <li> <p>-o, --output, --out or  --outfile</p> <p>Output GTF file. If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--verbose or -v</p> <p>Add verbosity</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_convert_sp_gff2tsv/","title":"agat_convert_sp_gff2tsv.pl","text":""},{"location":"tools/agat_convert_sp_gff2tsv/#description","title":"DESCRIPTION","text":"<p>The script aims to convert gtf/gff file into tabulated file. Attribute's tags from the 9th column become column titles.</p>"},{"location":"tools/agat_convert_sp_gff2tsv/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_convert_sp_gff2tsv.pl -gff file.gff [ -o outfile ]\nagat_convert_sp_gff2tsv.pl --help\n</code></pre>"},{"location":"tools/agat_convert_sp_gff2tsv/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_convert_sp_gff2zff/","title":"agat_convert_sp_gff2zff.pl","text":""},{"location":"tools/agat_convert_sp_gff2zff/#description","title":"DESCRIPTION","text":"<p>The script converts GTF/GFF file into zff file a format used by the ab initio tool SNAP. The script produces a .ann file containing the annotation and .dna file containing the fasta file. The .ann and .dna are identicaly sorted by sequence identifier (This is mandatory for usage with fathom).</p>"},{"location":"tools/agat_convert_sp_gff2zff/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_convert_sp_gff2zff.pl --gff file.gff  --fasta file.fasta [ -o outfile ]\nagat_convert_sp_gff2zff.pl --help\n</code></pre>"},{"location":"tools/agat_convert_sp_gff2zff/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff</p> <p>Input GTF/GFF file</p> </li> <li> <p>--fasta</p> <p>Input fasta file</p> </li> <li> <p>--outfile, --out, --output, or -o</p> <p>File prefix where will be written the results (e.g. outfile.ann and outfile.dna). If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_convert_sp_gxf2gxf/","title":"agat_convert_sp_gxf2gxf.pl","text":""},{"location":"tools/agat_convert_sp_gxf2gxf/#description","title":"DESCRIPTION","text":"<p>This script fixes and/or standardizes any GTF/GFF file into full sorted GTF/GFF file. It AGAT parser removes duplicate features, fixes duplicated IDs, adds missing ID and/or Parent attributes, deflates factorized attributes (attributes with several parents are duplicated with uniq ID), add missing features when possible (e.g. add exon if only CDS described, add UTR if CDS and exon described), fix feature locations (e.g. check exon is embedded in the parent features mRNA, gene), etc...</p> <p>All AGAT's scripts with the sp prefix use the AGAT parser, before to perform any supplementary task. So, it is not necessary to run this script prior the use of any other sp script.</p>"},{"location":"tools/agat_convert_sp_gxf2gxf/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_convert_sp_gxf2gxf.pl -g infile.gff [ -o outfile ]\nagat_convert_sp_gxf2gxf.pl --help\n</code></pre>"},{"location":"tools/agat_convert_sp_gxf2gxf/#options","title":"OPTIONS","text":"<ul> <li> <p>-g, --gff or -ref</p> <p>String - Input GTF/GFF file. Compressed file with .gz extension is accepted.</p> </li> <li> <p>-v</p> <p>Integer - Verbose option. To modify verbosity. Default is 1. 0 is quiet, 2 and 3 are increasing verbosity.</p> </li> <li> <p>-o or --output</p> <p>String - Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Boolean - Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_Prokka_inferNameFromAttributes/","title":"agat_sp_Prokka_inferNameFromAttributes.pl","text":""},{"location":"tools/agat_sp_Prokka_inferNameFromAttributes/#description","title":"DESCRIPTION","text":"<p>The script aims to fill a Name attribute based on &lt;gene&gt; attribute in a prokka gff annotation file. If no gene attribute is present it take if from the &lt;inference&gt; attribute.</p>"},{"location":"tools/agat_sp_Prokka_inferNameFromAttributes/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_Prokka_inferNameFromAttributes.pl -gff file.gff  [ -o outfile ]\nagat_sp_Prokka_inferNameFromAttributes.pl --help\n</code></pre>"},{"location":"tools/agat_sp_Prokka_inferNameFromAttributes/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--force</p> <p>If Name attribute already exists, they will be replaced if a new one is found</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_add_attribute_shortest_exon_size/","title":"agat_sp_add_attribute_shortest_exon_size.pl","text":""},{"location":"tools/agat_sp_add_attribute_shortest_exon_size/#description","title":"DESCRIPTION","text":"<p>The script add the attribute  to each gene and rna, which will hold the size of the shortest exon in bp."},{"location":"tools/agat_sp_add_attribute_shortest_exon_size/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_add_attribute_shortest_exon_size.pl --gff infile --out outfile\nagat_sp_add_attribute_shortest_exon_size.pl --help\n</code></pre>"},{"location":"tools/agat_sp_add_attribute_shortest_exon_size/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, -f or --ref </p> <p>STRING: Input GTF/GFF file.</p> </li> <li> <p>--out, --output or -o</p> <p>STRING: Output gff3 file where the result will be printed.</p> </li> <li> <p>-v</p> <p>BOLEAN: Verbose for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--verbose or -v</p> <p>Add verbosity</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_add_attribute_shortest_intron_size/","title":"agat_sp_add_attribute_shortest_intron_size.pl","text":""},{"location":"tools/agat_sp_add_attribute_shortest_intron_size/#description","title":"DESCRIPTION","text":"<p>The script add the attribute  to each gene and rna, which will hold the size of the shortest intron in bp."},{"location":"tools/agat_sp_add_attribute_shortest_intron_size/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_add_attribute_shortest_intron_size.pl --gff infile --out outfile\nagat_sp_add_attribute_shortest_intron_size.pl --help\n</code></pre>"},{"location":"tools/agat_sp_add_attribute_shortest_intron_size/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, -f, --ref or --reffile </p> <p>STRING: Input GTF/GFF file.</p> </li> <li> <p>--out, --output or -o</p> <p>STRING: Output gff3 file where the result will be printed.</p> </li> <li> <p>--verbose or -v</p> <p>BOLEAN: Verbose for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_add_intergenic_regions/","title":"agat_sp_add_intergenic_regions.pl","text":""},{"location":"tools/agat_sp_add_intergenic_regions/#description","title":"DESCRIPTION","text":"<p>The script aims to add intergenic features (intergenic_region) to gtf/gff file. The intergenic regions are deduced from gene features (feature type gene from the 3rd column).</p>"},{"location":"tools/agat_sp_add_intergenic_regions/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_add_intergenic_regions.pl --gff infile --out outFile\nagat_sp_add_intergenic_regions.pl --help\n</code></pre>"},{"location":"tools/agat_sp_add_intergenic_regions/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, -f or --ref</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--out, --output or -o</p> <p>Output file (default GFF3 - see config to modify output format).</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any,  otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives yo the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-v or --verbose</p> <p>Add verbosity</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_add_introns/","title":"agat_sp_add_introns.pl","text":""},{"location":"tools/agat_sp_add_introns/#description","title":"DESCRIPTION","text":"<p>The script aims to add intron features to gtf/gff file without intron features.</p>"},{"location":"tools/agat_sp_add_introns/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_add_introns.pl --gff infile --out outFile\nagat_sp_add_introns.pl --help\n</code></pre>"},{"location":"tools/agat_sp_add_introns/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, -f, --ref or -reffile</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--out, --output or -o</p> <p>Output GFF3 file.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_add_splice_sites/","title":"agat_sp_add_splice_sites.pl","text":""},{"location":"tools/agat_sp_add_splice_sites/#description","title":"DESCRIPTION","text":"<p>The script aims to add splice sites features (five_prime_cis_splice_site and three_prime_cis_splice_site) to gtf/gff file. The splice sites are deduced from CDS features.</p>"},{"location":"tools/agat_sp_add_splice_sites/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_add_splice_sites.pl --gff infile --out outFile\nagat_sp_add_splice_sites.pl --help\n</code></pre>"},{"location":"tools/agat_sp_add_splice_sites/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, -f, --ref or -reffile</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--out, --output or -o</p> <p>Output file (default GFF3 - see config to modify output format).</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any,  otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives yo the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_add_start_and_stop/","title":"agat_sp_add_start_and_stop.pl.pl","text":""},{"location":"tools/agat_sp_add_start_and_stop/#description","title":"DESCRIPTION","text":"<p>The script adds start and stop codons when a CDS feature exists. The script looks at the nucleotide sequence and checks the presence of start and stop codons. The script works even if the start or stop codon are split over several CDS features.</p>"},{"location":"tools/agat_sp_add_start_and_stop/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_add_start_and_stop.pl.pl --gff infile.gff --fasta genome.fa --out outfile.gff\nagat_sp_add_start_and_stop.pl.pl --help\n</code></pre>"},{"location":"tools/agat_sp_add_start_and_stop/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, -i or -g</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--fasta, --fa or -f</p> <p>Input fasta file. Needed to check that CDS sequences start by start codon and stop by stop codon.</p> </li> <li> <p>--ct, --codon or --table</p> <p>Codon table to use. [default 1]</p> </li> <li> <p>--out, --output or -o</p> <p>Output gff file updated</p> </li> <li> <p>-e or --extend</p> <p>Boolean - When no start/stop codon found, try to extend the CDS to meet the next start/stop codon in the sequence. </p> </li> <li> <p>--ni or --na</p> <p>Boolean - no iupac / no ambiguous, avoid usage of IUPAC. By default IUPAC is used that means, NNN is seen as start and/or stop codon.</p> </li> <li> <p>--verbose or -v</p> <p>Verbose for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_alignment_output_style/","title":"agat_sp_alignment_output_style.pl","text":""},{"location":"tools/agat_sp_alignment_output_style/#description","title":"DESCRIPTION","text":"<p>The script takes a normal gtf/gff annotation format file and convert it to gff3 alignment format. It means it add a structure of match / match_part as relationship between the different features.</p>"},{"location":"tools/agat_sp_alignment_output_style/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_alignment_output_style.pl -g infile.gff [ -o outfile ]\nagat_sp_alignment_output_style.pl --help\n</code></pre>"},{"location":"tools/agat_sp_alignment_output_style/#options","title":"OPTIONS","text":"<ul> <li> <p>-g, --gff or -ref</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-c or --ct</p> <p>When the gff file provided is not correcly formated and features are linked to each other by a comon tag (by default locus_tag), this tag can be provided to parse the file correctly.</p> </li> <li> <p>-v</p> <p>Verbose option to see the warning messages when parsing the gff file.</p> </li> <li> <p>-o or --output</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_clipN_seqExtremities_and_fixCoordinates/","title":"agat_sp_clipN_seqExtremities_and_fixCoordinates.pl","text":""},{"location":"tools/agat_sp_clipN_seqExtremities_and_fixCoordinates/#description","title":"DESCRIPTION","text":"<p>The script aims to clip the N's extremities of the sequences. The annotation from the sequence clipped are modified accrodingly to stay consistent</p>"},{"location":"tools/agat_sp_clipN_seqExtremities_and_fixCoordinates/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_clipN_seqExtremities_and_fixCoordinates.pl -g infile.gff -f infile.fasta  [ -o outfile ]\nagat_sp_clipN_seqExtremities_and_fixCoordinates.pl --help\n</code></pre>"},{"location":"tools/agat_sp_clipN_seqExtremities_and_fixCoordinates/#options","title":"OPTIONS","text":"<ul> <li> <p>-g, --gff or -ref</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-f, --fa or --fasta</p> <p>Input fasta file.</p> </li> <li> <p>--of</p> <p>Output fixed fasta file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>--og</p> <p>Output fixed GFF file.  If no output file is specified, the output will be written to STDOUT</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_compare_two_BUSCOs/","title":"agat_sp_compare_two_BUSCOs.pl","text":""},{"location":"tools/agat_sp_compare_two_BUSCOs/#description","title":"DESCRIPTION","text":"<p>The tool compares the results from two BUSCO runs (genome and proteome mode) in order to pinpoint the differences. It compares the BUSCOs classification (complete,fragmented, duplicated) of the 1st run (genome mode) against the classification found in the second run. It will report the results in txt files, and extracts the complete,fragmented and duplicated annotated BUSCOs from the 1st run in gff files. We add in the gff an attribute specifying the cases e.g. description=EOG090W00UK-complete2duplicated. Where EOG090W00UK is the BUSCO name/label/group investigated, and complete2duplicated the case we found (was complete in run1 and duplicated in run2). By loading these gff tracks in a web browser and helped by other tracks (e.g the genome annotation/prediction) can help to understand why the BUSCO have been classified differently from run1 to run2. In other term it allows to catch potential problems in an annotation. agat_sp_compare_two_BUSCOs.pl has been tested with results from BUSCO version 3 and 4. /! The tool expects a BUSCO run in genome mode as input folder 1 and a BUSCO run in proteins mode as input folder 2. You can also decide to provide twice (--f1 --f2) the same BUSCO run in genome mode, the tool will only extract the annotation of the complete,fragmented and duplicated annotated BUSCOs from the 1st run in gff.</p>"},{"location":"tools/agat_sp_compare_two_BUSCOs/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_compare_two_BUSCOs.pl --f1 &lt;input busco folder1&gt; --f2 &lt;input busco folder2&gt; [-o &lt;output folder&gt;]\nagat_sp_compare_two_BUSCOs.pl --help\n</code></pre>"},{"location":"tools/agat_sp_compare_two_BUSCOs/#options","title":"OPTIONS","text":"<ul> <li> <p>--f1</p> <p>STRING: Input busco folder1</p> </li> <li> <p>--f2</p> <p>STRING: Input busco folder2</p> </li> <li> <p>-v or --verbose</p> <p>Integer: For displaying extra information use -v 1.</p> </li> <li> <p>-o or --output</p> <p>STRING: Output folder.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_compare_two_annotations/","title":"agat_sp_compare_two_annotations.pl","text":""},{"location":"tools/agat_sp_compare_two_annotations/#description","title":"DESCRIPTION","text":"<p>The script aims to compare two annotation of the same assembly. It provided information about split/fusion of genes between the two annotations. The most common case are: 1 =&gt; 0 ( gene uniq to file1) 0 =&gt; 1 ( gene uniq to file2) 1 =&gt; 1 ( 1 gene from file 1 overlaps only 1 gene from file2) 1 =&gt; &lt;many&gt; ( 1 gene from file 1 overlaps &lt;many&gt; genes from file2) =&gt; split case (with file 1 as reference) &lt;many&gt; =&gt; 1 ( &lt;many&gt; genes from file 1 overlap only 1 gene from file2) =&gt; fusion case (with file 1 as reference)</p> <p>Then you can get more complex cases: &lt;many&gt; =&gt; &lt;many&gt;  (&lt;many&gt; genes from file 1 overlap &lt;many&gt; genes from file2)</p> <p>The script output a folder containing a report of number of different cases as well as a file per case type listing per line the gene feature's ID involved in each case.</p>"},{"location":"tools/agat_sp_compare_two_annotations/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_compare_two_annotations.pl --gff1 infile1.gff -gff2 infile2.gff [ -o outfile ]\nagat_sp_compare_two_annotations.pl --help\n</code></pre>"},{"location":"tools/agat_sp_compare_two_annotations/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff1</p> <p>Input GTF/GFF file1.</p> </li> <li> <p>--gff2</p> <p>Input GTF/GFF file2.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output folder.  It contains a report that resume the type and number of cases, as well as a file per case type  containing one case per line with the list of gene feature's ID (or other type of feature level1) from file1 then file2 separated by a |.</p> </li> <li> <p>-v</p> <p>Verbose option, make it easier to follow what is going on for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_complement_annotations/","title":"agat_sp_complement_annotations.pl","text":""},{"location":"tools/agat_sp_complement_annotations/#description","title":"DESCRIPTION","text":"<p>The script allows to complement a reference annotation with other annotations. A l1 feature from the addfile.gff that does not overlap a l1 feature from the reference annotation will be added. A l1 feature from the addfile.gff without a CDS that overlaps a l1 feature with a CDS from the reference annotation will be added. A l1 feature from the addfile.gff with a CDS that overlaps a l1 feature without a CDS from the reference annotation will be added. A l1 feature from the addfile.gff with a CDS that overlaps a l1 feature with a CDS from the reference annotation will be added only if the CDSs don't overlap. A l1 feature from the addfile.gff without a CDS that overlaps a l1 feature without a CDS from the reference annotation will be added only if none of the l3 features overlap. /! It is sufficiant that only one isoform is overlapping to prevent the whole gene (l1 feature) from the addfile.gff to be added in the output.</p>"},{"location":"tools/agat_sp_complement_annotations/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_complement_annotations.pl --ref annotation_ref.gff --add addfile1.gff --add addfile2.gff --out outFile\nagat_sp_complement_annotations.pl --help\n</code></pre>"},{"location":"tools/agat_sp_complement_annotations/#options","title":"OPTIONS","text":"<ul> <li> <p>--ref,  -r or -i</p> <p>Input GTF/GFF file used as reference.</p> </li> <li> <p>--add or -a</p> <p>Annotation(s) file you would like to use to complement the reference annotation. You can specify as much file you want like so: -a addfile1 -a addfile2 -a addfile3 /! The order you provide these files matter. Once the reference file has been complemented by file1, this new annotation becomes the new reference that will be complemented by file2 etc. /! The result with -a addfile1 -a addfile2 will differ to the result from -a addfile2 -a addfile1. So, be aware of what you want if you use several addfiles.</p> </li> <li> <p>--size_min or -s</p> <p>Option to keep the non-overlping gene only if the CDS size (in nucleotide) is over the minimum size defined. Default = 0 that means all of them are kept.</p> </li> <li> <p>--out, --output, --outfile or -o</p> <p>Output gff3 containing the reference annotation with all the non-overlapping newly added genes from addfiles.gff.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_ensembl_output_style/","title":"agat_sp_ensembl_output_style.pl","text":""},{"location":"tools/agat_sp_ensembl_output_style/#description","title":"DESCRIPTION","text":"<p>This script takes a normal gff3 annotation format file and convert it to gff3 like ensembl format.</p>"},{"location":"tools/agat_sp_ensembl_output_style/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_ensembl_output_style.pl -g infile.gff [ -o outfile ]\nagat_sp_ensembl_output_style.pl --help\n</code></pre>"},{"location":"tools/agat_sp_ensembl_output_style/#options","title":"OPTIONS","text":"<ul> <li> <p>-g, --gff or -ref</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-c or --ct</p> <p>When the gff file provided is not correcly formated and features are linked to each other by a comon tag (by default locus_tag), this tag can be provided to parse the input file correctly.</p> </li> <li> <p>-v</p> <p>Verbose option to see the warning messages when parsing the gff file.</p> </li> <li> <p>-o or --output</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_extract_attributes/","title":"agat_sp_extract_attributes.pl","text":""},{"location":"tools/agat_sp_extract_attributes/#description","title":"DESCRIPTION","text":"<p>The script takes a gtf/gff file as input. The script allows to extract choosen attributes of all or specific feature types. The 9th column of a gff/gtf file contains a list of attributes. An attribute (gff3) looks like that tag=value</p>"},{"location":"tools/agat_sp_extract_attributes/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_extract_attributes.pl -gff file.gff  -att locus_tag,product,name -p level2,cds,exon [ -o outfile ]\nagat_sp_extract_attributes.pl --help\n</code></pre>"},{"location":"tools/agat_sp_extract_attributes/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-p,  -t or  -l</p> <p>primary tag option, case insensitive, list. Allow to specied the feature types that will be handled. You can specified a specific feature by given its primary tag name (column 3) as: cds, Gene, MrNa You can specify directly all the feature of a particular level:       level2=mRNA,ncRNA,tRNA,etc       level3=CDS,exon,UTR,etc By default all feature are taking in account. fill the option by the value \"all\" will have the same behaviour.</p> </li> <li> <p>--attribute, --att, -a</p> <p>attribute tag. The value of the attribute tag specified will be extracted from the feature type specified by the option -p. List of attributes must be coma separated.</p> </li> <li> <p>--merge or -m</p> <p>By default the values of each attribute tag is writen in its dedicated file. To write the values of all tags in only one file use this option.</p> </li> <li> <p>-d</p> <p>By default when an attribute is not found for a feature, a dot (.) is reported. If you don't want anything to be printed in such case use this option.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_extract_sequences/","title":"agat_sp_extract_sequences.pl","text":""},{"location":"tools/agat_sp_extract_sequences/#briefly-in-pictures","title":"Briefly in pictures","text":""},{"location":"tools/agat_sp_extract_sequences/#description","title":"DESCRIPTION","text":"<p>This script extracts sequences in fasta format according to features described in a gff file. You can extract the fasta of any type of feature. The feature type is defined within the 3rd column in the gff file. The result is written to the specified output file, or to STDOUT.</p> <p>Features spanning several locations (e.g. UTR, CDS), are extracted chunk by chunk and merged to create the biological feature. If you wish to extract each chunck independently, please refer to the --split parameter. To see the list of features that may span over several locations within AGAT run: agat_convert_sp_gxf2gxf.pl --expose and then look at the file called features_spread.json.</p> <p>The headers are formated like that:</p> <p>ID gene=gene_ID name=NAME seq_id=Chromosome_ID type=cds 5'extra=VALUE</p> <p>The ID is the identifier of the feature (ID attribute in the 9th column. If missing it is created by AGAT) The gene value will be the ID of the level1 feature (the top feature of the record) The name value is optional and will be written only if the Name attribute exists in the gff. The seq_id value is the value from 1st column within the gff. The type value holds the information of the feature type extracted. 5'extra or 3'extra is optional, it holds the information of extra nucleotides removed or added when using the downstream and/or upstream parameter.</p> <p>The OFS of all values can be modified excepted for the ID (see --ofs parameter). In such case the tool gives a warning.</p> <p>Some examples: To extract the coding regions: <pre><code>agat_sp_extract_sequences.pl -g infile.gff -f infile.fasta\n# or\nagat_sp_extract_sequences.pl -g infile.gff -f infile.fasta -t cds\n</code></pre> To extract and translate the coding regions: <pre><code>agat_sp_extract_sequences.pl -g infile.gff -f infile.fasta -p\n# or\nagat_sp_extract_sequences.pl -g infile.gff -f infile.fasta -t cds -p\n</code></pre> To extract the mRNA (biological definition UTR+CDS): <pre><code>agat_sp_extract_sequences.pl -g infile.gff -f infile.fasta -t exon --merge\n</code></pre> To extract each cds chunk independently: <pre><code>agat_sp_extract_sequences.pl -g infile.gff -f infile.fasta -t cds --split\n</code></pre> To extract 5'UTR with introns: <pre><code>agat_sp_extract_sequences.pl -g infile.gff -f infile.fasta -t \"5'UTR\" --full\n</code></pre> To extract 100nt upstream region of a gene: <pre><code>agat_sp_extract_sequences.pl -g infile.gff -f infile.fasta -t gene --upstream 100\n</code></pre> General usage: <pre><code>agat_sp_extract_sequences.pl -g infile.gff -f infile.fasta  [ -o outfile ]\nagat_sp_extract_sequences.pl --help\n</code></pre></p>"},{"location":"tools/agat_sp_extract_sequences/#options","title":"OPTIONS","text":"<ul> <li> <p>--alternative_start_codon or --asc</p> <p>Bolean - When activated it can affect the translation of the start codon. Indeed alternative start codons exist, and are translated by the cells'machinery by a Methionine (M). By default AGAT translates the first codon as other codons by the corresponding AA. If you wish to translate the first codon by a M when it is a valid alternative start codon, activate this parameter. If the sequence you try to translate is a CDS (or starting by a CDS), the phase is checked and the alternative start codon is accepted only if the phase is 0.</p> </li> <li> <p>--cdna</p> <p>Boolean - This extract the cdna sequence (i.e reverse complement of the mRNA: transcribed sequence (devoid of introns, but containing untranslated exons, then reverse complemented). It corresponds to extract the exons sequences, merge them, and reverse complement the sequence (--type exon --merge --revcomp).</p> </li> <li> <p>--clean_final_stop or --cfs</p> <p>Boolean - The Clean Final Stop option allows removing the translation of the final stop codons that is represented by the &lt;*&gt; character. This character can be disturbing for many programs (e.g interproscan)</p> </li> <li> <p>--clean_internal_stop or --cis</p> <p>Boolean - The Clean Internal Stop option allows replacing the translation of the stop codons present among the sequence that is represented by the &lt;&gt; character by . Indeed the &lt;&gt; character can be disturbing for many programs (e.g interproscan) <li> <p>--codon, --table or --ct</p> <p>Integer - Allow to choose the codon table for the translation. [default 1]</p> </li> <li> <p>--do, -3, --three, -down or -downstream</p> <p>Integer - It will take that number of nucleotide in more at the 3' extremity. /! You must activate the option \"--full\" if you with to extract only the most downstream part of certain feature (exon,cds,utr) otherwise you will extract each downstream parts of the subfeatures (e.g many cds parts may be needed to shape a cds in its whole).</p> </li> <li> <p>--eo</p> <p>Boolean - Called 'extremity only', this option will extract only the adjacent parts of a feature. This option has to be activated with -u and/or -p option. /! using -u and -p together builds a chimeric sequence which will be the concatenation of the left and right extremities of a feature.</p> </li> <li> <p>-f, --fa or --fasta</p> <p>String - Input fasta file.</p> </li> <li> <p>--full</p> <p>Boolean - This option allows dealing with feature that may span over several locations like cds or exon, in order to extract the full sequence from the start extremity of the first chunck to the end extremity of the last chunk. The use of that option with '--type exon' will extract the pre-mRNA sequence (i.e with introns). Use of that option on cds will give the pre-mRNA without the untraslated regions (UTRs). (To extract an mRNA as it is defined biologicaly you need to use the <code>-t exon</code> option with the --merge option)</p> </li> <li> <p>-g, --gff or -ref</p> <p>String - Input GTF/GFF file.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Boolean - Display this helpful text.</p> </li> <li> <p>--keep_attributes</p> <p>Boolean - The value of the attribute tags will be extracted from the feature type specified by the option --type and stored in the fasta header.</p> </li> <li> <p>--keep_parent_attributes</p> <p>Boolean - The value of the attribute tags will be extracted from the feature type specified by the option --type along with those from parent features and stored in the fasta header.</p> </li> <li> <p>--merge</p> <p>Boolean - By default, only features that span several locations (e.g. cds and utr can span over several exons) are merged together. In order to merge other type of features (e.g. exon) you must activate this parameter.</p> </li> <li> <p>--mrna</p> <p>Boolean - This extract the mrna sequence (i.e transcribed sequence (devoid of introns, but containing untranslated exons)). It corresponds to extract the exon sequences and merge them (--type exon --merge).</p> </li> <li> <p>--ofs</p> <p>String - Output Fields Separator for the description field of the header of the created fasta sequences. By default it's a space &lt; &gt; but can be modified by any String or character using this option.</p> </li> <li> <p>-o or --output</p> <p>String - Output fasta file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>--plus_strand_only</p> <p>Boolean - By default the extrated feature sequences from a minus strand is reverse complemented. Activating this option you will always get sequence from plus strand ( not reverse complemented). You can get the opposite (minus strand only) by using --plus_strand_only --revcomp</p> </li> <li> <p>-p, --protein or --aa</p> <p>Boolean - Will translate the extracted sequence in Amino acid. By default the codon table used is the 1 (Standard). See --table parameter for more options.</p> </li> <li> <p>--remove_orf_offset or --roo</p> <p>Boolean - CDS can start with a phase different from 0 when a gene model is fragmented. When asking for protein translation this (start) offset is trimmed out automatically. But when you extract CDS dna sequences, this  (start) offset is not removed by default. To remove it activate this option. If --up or --do option are used too, the (start) offset is trimmed first, then is added the piece of sequence asked for.</p> </li> <li> <p>--revcomp</p> <p>Boolean - To reverse complement the extracted sequence [default - False]. By default the extrated feature sequences from a minus strand is reverse complemented. Consequently, for minus strand features that option will extract the sequences from plus strand from left to right.</p> </li> <li> <p>--split</p> <p>Boolean -  By default, all features that span several locations (e.g. cds and utr can span over several exons) are merge together to shape the biological feature (e.g. several cds chuncks are merged to create the CDS  in its whole). If you wish to extract all the chuncks independently activate this option.</p> </li> <li> <p>-t or --type</p> <p>String - Define the feature you want to extract the sequence from. Default 'cds'. Most common choice are: gene,mrna,exon,cds,trna,three_prime_utr,five_prime_utr. When you choose exon (or cds,utr,etc.), all the exons of a same parent feature are attached together before to extract the sequence. If you wish to extract each exon of an mRNA independently, see option --split. /! <code>-t mRNA</code> will extract the features labeled as \"mRNA\" and corresponds to the cdna because it contains the introns if any. It does not actually extract the mRNAs as it is defined biologicaly. To extract the mRNA as defined biologicaly you must use <code>-t exon</code>. Not a real cdna because it is not reversed</p> </li> <li> <p>--up, -5, --five or -upstream</p> <p>Integer - It will take that number of nucleotide in more at the 5' extremity. /! You must activate the option \"--full\" if you wish to extract only the most upstream part of certain features (exon,cds,utr) otherwise you will extract each upstream parts of the subfeatures (e.g many cds parts may be needed to shape a cds in its whole).</p> </li>"},{"location":"tools/agat_sp_filter_by_ORF_size/","title":"agat_sp_filter_by_ORF_size.pl","text":""},{"location":"tools/agat_sp_filter_by_ORF_size/#description","title":"DESCRIPTION","text":"<p>The script reads a gff annotation file, and create two output files, one contains the gene models with ORF passing the test, the other contains the rest. By default the test is \"&gt; 100\" that means all gene models that have ORF longer than 100 Amino acids, will pass the test. In the case of isoforms, the isoforms that do not pass the test are removed (If all isoforms are removed, the gene is removed). A gene with with any transcript having any CDS will be considered as non coding gene and will not be removed.</p>"},{"location":"tools/agat_sp_filter_by_ORF_size/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_filter_by_ORF_size.pl --gff infile.gff [ -o outfile ]\nagat_sp_filter_by_ORF_size.pl -h\n</code></pre>"},{"location":"tools/agat_sp_filter_by_ORF_size/#options","title":"OPTIONS","text":"<ul> <li> <p>-g or --gff</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-s or --size</p> <p>ORF size to apply the test. Default 100.</p> </li> <li> <p>-t or --test</p> <p>Test to apply (&gt; &lt; = &gt;= &lt;=). If you us one of these two character &gt;, &lt;, please don't forget to quote you parameter like that \"&lt;=\" otherwise your terminal will complain. By default it will be \"&gt;\"</p> </li> <li> <p>-v</p> <p>Verbose. Useful for debugging purpose. Bolean</p> </li> <li> <p>-o or --out or --output or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_filter_by_locus_distance/","title":"agat_sp_filter_by_locus_distance.pl","text":""},{"location":"tools/agat_sp_filter_by_locus_distance/#description","title":"DESCRIPTION","text":"<p>The script aims to remove or flag loci that are too close to each other. Close loci are important to remove when training abinitio tools in order to train intergenic region properly. Indeed if intergenic region (surrouneded part of a locus) contain part of another locus, the training on intergenic part will be biased.</p>"},{"location":"tools/agat_sp_filter_by_locus_distance/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_filter_by_locus_distance.pl -gff infile.gff [ -o outfile ]\nagat_sp_filter_by_locus_distance.pl --help\n</code></pre>"},{"location":"tools/agat_sp_filter_by_locus_distance/#options","title":"OPTIONS","text":"<ul> <li> <p>-gff</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--dist or -d</p> <p>The minimum inter-loci distance to allow.  No default (will not apply filter by default).</p> </li> <li> <p>--af or --add_flag</p> <p>Instead of filter the result into two output files, write only one and add the flag &lt;low_dist&gt; in the gff.(tag = Lvalue or tag = Rvalue  where L is left and R right and the value is the distance with accordingle the left or right locus)</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>Verbose option, make it easier to follow what is going on for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_filter_by_mrnaBlastValue/","title":"agat_sp_filter_by_mrnaBlastValue.pl","text":""},{"location":"tools/agat_sp_filter_by_mrnaBlastValue/#description","title":"DESCRIPTION","text":"<p>The script aims to remove from a gff file all the sequence that have a similarity over THRESHOLD with another sequence (will keep only one). This is typically useful when creating a list of mRNA to use to train abinitio gene finder. A reciprocal blast of the sequences need to have been performed prior to the use of this script in order to get the blastp input file.</p>"},{"location":"tools/agat_sp_filter_by_mrnaBlastValue/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_filter_by_mrnaBlastValue.pl --gff infile.gff --blast blastfile --outfile outFile\nagat_sp_filter_by_mrnaBlastValue.pl --help\n</code></pre>"},{"location":"tools/agat_sp_filter_by_mrnaBlastValue/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--blast</p> <p>The list of the all-vs-all blast file (outfmt 6, blastp)</p> </li> <li> <p>--outfile</p> <p>The name of the output file. By default the output is the standard output.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_filter_feature_by_attribute_presence/","title":"agat_spfilter_feature_by_attribute_presence.pl","text":""},{"location":"tools/agat_sp_filter_feature_by_attribute_presence/#description","title":"DESCRIPTION","text":"<p>The script aims to filter features according to attribute presence (9th column). If the attribute exists, the feature is discarded. Attribute are stored in the 9th column and have this shape: tag=value /! Removing a level1 or level2 feature will automatically remove all linked subfeatures, and removing all children of a feature will automatically remove this feature too.</p>"},{"location":"tools/agat_sp_filter_feature_by_attribute_presence/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_filter_feature_by_attribute_presence.pl --gff infile.gff -a &lt;tag&gt; [ --output outfile ]\nagat_sp_filter_feature_by_attribute_presence.pl --help\n</code></pre>"},{"location":"tools/agat_sp_filter_feature_by_attribute_presence/#options","title":"OPTIONS","text":"<ul> <li> <p>-f, --reffile, --gff  or -ref</p> <p>Input GFF3 file that will be read</p> </li> <li> <p>-p,  --type or  -l</p> <p>primary tag option, case insensitive, list. Allow to specied the feature types that will be handled. You can specified a specific feature by given its primary tag name (column 3) as: cds, Gene, MrNa You can specify directly all the feature of a particular level:       level2=mRNA,ncRNA,tRNA,etc       level3=CDS,exon,UTR,etc By default all feature are taking into account. fill the option by the value \"all\" will have the same behaviour.</p> </li> <li> <p>--attribute, --att, -a</p> <p>String - Attributes tag specified will be used to filter the feature type (feature type can also be specified by the option -p). List of attribute tags must be coma separated.</p> </li> <li> <p>--flip</p> <p>BOLEAN - In order to flip the test and keep features that do have the attribute and filter those without</p> </li> <li> <p>-o or --output</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_filter_feature_by_attribute_value/","title":"agat_sp_filter_feature_by_attribute_value.pl","text":""},{"location":"tools/agat_sp_filter_feature_by_attribute_value/#description","title":"DESCRIPTION","text":"<p>The script aims to filter features according to attribute value (9th column). - If the attribute exists and the value do not pass the test, the feature is written into . - If the attribute exists and the value pass the test, the feature is discarded and written into _discarded.gff. - If the attribute tag is missing (test cannot be applyed), the feature will be written into  by default. If --na_aside parameter is activated then it will be written into _na.gff.   <p>Attribute are stored in the 9th column and have this shape: tag=value. /! Removing a level1 or level2 feature will automatically remove all linked subfeatures. /! Removing all children of a feature will automatically remove this feature too (excepted if --keep_parental is activated). /! If --keep_parental is not activated and --na_aside is activated, and all level3 features of a record are split between both _na.gff and _discarded.gff, then the parental level1 and level2 features are removed and will end up in the _na.gff file only."},{"location":"tools/agat_sp_filter_feature_by_attribute_value/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_filter_feature_by_attribute_value.pl --gff infile.gff --value 1 -t \"=\" [ --output outfile ]\nagat_sp_filter_feature_by_attribute_value.pl --help\n</code></pre>"},{"location":"tools/agat_sp_filter_feature_by_attribute_value/#options","title":"OPTIONS","text":"<ul> <li> <p>-f, --reffile, --gff  or -ref</p> <p>Input GFF3 file that will be read</p> </li> <li> <p>-a or --attribute</p> <p>Attribute tag to specify the attribute to analyse (attribute example: tag=value).</p> </li> <li> <p>-p,  --type or  -l</p> <p>primary tag option, case insensitive, list. Allow to specied the feature types that will be handled. You can specified a specific feature by given its primary tag name (column 3) as: cds, Gene, MrNa You can specify directly all the feature of a particular level:       level2=mRNA,ncRNA,tRNA,etc       level3=CDS,exon,UTR,etc By default all feature are taking into account. fill the option by the value \"all\" will have the same behaviour.</p> </li> <li> <p>--value</p> <p>Value(s) to check in the attribute. Case sensitive. List of values must be coma separated. </p> </li> <li> <p>--value_insensitive</p> <p>Bolean. Deactivated by default. When activated the values provided by the --value parameter are handled case insensitive.</p> </li> <li> <p>&lt;--na_aside</p> <p>Bolean. Deactivated by default. By default if the attribute tag on which the filter is based is missing, the feature will be written into . When activated, such features will be written into a separate file called _na.gff. <li> <p>&lt;--keep_parental&gt;</p> <p>Bolean. Deactivated by default. When activated even if all child features have been removed, the parental one will be kept.</p> </li> <li> <p>-t or --test</p> <p>Test to apply (&gt; &lt; = ! &gt;= &lt;=). default value \"=\".  If you use one of these two character &gt;, &lt;, please don't forget to quote the parameter like that \"&lt;=\" otherwise your terminal will complain. Only = and ! tests can be used to compare string values.</p> </li> <li> <p>-o or --output</p> <p>Output GFF file. If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>Verbose option for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li>"},{"location":"tools/agat_sp_filter_feature_from_keep_list/","title":"agat_sp_filter_feature_from_keep_list.pl","text":""},{"location":"tools/agat_sp_filter_feature_from_keep_list/#description","title":"DESCRIPTION","text":"<p>The script aims to keep records based on a keeplist. The default behaviour is to look at the features's ID. If the feature has an ID (case insensitive) listed among the keeplist it will be kept along with all related features (the whole record is kept. A record repsent all features linked  by relationship e.g. gene+transcript+exon+cds of a same locus).</p>"},{"location":"tools/agat_sp_filter_feature_from_keep_list/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_filter_feature_from_keep_list.pl --gff infile.gff --keep_list file.txt  [ --output outfile ]\nagat_sp_filter_feature_from_keep_list.pl --help\n</code></pre>"},{"location":"tools/agat_sp_filter_feature_from_keep_list/#options","title":"OPTIONS","text":"<ul> <li> <p>-f, --reffile, --gff  or -ref</p> <p>Input GFF3 file that will be read</p> </li> <li> <p>-p,  --type or  -l</p> <p>primary tag option, case insensitive, list. Allow to specied the feature types that will be handled. You can specified a specific feature by given its primary tag name (column 3) as: cds, Gene, MrNa You can specify directly all the feature of a particular level:       level2=mRNA,ncRNA,tRNA,etc       level3=CDS,exon,UTR,etc By default all feature are taking into account. fill the option by the value \"all\" will have the same behaviour.</p> </li> <li> <p>--kl or --keep_list</p> <p>Keep list. One value per line.</p> </li> <li> <p>-a or --attribute</p> <p>Attribute tag to specify the attribute to analyse. Case sensitive. Default: ID</p> </li> <li> <p>-o or --output</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>Verbose option for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_filter_feature_from_kill_list/","title":"agat_sp_filter_feature_from_kill_list.pl","text":""},{"location":"tools/agat_sp_filter_feature_from_kill_list/#description","title":"DESCRIPTION","text":"<p>The script aims to remove features based on a kill list. The default behaviour is to look at the features's ID. If the feature has an ID (case insensitive) listed among the kill list it will be removed. /! Removing a level1 or level2 feature will automatically remove all linked subfeatures, and removing all children of a feature will automatically remove this feature too.</p>"},{"location":"tools/agat_sp_filter_feature_from_kill_list/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_filter_feature_from_kill_list.pl --gff infile.gff --kill_list file.txt  [ --output outfile ]\nagat_sp_filter_feature_from_kill_list.pl --help\n</code></pre>"},{"location":"tools/agat_sp_filter_feature_from_kill_list/#options","title":"OPTIONS","text":"<ul> <li> <p>-f, --reffile, --gff  or -ref</p> <p>Input GFF3 file that will be read</p> </li> <li> <p>-p,  --type or  -l</p> <p>primary tag option, case insensitive, list. Allow to specied the feature types that will be handled. You can specified a specific feature by given its primary tag name (column 3) as: cds, Gene, MrNa You can specify directly all the feature of a particular level:       level2=mRNA,ncRNA,tRNA,etc       level3=CDS,exon,UTR,etc By default all feature are taking into account. fill the option by the value \"all\" will have the same behaviour.</p> </li> <li> <p>--kl or --kill_list</p> <p>Kill list. One value per line.</p> </li> <li> <p>-a or --attribute</p> <p>Attribute tag to specify the attribute to analyse. Case sensitive. Default: ID</p> </li> <li> <p>-o or --output</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>Verbose option for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_filter_gene_by_intron_numbers/","title":"agat_sp_filter_gene_by_intron_numbers.pl","text":""},{"location":"tools/agat_sp_filter_gene_by_intron_numbers/#description","title":"DESCRIPTION","text":"<p>The script aims to filter genes by intron numbers. It will create two files. one with the genes passing the intron number filter, the other one with the remaining genes.</p> <p>Some examples: Select intronless genes: agat_sp_filter_gene_by_intron_numbers.pl --gff infile.gff -o result.gff Select genes with more or equal 10 introns: agat_sp_filter_gene_by_intron_numbers.pl --gff infile.gff --test \"&gt;=\" --nb 10 [ --output outfile ]</p>"},{"location":"tools/agat_sp_filter_gene_by_intron_numbers/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_filter_gene_by_intron_numbers.pl --gff infile.gff --test \"&gt;=\" --nb 10 [ --output outfile ]\nagat_sp_filter_gene_by_intron_numbers.pl --help\n</code></pre>"},{"location":"tools/agat_sp_filter_gene_by_intron_numbers/#options","title":"OPTIONS","text":"<ul> <li> <p>-f, --reffile, --gff  or -ref</p> <p>Input GFF3 file that will be read</p> </li> <li> <p>-n,  --nb or --number</p> <p>Integer - Number of introns [Default 0]</p> </li> <li> <p>-t or --test Test to apply (&gt;, &lt;, =, &gt;= or &lt;=). If you use one of these two characters &gt;, &lt;, please do not forget to quote your parameter like that \"&lt;=\". Else your terminal will complain. [Default \"=\"]</p> </li> <li> <p>-o or --output</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>Verbose option for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_filter_gene_by_length/","title":"agat_sp_filter_gene_by_length.pl","text":""},{"location":"tools/agat_sp_filter_gene_by_length/#description","title":"DESCRIPTION","text":"<p>The script aims to filter level1 feature (e.g. gene, match, etc) by length. It will create two files. one with the feature passing the length filter, the other one with the remaining features. If the level1 feature has exon features, the size is computed by concatenating the exon together. If the level1 feature has several level2 features (e.g. mRNA) we apply the test on the longest one (the longest concatenated exon set).</p> <p>Some examples: Select L1 feature shorter than 1000bp: agat_sp_filter_gene_by_length.pl --gff infile.gff  --size 1000 --test \"&lt;\" -o result.gff Select genes longer than 200bp: agat_sp_filter_gene_by_length.pl --gff infile.gff --size 200 --test \"&gt;\" -o result.gff</p>"},{"location":"tools/agat_sp_filter_gene_by_length/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_filter_gene_by_length.pl --gff infile.gff --test \"&gt;=\" --nb 10 [ --output outfile ]\nagat_sp_filter_gene_by_length.pl --help\n</code></pre>"},{"location":"tools/agat_sp_filter_gene_by_length/#options","title":"OPTIONS","text":"<ul> <li> <p>-f, --reffile, --gff  or -ref</p> <p>Input GFF3 file that will be read</p> </li> <li> <p>-s or --size</p> <p>Integer - Gene size in pb [Default 100]</p> </li> <li> <p>-t or --test</p> <p>Test to apply (&gt;, &lt;, =, &gt;= or &lt;=). If you use one of these two characters &gt;, &lt;, please do not forget to quote your parameter like that \"&lt;=\". Else your terminal will complain. [Default \"=\"]</p> </li> <li> <p>-o or --output</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>Verbose option for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_filter_incomplete_gene_coding_models/","title":"agat_sp_filter_incomplete_gene_coding_models.pl","text":""},{"location":"tools/agat_sp_filter_incomplete_gene_coding_models/#description","title":"DESCRIPTION","text":"<p>The script aims to remove incomplete gene models. An incomplete gene coding model is a gene coding with start and/or stop codon missing in its cds. You can modify the behavior using the skip_start_check or skip_stop_check options.</p>"},{"location":"tools/agat_sp_filter_incomplete_gene_coding_models/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_filter_incomplete_gene_coding_models.pl --gff infile.gff --fasta genome.fa [ -o outfile ]\nagat_sp_filter_incomplete_gene_coding_models.pl --help\n</code></pre>"},{"location":"tools/agat_sp_filter_incomplete_gene_coding_models/#options","title":"OPTIONS","text":"<ul> <li> <p>-gff</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-fa or --fasta</p> <p>Genome fasta file. The name of the fasta file containing the genome to work with.</p> </li> <li> <p>--ct or --table or --codon</p> <p>This option allows specifying the codon table to use. It expects an integer [default 1]</p> </li> <li> <p>--af or --add_flag</p> <p>Instead of filter the result into two output files, write only one and add the flag &lt;incomplete&gt; in the gff.(tag = inclomplete, value = 1, 2, 3.  1=start missing; 2=stop missing; 3=both)</p> </li> <li> <p>--skip_start_check or --sstartc</p> <p>Gene model must have a start codon. Activated by default.</p> </li> <li> <p>--skip_stop_check or --sstopc</p> <p>Gene model must have a stop codon. Activated by default.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>Verbose option, make it easier to follow what is going on for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_filter_record_by_coordinates/","title":"agat_sp_filter_record_by_coordinates.pl","text":""},{"location":"tools/agat_sp_filter_record_by_coordinates/#description","title":"DESCRIPTION","text":"<p>The script aims to filter the records to keep only those contained within coordinates defined in an input csv file. A record can be a feature or a set of features with part-of relationships. By default we keep records overlapping the coordinates. The --exclude parameter allows to keep only record fully contained within the coordinates.</p> <p>! With default paramater, an exon out of the coordinates can be kept if the gene it is part of is overlaping the coordinates.</p>"},{"location":"tools/agat_sp_filter_record_by_coordinates/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_filter_record_by_coordinates.pl --gff infile.gff --tsv coordinates.tsv [ --output outfile ]\nagat_sp_filter_record_by_coordinates.pl --help\n</code></pre>"},{"location":"tools/agat_sp_filter_record_by_coordinates/#options","title":"OPTIONS","text":"<ul> <li> <p>-i, --input, --gtf  or --gff</p> <p>Input GTF/GFF file</p> </li> <li> <p>--coordinates, --tsv, -r or --ranges</p> <p>String - tsv file containing the coordinates. Coordinates must be one per line. Each line must contain 3 fields separated by a tabulation. Field1 is the sequence id Field2 is the start coordinate (included) Field3 is the end coordinate (included)</p> </li> <li> <p>-e or --exclude</p> <p>Select only the features fully containined within the coordinates, exclude the overlapping ones.</p> </li> <li> <p>-o or --output</p> <p>Output folder.</p> </li> <li> <p>-v or --verbose</p> <p>Verbosity.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_fix_cds_phases/","title":"agat_sp_fix_cds_phases.pl","text":""},{"location":"tools/agat_sp_fix_cds_phases/#description","title":"DESCRIPTION","text":"<p>This script aims to fix the CDS phases. The script is compatible with incomplete gene models (Missing start, CDS multiple of 3 or not, i.e. with offset of 1 or 2) and + and - strand.</p> <p>How this script works? AGAT uses the fasta sequence to verify the CDS frame. In case the CDS start by a start codon the phase of the first CDS piece is set to 0. In the case there is no start codon and:    - If there is only one stop codon in the sequence and it is located at the last position, the phase of the first CDS piece is set to 0.   - If there is no stop codon, the phase of the first CDS piece is set to 0 (because sequence can be translated without premature stop codon).   - If there is/are stop codon(s) in the middle of the sequence we re-execute the check with an offset of +2 nucleotides:     - If there is only one stop codon in the sequence and it is located at the last position, the phase of the first CDS piece is set to 0.     - If there is no stop codon, the phase of the first CDS piece is set to 0 (because sequence can be translated without premature stop codon).     - If there is/are stop codon(s) in the middle of the sequence we re-execute the check with an offset of +1 nucleotide:         - If there is only one stop codon in the sequence and it is located at the last position, the phase of the first CDS piece is set to 0.         - If there is no stop codon, the phase of the first CDS piece is set to 0 (because sequence can be translated without premature stop codon).         - If there is/are still stop codon(s) we keep original phase and throw a warning. In this last case it means we never succeded to make a translation without premature stop codon in all the 3 possible phases. Then in case of CDS made of multiple CDS pieces (i.e. discontinuous feature), the rest of the CDS pieces will be checked accordingly to the first CDS piece.</p> <p>What is a phase? For features of type \"CDS\", the phase indicates where the next codon begins relative to the 5' end (where the 5' end of the CDS is relative to the strand of the CDS feature) of the current CDS feature. For clarification the 5' end for CDS features on the plus strand is the feature's start and and the 5' end for CDS features on the minus strand is the feature's end. The phase is one of the integers 0, 1, or 2, indicating the number of bases forward from the start of the current CDS feature the next codon begins. A phase of \"0\" indicates that a codon begins on the first nucleotide of the CDS feature (i.e. 0 bases forward), a phase of \"1\" indicates that the codon begins at the second nucleotide of this CDS feature and a phase of \"2\" indicates that the codon begins at the third nucleotide of this region. Note that \u2018Phase\u2019 in the context of a GFF3 CDS feature should not be confused with the similar concept of frame that is also a common concept in bioinformatics. Frame is generally calculated as a value for a given base relative to the start of the complete open reading frame (ORF) or the codon (e.g. modulo 3) while CDS phase describes the start of the next codon relative to a given CDS feature. The phase is REQUIRED for all CDS features.</p>"},{"location":"tools/agat_sp_fix_cds_phases/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_fix_cds_phases.pl --gff infile.gff -f fasta [ -o outfile ]\nagat_sp_fix_cds_phases.pl --help\n</code></pre>"},{"location":"tools/agat_sp_fix_cds_phases/#options","title":"OPTIONS","text":"<ul> <li> <p>-g, --gff or -ref</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-f, --fa or --fasta</p> <p>Input fasta file.</p> </li> <li> <p>-v or --verbose</p> <p>Add verbosity.</p> </li> <li> <p>-o or --output</p> <p>Output GFF file. If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_fix_features_locations_duplicated/","title":"agat_sp_fix_features_locations_duplicated.pl","text":""},{"location":"tools/agat_sp_fix_features_locations_duplicated/#description","title":"DESCRIPTION","text":"<p>The script aims to modify/remove feature with duplicated locations. Even if it not an error by itself in a gtf/gff file, it becomes problematic when submitting the file to ENA (after convertion). To modify locations, AGAT modify the UTRs (when available) by shortening them by 1 bp (and consequently the Parent features and the exons accordingly)</p> <ul> <li>Case1: When isoforms have identical exon structures, AGAT removes duplicates by keeping the one with longest CDS;</li> <li>Case2: When l2 (e.g. mRNA) from different gene identifier have identical exon but no CDS at all, AGAT removes one duplicate);</li> <li>Case3: When l2 (e.g. mRNA) from different gene identifier have identical exon and CDS structures, AGAT removes duplicates by keeping the one with longest CDS);</li> <li>Case4: When l2 (e.g. mRNA) from different gene identifier have identical exon structures and different CDS structures, AGAT reshapes UTRs to modify mRNA and gene locations);</li> <li>Case5: When l2 (e.g. mRNA) from different gene identifier overlap but have different exon structure. In that case AGAT modified the gene locations by clipping UTRs;</li> </ul>"},{"location":"tools/agat_sp_fix_features_locations_duplicated/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_fix_features_locations_duplicated.pl --gff infile  [-o outfile]\nagat_sp_fix_features_locations_duplicated.pl --help\n</code></pre>"},{"location":"tools/agat_sp_fix_features_locations_duplicated/#options","title":"OPTIONS","text":"<ul> <li> <p>-f, --file, --gff3 or --gff</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-m or --model</p> <p>To select cases you want to fix. By default all are used. To select specific cases write e.g. --model 1,4,5</p> <p>Case1: When isoforms have identical exon structures AGAT removes duplicates by keeping the one with longest CDS; Case2: When l2 (e.g. mRNA) from different gene identifier have identical exon but no CDS at all (AGAT removes one duplicate); Case3: When l2 (e.g. mRNA) from different gene identifier have identical exon and CDS structures (AGAT removes duplicates by keeping the one with longest CDS); Case4: When l2 (e.g. mRNA) from different gene identifier have identical exon structures and different CDS structures (AGAT reshapes UTRs to modify mRNA and gene locations); Case5: When l2 (e.g. mRNA) from different gene identifier overlap but have different exon structure. In that case AGAT modified the gene locations by clipping UTRs;</p> </li> <li> <p>-v or verbose</p> <p>Add verbosity.</p> </li> <li> <p>-o, --out, --output or --outfile</p> <p>Output file. If none given, will be display in standard output.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_fix_fusion/","title":"agat_sp_fix_fusion.pl","text":""},{"location":"tools/agat_sp_fix_fusion/#description","title":"DESCRIPTION","text":"<p>The script looks for other ORF in UTRs (UTR3 and UTR5) of each gene model described in the gff file. Several ouput files will be written if you specify an output. One will contain the gene not modified (intact), one the gene models fixed.</p>"},{"location":"tools/agat_sp_fix_fusion/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_fix_fusion.pl --gff infile.gff --fasta genome.fa [ -o outfile ]\nagat_sp_fix_fusion.pl --help\n</code></pre>"},{"location":"tools/agat_sp_fix_fusion/#options","title":"OPTIONS","text":"<ul> <li> <p>-gff</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-fa or --fasta</p> <p>Input fasta file.</p> </li> <li> <p>--ct, --codon or --table</p> <p>Codon table to use. [default 1]</p> </li> <li> <p>-t or --threshold</p> <p>This is the minimum length of new protein predicted that will be taken in account. By default this value is 100 AA.</p> </li> <li> <p>-s or --stranded</p> <p>By default we predict protein in UTR3 and UTR5 and in both direction. The fusion assumed can be between gene in same direction and in opposite direction. If RNAseq data used during the annotation was stranded, only fusion of close genes oriented in same direction are expected. In that case this option should be activated. When activated, we will try to predict protein in UTR3 and UTR5 only in the same orientation than the gene investigated.</p> </li> <li> <p>-v or --verbose</p> <p>Output verbose information.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_fix_longest_ORF/","title":"agat_sp_fix_longest_ORF.pl","text":""},{"location":"tools/agat_sp_fix_longest_ORF/#description","title":"DESCRIPTION","text":"<p>The script aims to fix the ORFs of gene models described in the gff file. By fixing it means replacing the original ORF (defined by the cds) when the longest predicted one within the mRNA is different. See the --model parameter for more details about the different cases. Currently the tool does not perform incomplete prediction (It always look for a start codon). It is consequently advised to not use the model5 except if you understand what you do. Several ouput files will be written if you specify an output. One will contain the gene not modified (intact), one with the gene models fixed (modified), one will both together (all).</p>"},{"location":"tools/agat_sp_fix_longest_ORF/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_fix_longest_ORF.pl -gff infile.gff --fasta genome.fa [ -o outfile ]\nagat_sp_fix_longest_ORF.pl --help\n</code></pre>"},{"location":"tools/agat_sp_fix_longest_ORF/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-f, --fa or --fasta</p> <p>Imput fasta file.</p> </li> <li> <p>--ct, --codon or --table</p> <p>Codon table to use. [default 1]</p> </li> <li> <p>-m or --model</p> <p>Kind of ORF Model you want to fix. By default all are used. To select specific models writte e.g --model 1,4</p> <p>Model1 = The original ORF is part of the new ORF; the new ORF is longer</p> <p>Model2 = The original ORF and the new one are different; the new one is longer, they do not overlap each other.</p> <p>Model3 = The original ORF and the new one are different; the new one is longer, they overlap each other.</p> <p>Model4 = The new ORF is shorter due to the presence of stop codon in the original ORF.</p> <p>Model5 = The new ORF is shorter but the original ORF has not premature stop codon.          The shorter predicted ORF can be due to the fact that the original ORF does not start by a start codon,                  while we force here the prediction to have a start codon.                  A ORF wihtout start can be the fact of an incomplete or fragmented ORF:                  annotation tool didn't predict the start because:                  * the start region is NNNN                  * the start region is XXXX                  * correct nucleotides but prediction tool did not annotate this part (e.g incomplete evidence in evidence-based prediction)</p> <p>Model6 = The ORF is same size but not correct frame (+1 or +2 bp gives a frame shift).</p> </li> <li> <p>-s or --split</p> <p>This option is usefull for Model2. Indeed when the prediction is non overlapping the original cds, it is possible to split the gene into two different genes. By default we don't split it. We keep the longest. If you want to split it type: -s</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>verbose mode. Default off. -v 1 minimum verbosity, -v 3 maximum verbosity</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_fix_overlaping_genes/","title":"agat_sp_fix_overlaping_genes.pl","text":""},{"location":"tools/agat_sp_fix_overlaping_genes/#description","title":"DESCRIPTION","text":"<p>Check a GTF/GFF annotation file to find cases where different gene features have CDS that overlap. In this case the gene features will be merged in only one. One gene is chosen as reference, and the mRNA from the other gene will be linked to it. So, it creates isoforms.</p>"},{"location":"tools/agat_sp_fix_overlaping_genes/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_fix_overlaping_genes.pl -f infile  [-o outfile]\nagat_sp_fix_overlaping_genes.pl --help\n</code></pre>"},{"location":"tools/agat_sp_fix_overlaping_genes/#options","title":"OPTIONS","text":"<ul> <li> <p>-f, --file, --gff3 or --gff</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-m or --merge</p> <p>Bolean: Merge/add the attributes of gene feature that are merged (except ID and Parent).</p> </li> <li> <p>-o, --out, --output or --outfile</p> <p>Output file. If none given, will be display in standard output.</p> </li> <li> <p>-v or --verbose</p> <p>BOLEAN: Add verbosity.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_fix_small_exon_from_extremities/","title":"agat_fix_small_exon_from_extremities.pl","text":""},{"location":"tools/agat_sp_fix_small_exon_from_extremities/#description","title":"DESCRIPTION","text":"<p>The script aims to extend the small exons to make them longer. When submitting annotation to ENA they expect exon size of 15 nt minimum. Currently we extend only the exon from extremities, otherwise we risk to break the predicted ORF. /! When we extend an exon and the CDS has to be extended too (because is was a partial CDS), we exit;</p>"},{"location":"tools/agat_sp_fix_small_exon_from_extremities/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_fix_small_exon_from_extremities.pl -gff infile.gff --fasta genome.fa [ -o outfile ]\nagat_fix_small_exon_from_extremities.pl --help\n</code></pre>"},{"location":"tools/agat_sp_fix_small_exon_from_extremities/#options","title":"OPTIONS","text":"<ul> <li> <p>-gff</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-fa or --fasta</p> <p>Genome fasta file The name of the fasta file containing the genome to work with.</p> </li> <li> <p>--ct or --table or --codon</p> <p>This option allows specifying the codon table to use - It expects an integer (1 by default = standard)</p> </li> <li> <p>--size or -s</p> <p>Minimum exon size accepted in nucleotide. All exon below this size will be extended to this size. Default value = 15.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>Verbose option, make it easier to follow what is going on for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_flag_premature_stop_codons/","title":"agat_sp_flag_premature_stop_codons.pl","text":""},{"location":"tools/agat_sp_flag_premature_stop_codons/#description","title":"DESCRIPTION","text":"<p>The script flags the mRNAs containing premature stop codons. It will add the attribute \"pseudo\" and the value will be the positions of all premature stop codons. Gene are flagged as pseudogene only if all the isoforms are pseudogenes. The attribute will also be \"pseudo\" but will not contains any location.</p>"},{"location":"tools/agat_sp_flag_premature_stop_codons/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_flag_premature_stop_codons.pl --gff infile.gff --fasta infile.fa --out outfile\nagat_sp_flag_premature_stop_codons.pl --help\n</code></pre>"},{"location":"tools/agat_sp_flag_premature_stop_codons/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, --ref or -reffile</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-f, --fa or --fasta</p> <p>Imput fasta file.</p> </li> <li> <p>--ct, --codon or --table</p> <p>Codon table to use. [default 1]</p> </li> <li> <p>--out, --output or -o</p> <p>Output gff3 file where the result will be printed.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_flag_short_introns/","title":"agat_sp_flag_short_introns.pl","text":""},{"location":"tools/agat_sp_flag_short_introns/#description","title":"DESCRIPTION","text":"<p>Looking at exon features the script flags each feature of a record with the &lt;short_intron&gt; attribute if  it contains an intron with a size below the &lt;--intron_size&gt; threshold (10bp by default). The value of this attribute will be the size of the shortest intron found under the threshold.</p>"},{"location":"tools/agat_sp_flag_short_introns/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_flag_short_introns.pl --gff infile --out outfile\nagat_sp_flag_short_introns.pl --help\n</code></pre>"},{"location":"tools/agat_sp_flag_short_introns/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, -f, --ref or -reffile</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--intron_size or -i</p> <p>Minimum intron size, default 10. All genes with an intron &lt; of this size will be flagged with the pseudo attribute (the value will be the size of the smallest intron found within the incriminated gene)</p> </li> <li> <p>--out, --output or -o</p> <p>Output gff3 file where the result will be printed.</p> </li> <li> <p>-v</p> <p>Bolean. Verbose for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_flag_short_introns_ebi/","title":"agat_sp_flag_short_introns_ebi.pl","text":""},{"location":"tools/agat_sp_flag_short_introns_ebi/#description","title":"DESCRIPTION","text":"<p>The script flags records that contain short introns (default 10bp) within coding sequences (CDS) with the &lt;pseudo&gt; attribute and changes the &lt;product&gt; attribute into a &lt;note&gt; attribute. This is useful for avoiding ERROR messages when submitting data to the EBI. (Typical EBI error message: ERROR: Intron usually expected to be at least 10 nt long. Please check the accuracy.)</p>"},{"location":"tools/agat_sp_flag_short_introns_ebi/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_flag_short_introns_ebi.pl --gff infile --out outfile\nagat_sp_flag_short_introns_ebi.pl --help\n</code></pre>"},{"location":"tools/agat_sp_flag_short_introns_ebi/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, -f, --ref or -reffile</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--intron_size or -i</p> <p>Minimum intron size, default 10. All genes with an intron &lt; of this size will be flagged with the pseudo attribute (the value will be the size of the smallest intron found within the incriminated gene)</p> </li> <li> <p>--out, --output or -o</p> <p>Output gff3 file where the result will be printed.</p> </li> <li> <p>-v</p> <p>Bolean. Verbose for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_functional_statistics/","title":"agat_sp_functional_statistics.pl","text":""},{"location":"tools/agat_sp_functional_statistics/#description","title":"DESCRIPTION","text":"<p>The script aims to summerize functional information stored in the file.</p>"},{"location":"tools/agat_sp_functional_statistics/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_functional_statistics.pl --gff file.gff  [ -o outfile ]\nagat_sp_functional_statistics.pl --help\n</code></pre>"},{"location":"tools/agat_sp_functional_statistics/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--gs or -g</p> <p>This option inform about the genome size in oder to compute more statistics. You can give the size in Nucleotide or directly the fasta file.</p> </li> <li> <p>--output or -o</p> <p>Folder where will be written the results. [Default output_functional_statistics]</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_keep_longest_isoform/","title":"agat_sp_keep_longest_isoform.pl","text":""},{"location":"tools/agat_sp_keep_longest_isoform/#description","title":"DESCRIPTION","text":"<p>The script aims to filter isoforms when present. For a locus: - when all isoforms have CDS we keep the one with the longest CDS. - when some isoforms have CDS some others not, we keep the one with the longest CDS. - when none of the isoforms have CDS, we keep the one with the longest concatenated exons. </p>"},{"location":"tools/agat_sp_keep_longest_isoform/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_keep_longest_isoform.pl -gff file.gff  [ -o outfile ]\nagat_sp_keep_longest_isoform.pl --help\n</code></pre>"},{"location":"tools/agat_sp_keep_longest_isoform/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>GTF/GFF file.</p> </li> <li> <p>--output or -o</p> <p>File where will be written the result. If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_kraken_assess_liftover/","title":"agat_sp_kraken_assess_lift_coverage.pl","text":""},{"location":"tools/agat_sp_kraken_assess_liftover/#description","title":"DESCRIPTION","text":"<p>The script takes as input gtf produced by Kraken (lift-over tool). It will analyse the kraken_mapped attributes to calculate the mapped percentage of each mRNA. According to a threshold (0 by default), gene with a mapping percentage over that value will be reported. A plot nammed geneMapped_plot.pdf is performed to visualize the result. /! The script handles chimeric files (i.e containg gene part mapped on the template genome and others on the de-novo one) /!/! If the file is complete (containing kraken_mapped=\"TRUE\" and kraken_mapped=\"FALSE\" attributes), the script calcul the real percentage lentgh that has been mapped. Else the calcul is only based on feature with kraken_mapped=\"TRUE\" attributes. So in this case the result most of time will be 100%. /!/!/! We met rare cases where Kraken mapped a feature to several locations of the de-novo genome. As result we could end up with mapping over &gt; 100%. We report them as 100% mapped in the plot and a warning is raised to allow to check thoses cases.</p>"},{"location":"tools/agat_sp_kraken_assess_liftover/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_kraken_assess_lift_coverage --gtf infile.gtf [ -o outfile ]\nagat_sp_kraken_assess_lift_coverage --help\n</code></pre>"},{"location":"tools/agat_sp_kraken_assess_liftover/#options","title":"OPTIONS","text":"<ul> <li> <p>-gtf</p> <p>Input gtf file produced by Kraken.</p> </li> <li> <p>--threshold or -t</p> <p>Gene mapping percentage over which a gene must be reported. By default the value is 0.</p> </li> <li> <p>--verbose or -v</p> <p>Verbose information.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_list_short_introns/","title":"agat_sp_list_short_introns.pl","text":""},{"location":"tools/agat_sp_list_short_introns/#description","title":"DESCRIPTION","text":"<p>The script aims to list all the introns inferior to a certain size. Introns are calculated on the fly from exons. (intron feature will not be used).</p>"},{"location":"tools/agat_sp_list_short_introns/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_list_short_introns.pl --gff infile [ --out outFile ]\nagat_sp_list_short_introns.pl --help\n</code></pre>"},{"location":"tools/agat_sp_list_short_introns/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, -f, --ref or -reffile</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--size or -s</p> <p>Minimum intron size accepted in nucleotide. All introns under this size will be reported. Default value = 10.</p> </li> <li> <p>--out, --output or -o</p> <p>Output gff3 file where the gene incriminated will be write.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_load_function_from_protein_align/","title":"agat_sp_load_function_from_protein_align.pl","text":""},{"location":"tools/agat_sp_load_function_from_protein_align/#description","title":"DESCRIPTION","text":"<p>The script takes an annotation in gff format, a protein alignment in gff format and a protein fasta file as input. It checks if protein alignement overlap gene models, and will load the gene name and/or the function to the gene model according to the user requirements. The script applies the following steps: For each gene model structure it take the proteins aligned against, and sort them by an overlaping score. The best coming first. Then it filters them by applying the overlaping score threshold. 1) If you activated the PE and the species filtering, we will try to find the best protein that follows the defined requirement. 2.1) If you activated the PE filtering or the precedent filtering (1) didn't succeed, we take the best protein according to the PE requirement. 2.2) If you activated the species filtering or the precedent filtering (1) didn't succeed, we take the best protein according to the list of prioritized species defined. 3) If no option or the precedent filtering (1,2.1,2.2)didn't succeed, the best protein will be selected. You can flip the 2.1 and 2.2 test using the priority option.</p>"},{"location":"tools/agat_sp_load_function_from_protein_align/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_load_function_from_protein_align.pl -a annotation.gff --pgff protein.gff --pfasta protein.fasta [ -o outfile ]\nagat_sp_load_function_from_protein_align.pl --help\n</code></pre>"},{"location":"tools/agat_sp_load_function_from_protein_align/#options","title":"OPTIONS","text":"<ul> <li> <p>-a or --annotation</p> <p>Input gtf/gff file of an annotation.</p> </li> <li> <p>--pgff</p> <p>Input gff file of aligned proteins.</p> </li> <li> <p>--pfasta</p> <p>Input protein fasta file where the extra information will be retrieved for each aligned protein.</p> </li> <li> <p>-m or --method</p> <p>Rule to apply to lift function when a protein map properly. 1) replace  =&gt; replace or add the product and Name attribute's values. 2) complete =&gt; add the product and Name attribute's values only if doesn't exist. 3) add      =&gt; add the lfp_product and lfp_name attributes with the corresponding values</p> </li> <li> <p>--value, --threshold or -t</p> <p>Gene mapping percentage over which a gene must be reported. By default the value is 50.</p> </li> <li> <p>-w</p> <p>Compute the overlap score based on the whole annotation sequence. By default we use only the coding sequence part.</p> </li> <li> <p>--pe</p> <p>Protein existence value. We will take the best overlap score protein according to the PE expected 1. Experimental evidence at protein level 2. Experimental evidence at transcript level 3. Protein inferred from homology 4. Protein predicted 5. Protein uncertain</p> </li> <li> <p>--test</p> <p>Test to apply (&gt; &lt; = &gt;= &lt;=). If you us one of these two character &gt;, &lt;, please don't forget to quote you parameter liket that \"&lt;=\". Else your terminal will complain.</p> </li> <li> <p>--sp</p> <p>Species, between the set of the best protein aligned we try first to take the one that follow the species prioritization defined. There is a default one, but you can define you own (quoted and coma separated value)like that: \"mus Musculus, Homo Sapiens\" from the most important to the less important. In that case Mus will be taken first even if a better overlaping one exist for human. If none of them is found we take anyway the best overlapping one.</p> </li> <li> <p>-p or --priority</p> <p>By default the priority is PE test before species test when both are applied. You can flip these two test by activating this option like this: -p species</p> </li> <li> <p>-v</p> <p>Be verbose.</p> </li> <li> <p>-o , --output or --out</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_manage_IDs/","title":"agat_sp_manage_IDs.pl","text":""},{"location":"tools/agat_sp_manage_IDs/#description","title":"DESCRIPTION","text":"<p>The script takes a gff3 file as input and will go through all feature to overwrite the value of the ID attribute. By default the ID is built as follow: primary_tag(i.e. 3rd column)-Number. If you provide a specific prefix the ID is built as follow: $opt_prefix.$letterCode.Number. By default the numbering start at 1, but you can decide to change this value using the --nb option. The $letterCode is the first letter of the feature type (3rd colum). It is uniq for each feature type, i.e. when two feature types start with the same letter, the second one met will have the two first letter as $letterCode (and so one).</p>"},{"location":"tools/agat_sp_manage_IDs/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_manage_IDs.pl --gff file.gff -p level2 -p cds -p exon [ -o outfile ]\nagat_sp_manage_IDs.pl --help\n</code></pre>"},{"location":"tools/agat_sp_manage_IDs/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--gap</p> <p>Integer - Increment the next gene (level1 feature) suffix with this value. Defauft 0.</p> </li> <li> <p>--ensembl</p> <p>Boolean - For an ID Ensembl like (e.g PREFIXG00000000022). The ID is built as follow: $opt_prefix.$letterCode.0*.Number where the number of 0 is adapted in order to have 11 digits.</p> </li> <li> <p>--prefix</p> <p>String - Add a specific prefix to the ID. By defaut if will be the feature type (3rd column).</p> </li> <li> <p>--type_dependent</p> <p>Boolean - Activate type_dependent numbering. The number is depedendent of the feature type. i.e instead of: NbV1Ch01        AUGUSTUS        gene    97932   99714   0.06    -       .       ID=gene1 NbV1Ch01        AUGUSTUS        mRNA    97932   99714   0.06    -       .       ID=mRNA2 NbV1Ch01        AUGUSTUS        exon    97932   98571   .       -       .       ID=exon3 NbV1Ch01        AUGUSTUS        exon    98679   98844   .       -       .       ID=exon4 You will get: NbV1Ch01        AUGUSTUS        gene    97932   99714   0.06    -       .       ID=gene1 NbV1Ch01        AUGUSTUS        mRNA    97932   99714   0.06    -       .       ID=mRNA1 NbV1Ch01        AUGUSTUS        exon    97932   98571   .       -       .       ID=exon1 NbV1Ch01        AUGUSTUS        exon    98679   98844   .       -       .       ID=exon2</p> </li> <li> <p>--collective</p> <p>Boolean - In the case of discontinuous features (i.e. a single feature that exists over multiple genomic locations like CDS, UTR) we set a uniq ID by default. If you wish to set the a collective ID for those feature, please activate this option.</p> </li> <li> <p>--tair</p> <p>Boolean - Tair like Output:</p> <p>NbV1Ch01    TAIR10  gene    5928    8737    .       -       .       ID=AT1G01020 NbV1Ch01    TAIR10  mRNA    5928    8737    .       -       .       ID=AT1G01020.1 NbV1Ch01    TAIR10  exon    5928    8737   .       -       .        ID=AT1G01020.1-exon1</p> </li> <li> <p>--nb</p> <p>Integer - Start numbering to this value. Default 1.</p> </li> <li> <p>-p,  -t or  -l</p> <p>primary tag option, case insensitive, list. Allow to specied the feature types that will be handled. You can specified a specific feature by given its primary tag name (column 3) as: cds, Gene, MrNa You can specify directly all the feature of a particular level:       level2=mRNA,ncRNA,tRNA,etc       level3=CDS,exon,UTR,etc By default all feature are taken into account. fill the option by the value \"all\" will have the same behaviour.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>String - Output GFF file. If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Boolean - Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_manage_UTRs/","title":"agat_sp_manage_UTRs.pl","text":""},{"location":"tools/agat_sp_manage_UTRs/#description","title":"DESCRIPTION","text":"<p>Detect the genes containing too much UTR's exon according to a choosen threshold. If no UTR option (3, 5, 3 and 5, both) is given the threshold will be not used. option 3 and 5 together is different of \"both\". In the first case the gene is discarded if either the 3' or the 5' UTR contains more exon than the threshold given. In the second case, will be discarded only the genes where the addition of UTR's exon of both side is over the threshold given.</p>"},{"location":"tools/agat_sp_manage_UTRs/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_manage_UTRs.pl --ref infile --three --five -p --out outFile\nagat_sp_manage_UTRs.pl --help\n</code></pre>"},{"location":"tools/agat_sp_manage_UTRs/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, --ref, --reffile or -f</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-n, -t, --nb or --number</p> <p>Threshold of exon's number of the UTR. Over or equal to this threshold, the UTR will be discarded. Default value is 5.</p> </li> <li> <p>-3, --three or --tree_prime_utr</p> <p>The threshold of the option &lt;n&gt; will be applied on the 3'UTR.</p> </li> <li> <p>-5, --five or --five_prime_utr</p> <p>The threshold of the option &lt;n&gt; will be applied on the 5'UTR.</p> </li> <li> <p>-b, --both or --bs</p> <p>The threshold of the option &lt;n&gt; will be applied on genes where the number of UTR exon (3' and 5' additioned) is over it.</p> </li> <li> <p>--p or --plot</p> <p>Allows to create an histogram in pdf of UTR sizes distribution.</p> </li> <li> <p>--out, --output or -o</p> <p>Output gff3 file where the gene incriminated will be write.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_manage_attributes/","title":"agat_sp_manage_attributes.pl","text":""},{"location":"tools/agat_sp_manage_attributes/#description","title":"DESCRIPTION","text":"<p>The script removes choosen attributes of selected features. It can also create new attribute with 'empty' value, or copy paste an existing attribute using a new specified tag. Attribute in a gff file have this shape (2 attributes here): tag=value;tag=value and are stored within the 9th column.</p>"},{"location":"tools/agat_sp_manage_attributes/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_manage_attributes.pl -gff file.gff  -att locus_tag,product,name/NewName -p level2,cds,exon [ -o outfile ]\nagat_sp_manage_attributes.pl --help\n</code></pre>"},{"location":"tools/agat_sp_manage_attributes/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-p,  --type or  -l</p> <p>primary tag option, case insensitive, list. Allow to specied the feature types that will be handled. You can specified a specific feature by given its primary tag name (column 3) as: cds, Gene, MrNa You can specify directly all the feature of a particular level:       level2=mRNA,ncRNA,tRNA,etc       level3=CDS,exon,UTR,etc By default all feature are taking in account. fill the option by the value \"all\" will have the same behaviour.</p> </li> <li> <p>--tag, --att</p> <p>Attributes with the tag specified will be removed from the feature type specified by the option p (primary tag). List of tag must be coma separated. /! You must use \"\" if name contains spaces. Instead to remove an attribute, you can replace its Tag by a new Tag using this formulation tagName/newTagName. To remove all attributes non mandatory (only ID and Parent are mandatory) you can use the option with &lt;all_attributes&gt; parameter.</p> </li> <li> <p>--add</p> <p>Attribute with the tag specified will be added if doesn't exist. The value will be 'empty'.</p> </li> <li> <p>--cp</p> <p>Bolean. When tags specied are with this form: tagName/newTagName. By using this &lt;cp&gt; parameter, the attribute with the tag tagName will be duplicated with the new tag newTagName if no attribute with the tag newTagName already exits.</p> </li> <li> <p>--overwrite</p> <p>When using -add parameter, if an attribute with the specificed tag already exists, it will not be modified. When using --cp parameter, if an attribute with the specificed newTagName already exists, it will not be modified. So using the --overwrite parameter allows to overwrite the value of the existing attribute.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_manage_functional_annotation/","title":"agat_sp_manage_functional_annotation.pl","text":""},{"location":"tools/agat_sp_manage_functional_annotation/#description","title":"DESCRIPTION","text":"<p>The script take a gff3 file as input and blast and/or interpro output in order to attach functional annotation to corresponding features within the gff file.</p> <p>The blast against Protein Database (outfmt 6) allows to fill the field/attribute NAME for gene and PRODUCT for mRNA.</p> <p>The Interpro result (.tsv) file allows to fill the DBXREF field/attribute with pfam, tigr, interpro, GO, KEGG, etc... terms data.</p> <p>With the &lt;id&gt; option the script will change all the ID field by an Uniq ID created from the given prefix, a letter to specify the kind of feature (G,T,C,E,U), and the feature number.</p> <p>The result is written to the specified output file, or to STDOUT.</p> <p>About the TSV format from interproscan: &amp;##x3d;======================================</p> <p>The TSV format presents the match data in columns as follows:</p> <pre><code>1.Protein Accession (e.g. P51587)\n2.Sequence MD5 digest (e.g. 14086411a2cdf1c4cba63020e1622579)\n3.Sequence Length (e.g. 3418)\n4.Analysis (e.g. Pfam / PRINTS / Gene3D)\n5.Signature Accession (e.g. PF09103 / G3DSA:2.40.50.140)\n6.Signature Description (e.g. BRCA2 repeat profile)\n7.Start location\n8.Stop location\n9.Score - is the e-value (or score) of the match reported by member database method (e.g. 3.1E-52)\n10.Status - is the status of the match (T: true)\n11.Date - is the date of the run\n12.(InterPro annotations - accession (e.g. IPR002093) - optional column; only displayed if -iprlookup option is switched on)\n13.(InterPro annotations - description (e.g. BRCA2 repeat) - optional column; only displayed if -iprlookup option is switched on)\n14.(GO annotations (e.g. GO:0005515) - optional column; only displayed if --goterms option is switched on)\n15.(Pathways annotations (e.g. REACT_71) - optional column; only displayed if --pathways option is switched on)\n</code></pre> <p>P.S: The 9th column contains most of time e-value, but can contain also score (e.g Prosite). To understand the difference: https://myhits.isb-sib.ch/cgi-bin/help?doc=scores.html</p> <p>About the outfmt 6 from blast: &amp;##x3d;=============================</p> <pre><code>1.  qseqid  query (e.g., gene) sequence id\n2.  sseqid  subject (e.g., reference genome) sequence id\n3.  pident  percentage of identical matches\n4.  length  alignment length\n5.  mismatch  number of mismatches\n6.  gapopen   number of gap openings\n7.  qstart  start of alignment in query\n8.  qend  end of alignment in query\n9.  sstart  start of alignment in subject\n10.   send  end of alignment in subject\n11.   evalue  expect value\n12.   bitscore  bit score\n</code></pre> <p>Currently the best e-value win... That means another hit with a lower e-value (but still over the defined threshold anyway) even if it has a better PE value will not be reported.</p>"},{"location":"tools/agat_sp_manage_functional_annotation/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_manage_functional_annotation.pl -f infile.gff [ -b blast_infile --db uniprot.fasta -i interpro_infile.tsv --id ABCDEF --output outfile ]\nagat_sp_manage_functional_annotation.pl --help\n</code></pre>"},{"location":"tools/agat_sp_manage_functional_annotation/#options","title":"OPTIONS","text":"<ul> <li> <p>-f, --reffile,-ref , --gff or --gff3</p> <p>String - Input GTF/GFF file.</p> </li> <li> <p>-b or --blast</p> <p>String - Input blast ( outfmt 6 = tabular ) usually made by blasting the proteins resulting from the GFF/GTF file provided as input and a confident protein database (e.g. Swissprot/Uniprot). The file makse a bridge between the feature ID from the GFF/GTF and the  best protein ID matched in the used database. Thanks to that link the Name and products (sometimes called descriptions) information will be extracted from the database fasta file and added in the GFF file. You must provide the same database via --db as the one used to create this blast output file.</p> </li> <li> <p>--clean_name</p> <p>Bolean - When activated, if the Name attribute already exists, it we be cleaned. Otherwise Name retrieved by --blast + --db options  will be appended. Default False (Name attribute not cleaned).</p> </li> <li> <p>--clean_product</p> <p>Bolean - When activated, if the product attribute already exists, it we be cleaned. Otherwise product retrieved by --blast + --db options  will be appended. Default False (product attribute not cleaned).</p> </li> <li> <p>--clean_dbxref</p> <p>Bolean - When activated, if the Dbxref attribute already exists, it we be cleaned. Otherwise Dbxref retrieved by --interpro option  will be appended. Default False (Dbxref attribute not cleaned).</p> </li> <li> <p>--clean_ontology</p> <p>Bolean - When activated, if the Ontology_term attribute already exists, it we be cleaned. Otherwise Ontology_term retrieved by --interpro option will be appended. Default False (Ontology_term attribute not cleaned).</p> </li> <li> <p>-d or --db</p> <p>String - The fasta file that has been used as DB for the blast. Gene names and products/descriptions will be fished from this file.</p> </li> <li> <p>--be or --blast_evalue</p> <p>Float - Maximum e-value to keep the annotation from the blast file. By default 1e-6.</p> </li> <li> <p>--pe</p> <p>Integer - The PE (protein existence) in the uniprot header indicates the type of evidence that supports the existence of the protein. You can decide until which protein existence level you want to consider to lift the finctional information. Default 5.</p> <ol> <li>Experimental evidence at protein level</li> <li>Experimental evidence at transcript level</li> <li>Protein inferred from homology</li> <li>Protein predicted</li> <li>Protein uncertain</li> </ol> </li> <li> <p>-i or --interpro</p> <p>String - Input interpro file (.tsv) that will be used to complement the features read from the first file (specified with --ref).</p> </li> <li> <p>-id</p> <p>String - This option will changed the id name. It will create from id prefix (usually 6 letters) given as input, uniq IDs like prefixE00000000001. Where E mean exon. Instead E we can have C for CDS, G for gene, T for mRNA, U for Utr. In the case of discontinuous features (i.e. a single feature that exists over multiple genomic locations) the same ID may appear on multiple lines. All lines that share an ID collectively represent a signle feature.</p> </li> <li> <p>-idau</p> <p>Boolean - This option (id all uniq) is similar to -id option but Id of features that share an ID collectively will be change by different and uniq ID.</p> </li> <li> <p>-nb</p> <p>Integer - Usefull only if -id is used. This option is used to define the number that will be used to begin the numbering. By default begin by 1.</p> </li> <li> <p>-o or --output</p> <p>String - Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>Boolean - Verbose, for debug purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Boolean - Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_manage_introns/","title":"agat_sp_manage_introns.pl","text":""},{"location":"tools/agat_sp_manage_introns/#description","title":"DESCRIPTION","text":"<p>The script provides information about introns (longest, shortest size mean ...) using the statistic method, then plot all the intron size values to get an overview of the introns size distribution. It gives you as well the value of the longest intron after removing X percent(s) of the longest (removing potential biais / false positive).</p>"},{"location":"tools/agat_sp_manage_introns/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_manage_introns.pl --gff infile [--out outFile]\nagat_sp_manage_introns.pl --help\n</code></pre>"},{"location":"tools/agat_sp_manage_introns/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, -f, --ref or -reffile</p> <p>Input GTF/GFF file. You can use several input files by doing: -f file1 -f file2 -f file3</p> </li> <li> <p>-w, --window, --break, --breaks or -b</p> <p>It the number of break used within the histogram plot. By default it's 1000. You can modify the value to get something more or less precise.</p> </li> <li> <p>-x, --p</p> <p>Allows to modify the X values to calculate the percentage of the longest introns to remove. By default the value is 1 (We remove 1 percent of the longest).</p> </li> <li> <p>--plot</p> <p>Allows to create an histogram in pdf of intron sizes distribution.</p> </li> <li> <p>--out, --output or -o</p> <p>Output gff3 file where the gene incriminated will be write.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_merge_annotations/","title":"agat_sp_merge_annotations.pl","text":""},{"location":"tools/agat_sp_merge_annotations/#description","title":"DESCRIPTION","text":"<p>This script merge different gff annotation files in one. It uses the AGAT parser that takes care of duplicated names and fixes other oddities met in those files.</p>"},{"location":"tools/agat_sp_merge_annotations/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_merge_annotations.pl --gff infile1 --gff infile2 --out outFile\nagat_sp_merge_annotations.pl --help\n</code></pre>"},{"location":"tools/agat_sp_merge_annotations/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>Input GTF/GFF file(s). You can specify as much file you want like so: -f file1 -f file2 -f file3</p> </li> <li> <p>--out, --output or -o</p> <p>Output gff3 file where the gene incriminated will be write.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_move_attributes_within_records/","title":"agat_sp_move_attributes_within_records.pl","text":""},{"location":"tools/agat_sp_move_attributes_within_records/#description","title":"DESCRIPTION","text":"<p>The script aims to keep move attributes within a record e.g. from Level1 to Level2 and/or Level3 features; and / or from Level2 to Level2 or Level3 features; and / or from Level3 to Level3 features. Example of L1 feature: gene Example of L2 featrue</p>"},{"location":"tools/agat_sp_move_attributes_within_records/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_move_attributes_within_records.pl --gff infile.gff --feature_copy mRNA  --feature_paste CDS --attribute Dbxref,Ontology [ --output outfile ]\nagat_sp_move_attributes_within_records.pl --help\n</code></pre>"},{"location":"tools/agat_sp_move_attributes_within_records/#options","title":"OPTIONS","text":"<ul> <li> <p>-f, --reffile, --gff  or -ref</p> <p>Input GFF3 file that will be read</p> </li> <li> <p>--feature_copy or --fc</p> <p>primary tag (feature type) option to list from which feature we will copy the attributes, case insensitive.  You can specified a feature (or a coma separated list) by giving its primary tag / feature type (column 3) value as: cds, Gene, MrNa, etc You can specify directly all the feature of a particular level:       level2=mRNA,ncRNA,tRNA,etc       level3=CDS,exon,UTR,etc By default all level2 feature are used. </p> </li> <li> <p>--feature_paste or --fp</p> <p>primary tag (feature type) option to list to which feature we will paste the attributes, case sensitive.  You can specified a feature (or a coma separated list) by giving its primary tag / feature type (column 3) value as: cds, Gene, MrNa, etc You can specify directly all the feature of a particular level:       level2=mRNA,ncRNA,tRNA,etc       level3=CDS,exon,UTR,etc By default all feature level3 are used. </p> </li> <li> <p>-a, --tag, --att or --attribute</p> <p>Attribute that will be copied and pasted. Case sensitive. You can specified an attribute (or a coma separated list) by giving its attribute tag value (column9) as: Ontology, Dbxref, etc Default: all_attributes /! &lt;all_attributes&gt; is a specific parameter meaning all the attributes will be use.</p> </li> <li> <p>-o or --output</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>Verbose option for debugging purpose.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any,  otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_prokka_fix_fragmented_gene_annotations/","title":"agat_sp_prokka_fragmented_gene_annotations.pl","text":""},{"location":"tools/agat_sp_prokka_fix_fragmented_gene_annotations/#description","title":"DESCRIPTION","text":"<p>The script aims to look at fragmented gene annotations (FRAGS) within prokka annotations. The FRAGS represent two (or more) ORFs that are in close proximity and are annotated with homology to the same gene. In such cases, Prokka ads an _n suffix to the gene ID. For example, a splitted genX can then be found as genX_1 and genX_2 in the GFF. See here for a case: https://github.com/tseemann/prokka/issues/502</p> <ul> <li>The script will inform you how many case there is in your annotation.</li> <li>If you think the FRAGS is due to a sequencing error (frameshift due to short indel), using the --frags parameter will fix the FRAGS if genX_1 and genX_2 are not in the same frame. The gff and the fasta file will be modified. The gene are merged, an insertion of one or two N will be added in between the genes to fix the frameshift.</li> <li>If you think the FRAGS is not due to a sequencing error, use the --pseudo parameter, the gff will be fix (gene merged) and the agat_pseudo attribute (the value is the position of the codon stop) will be added to the related features.</li> <li>using --frags and --pseudo is similar to use only --frags, except when no frameshift is found for a detected FRAGS (both gene are in the same frame), the agat_pseudo attribute is also added to the related features.</li> </ul> <p>How the tool detecte the FRAGS? * Search for cases where contiguous genes have the same name (e.g. lpxA_1 lpxA_2). * If so we look at the size of the protein of each of those genes (lpxA_1 AA=175 ; lpxA_2 AA=116), and compute the size when merged togeter (devoided of the overlap if any) =&gt; here 270 AA * Then we look at the size of the protein used to infer the name (lpxA_1 inferred from Q9PIM1 = 263 AA ; lpxA_2 inferred from P0A722 = 262 AA ) and compute the average length of the reference protein: here 262AA. We add 20% to the length to be sure to include border cases =&gt; 282AA. * Compare the length of the merged proteins (262 AA) against the reference protein length (282). If the the expected protein length (282 AA) is longer we have a FRAGS.</p>"},{"location":"tools/agat_sp_prokka_fix_fragmented_gene_annotations/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_prokka_fragmented_gene_annotations.pl -gff infile.gff --fasta genome.fa --db prokka/prokka_bacteria_sprot.fa  -o outfolder\nagat_sp_prokka_fragmented_gene_annotations.pl --help\n</code></pre>"},{"location":"tools/agat_sp_prokka_fix_fragmented_gene_annotations/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff</p> <p>Input genome GTF/GFF file. Mandatory.</p> </li> <li> <p>-f, --fa or --fasta</p> <p>Input genome fasta file. Mandatory.</p> </li> <li> <p>--db</p> <p>Input Uniprot fasta file used by prokka. Mandatory.</p> </li> <li> <p>--frags</p> <p>Merge and fix detected FRAGS if not in the same frame</p> </li> <li> <p>--pseudo</p> <p>Merge detected FRAGS and add the agat_pseudo attribute (value will be the location of the first stop codon met).</p> </li> <li> <p>--hamap_size</p> <p>Some protein function are not infered by Uniprot but by Hamap. In such case the information is retrieved from the web. As hamap provide a family profile, the protein size if a range. \"low\" option will use the low value of the range, \"middle\" option will use the average of the range, \"high\" option will the the high value of the range. Default \"high\".</p> </li> <li> <p>--ct, --codon or --table</p> <p>Codon table to use. [default 1]</p> </li> <li> <p>--skip_hamap</p> <p>For test purpose it could be useful to skip hamap, because it requires fetching information through internet.</p> </li> <li> <p>-o , --output or --out</p> <p>Output folder. Mandatory.</p> </li> <li> <p>-v</p> <p>verbose mode. Default off.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_sensitivity_specificity/","title":"agat_sp_sensitivity_specificity.pl","text":""},{"location":"tools/agat_sp_sensitivity_specificity/#description","title":"DESCRIPTION","text":"<p>The script aims to compute the Sensitivity and Specificity in order to assess the quality of an annotation according to a reference (that is supposed to be true high-quality annotation). The Sensitivity (Sn) is the proportion of true predictions compared to the total number of correct genes (including missed predictions) Sn = TP / TP+FN The Specificity (Sp) is the proportion of true predictions among all predicted genes (including incorrectly predicted ones) Sp = TP / TP+FP</p> <p>reference annotation:     ------------- prediction          :           ------------                             FN     TP    FP    TN</p> <p>Sensitivity and Specificity will be computed for each feature types. (and computed independentaly if part of different Level2 type. i.e. exons Sn Sp for tRNA will not be mixed up with the exon Sn Sp of mRNA exons)</p>"},{"location":"tools/agat_sp_sensitivity_specificity/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_sensitivity_specificity.pl --gff1 infile1.gff --gff2 infile2.gff  [ -o outfile ]\nagat_sp_sensitivity_specificity.pl --help\n</code></pre>"},{"location":"tools/agat_sp_sensitivity_specificity/#options","title":"OPTIONS","text":"<ul> <li> <p>-gff1</p> <p>Input GTF/GFF file 1.</p> </li> <li> <p>-gff2</p> <p>Input GTF/GFF file 2.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-v</p> <p>Verbose option for debug purposes.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_separate_by_record_type/","title":"agat_sp_separate_by_record_type.pl","text":""},{"location":"tools/agat_sp_separate_by_record_type/#description","title":"DESCRIPTION","text":"<p>The script will separate the features from the gff input file into different files according to the record type. A record represent all features linked collectively by Parent/ID relationships. (e.g gene + mrna + exon + cds + utr of a locus).</p> <p>a) When the record contains Level2 feature, the record type is the Level2 feature type (e.g tRNA,mRNA,ncRNA etc...) b) Some features do not have children (top and standalone level1 features) e.g. location,region,chromosome. In such case the record type is the level1 feature type.</p>"},{"location":"tools/agat_sp_separate_by_record_type/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_separate_by_record_type.pl -g infile.gff [ -o outfolder ]\nagat_sp_separate_by_record_type.pl --help\n</code></pre>"},{"location":"tools/agat_sp_separate_by_record_type/#options","title":"OPTIONS","text":"<ul> <li> <p>-g, --gff or -ref</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-o or --output</p> <p>Output folder.  If no output folder provided, the default name will be &lt;split_result&gt;.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_split_by_level2_feature/","title":"agat_sp_split_by_level2_feature.pl","text":""},{"location":"tools/agat_sp_split_by_level2_feature/#description","title":"DESCRIPTION","text":"<p>The script will split the gff input file into different files according to the different Level2 feature that it contains.</p>"},{"location":"tools/agat_sp_split_by_level2_feature/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_split_by_level2_feature.pl -g infile.gff [ -o outfolder ]\nagat_sp_split_by_level2_feature.pl --help\n</code></pre>"},{"location":"tools/agat_sp_split_by_level2_feature/#options","title":"OPTIONS","text":"<ul> <li> <p>-g, --gff or -ref</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-o or --output</p> <p>Output folder.  If no output folder provided, the default name will be &lt;split_result&gt;.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_statistics/","title":"agat_sp_statistics.pl","text":""},{"location":"tools/agat_sp_statistics/#description","title":"DESCRIPTION","text":"<p>The script provides exhaustive statistics of a gft/gff file. /! If you have isoforms in your file, even if correct, some values calculated might sounds incoherent: e.g. total length mRNA can be superior than the genome size. Because all isoforms length is added... It is why by default we always compute the statistics twice when there are isoforms, once with the isoforms, once without (In that case we keep the longest isoform per locus).</p>"},{"location":"tools/agat_sp_statistics/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_statistics.pl --gff file.gff  [ -o outfile ]\nagat_sp_statistics.pl --help\n</code></pre>"},{"location":"tools/agat_sp_statistics/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -i</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--gs, -f or -g</p> <p>This option inform about the genome size in oder to compute more statistics. You can give the size in Nucleotide or directly the fasta file.</p> </li> <li> <p>-d or -p</p> </li> </ul> <p>Bolean - When this option is used, an histogram of distribution of the features will be printed in pdf files in a folder with distribution_plots suffix. (d means distribution, p means plot).</p> <ul> <li> <p>-v or --verbose</p> <p>Verbose option. To modify verbosity. Default is 1. 0 is quiet, 2 and 3 are increasing verbosity.</p> </li> <li> <p>--output or -o</p> <p>File where will be written the result. If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>--percentile</p> <p>Integer - Percentile to compute. Default is 90.</p> </li> <li> <p>-r or --raw</p> <p>Bolean - When this option is used, the raw data (same as used to create histogram of distribution of the features) are printed in a dedicated folder with raw_data suffix.</p> </li> <li> <p>--yaml</p> <p>Bolean - When this option is activated, a second output will be printed either in STDOUT if no output provided or in  (a .yaml suffix is added to the --output value provided). <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li>"},{"location":"tools/agat_sp_to_tabulated/","title":"agat_sp_to_tabulated.pl","text":""},{"location":"tools/agat_sp_to_tabulated/#description","title":"DESCRIPTION","text":"<p>The script aims to convert gtf/gff file into tabulated file. Attribute's tags from the 9th column become column titles.</p>"},{"location":"tools/agat_sp_to_tabulated/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_to_tabulated.pl -gff file.gff [ -o outfile ]\nagat_sp_to_tabulated.pl --help\n</code></pre>"},{"location":"tools/agat_sp_to_tabulated/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-c or --ct</p> <p>When the features doesn't have Parent/ID relationships, the parser will try to group features using a common/shared attribute (i.e. a locus tag.). By default locus_tag and gene_id. You can provide another specific common/shared attribute using this option.</p> </li> <li> <p>--ml or --merge_loci</p> <p>Merge loci parameter, default deactivated. You turn on the parameter if you want to merge loci into one locus when they overlap. (at CDS level for mRNA, at exon level for other level2 features. Strand has to be the same). Prokaryote can have overlaping loci so it should not use it for prokaryote annotation. In eukaryote, loci rarely overlap. Overlaps could be due to error in the file, mRNA can be merged under the same parent gene if you acticate the option.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sp_webApollo_compliant/","title":"agat_sp_webApollo_compliant.pl","text":""},{"location":"tools/agat_sp_webApollo_compliant/#description","title":"DESCRIPTION","text":"<p>This script aim to remove useless/problematic information for webapollo, change some featuree type to avoid problem whem loading them into webapollo, and optimize some attribute for a nice displaying.</p>"},{"location":"tools/agat_sp_webApollo_compliant/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sp_webApollo_compliant.pl -g infile.gff [ -o outfile ]\nagat_sp_webApollo_compliant.pl --help\n</code></pre>"},{"location":"tools/agat_sp_webApollo_compliant/#options","title":"OPTIONS","text":"<ul> <li> <p>-g, --gff or -ref</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-o or --output</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_add_attributes_from_tsv/","title":"agat_sq_add_attributes_from_tsv.pl","text":""},{"location":"tools/agat_sq_add_attributes_from_tsv/#description","title":"DESCRIPTION","text":"<p>The purpose of the script is to add information from a tsv/csv file to the attributes of a gff file (9th column). e.g. an attribute looks like this in a GFF3 file: tag=value1,value2  The first line of the tsv/csv file must contain the headers (corresponding to an attribute tag in the GFF/GTF file), while the other lines contain the values (corresponding to an attribute value in the GFF/GTF file). The first column is used to synchronize information between the tsv file and the GFF/GTF file. In other words,  it's used to determine which feature we're going to add attributes to. The other columns will be added as attribute in the GFF/GTF file. The header becomes the tag for the new attribute,  and the value is that defined for the corresponding feature line.  (If the tag already exists, we append the value only if the value doesn't already exist).</p> <p>--- example ---</p> <ul> <li> <p>input.tsv: <pre><code>ID  annot_type1  \ngene1   annot_x  \ncds1    annot_y  \n</code></pre></p> </li> <li> <p>input.gff: <pre><code>chr1    irgsp   gene    1000    2000    .   +   .   ID=gene1  \nchr1    irgsp   CDS 2983    3268    .   +   .   ID=cds1  \n</code></pre></p> </li> <li> <p>output.gff:  <pre><code>chr1    irgsp   gene    1000    2000    .   +   .   ID=gene1;annot_type1=annot_x  \nchr1    irgsp   CDS 2983    3268    .   +   .   ID=cds1;annot_type1=annot_y  \n</code></pre></p> </li> </ul> <p>--- example2 ---</p> <ul> <li> <p>input.tsv: <pre><code>gene_id annot_type1\ngene1   anot_x\ncds1    anot_y\n</code></pre></p> </li> <li> <p>input gtf: <pre><code>chr1    irgsp   gene    1000    2000    .   +   .   gene_id gene1;\nchr1    irgsp   CDS 2983    3268    .   +   .   gene_id cds1;\n</code></pre></p> </li> <li> <p>output.gtf: <pre><code>chr1    irgsp   gene    1000    2000    .   +   .   gene_id gene1; annot_type1 anot_x\nchr1    irgsp   CDS 2983    3268    .   +   .   gene_id cds1; annot_type1 anot_y\n</code></pre></p> </li> </ul>"},{"location":"tools/agat_sq_add_attributes_from_tsv/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_add_attributes_from_tsv.pl --gff input.gff --tsv input.tsv [ -o output.gff3 ]\nagat_sq_add_attributes_from_tsv.pl --help\n</code></pre>"},{"location":"tools/agat_sq_add_attributes_from_tsv/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff</p> <p>STRING: Input GTF/GFF file.</p> </li> <li> <p>--tsv</p> <p>STRING: Input tsv file</p> </li> <li> <p>--csv</p> <p>BOLEAN: Inform the script that the tsv input file is actually a csv (coma-separated).</p> </li> <li> <p>-v or --verbose</p> <p>BOLEAN: Add verbosity</p> </li> <li> <p>-o or --output</p> <p>STRING: Output file. If no output file is specified, the output will be written to STDOUT. The result is in tabulate format.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_add_hash_tag/","title":"agat_sq_add_hash_tag.pl","text":""},{"location":"tools/agat_sq_add_hash_tag/#description","title":"DESCRIPTION","text":"<p>The script aims to introduce hash tag (####) into the file. It allows for some tools using gff3 to handle independantly file chucks separated by the #### signal. Can make them more efficient.</p>"},{"location":"tools/agat_sq_add_hash_tag/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_add_hash_tag.pl -i &lt;input file&gt; [-o &lt;output file&gt;]\nagat_sq_add_hash_tag.pl --help\n</code></pre>"},{"location":"tools/agat_sq_add_hash_tag/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, --file or --input</p> <p>STRING: Input GTF/GFF file.</p> </li> <li> <p>-i or --interval</p> <p>Integer: 1 or 2. 1 will add #### after each new sequence (column1 of the gff), while 2 will add the ### after each group of feature (gene). By default the value is 1.</p> </li> <li> <p>-o or --output</p> <p>STRING: Output file.  If no output file is specified, the output will be written to STDOUT. The result is in tabulate format.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_add_locus_tag/","title":"agat_sq_add_locus_tag.pl","text":""},{"location":"tools/agat_sq_add_locus_tag/#description","title":"DESCRIPTION","text":"<p>Add a shared locus tag per record. A record is all features linked by each other by parent/children relationship (e.g Gene,mRNA,exon, CDS).</p>"},{"location":"tools/agat_sq_add_locus_tag/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_add_locus_tag.pl --gff &lt;input file&gt; [-o &lt;output file&gt;]\nagat_sq_add_locus_tag.pl --help\n</code></pre>"},{"location":"tools/agat_sq_add_locus_tag/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, --file or --input</p> <p>STRING: Input GTF/GFF file.</p> </li> <li> <p>-p,  --type or  -l</p> <p>Primary tag option, case insensitive, list. Allow to specied the Level1 feature types that will be handled. By default all feature Level1 are taken into account.</p> </li> <li> <p>--lo or --to</p> <p>Locus tag output, by defaut it will be called locus_tag, but using this option you can specied the name of this attribute.</p> </li> <li> <p>--li or --ti</p> <p>Tag input, by default the value of the locus tag attribute will be locusX where X is an incremented number. You can use the values of an existing attribute instead e.g the ID value: --li ID.</p> </li> <li> <p>--of</p> <p>Output format, if no ouput format is given, the same as the input one detected will be used. Otherwise you can force to have a gff version 1 or 2 or 3 by giving the corresponding number.</p> </li> <li> <p>-o or --output</p> <p>STRING: Output file.  If no output file is specified, the output will be written to STDOUT. The result is in tabulate format.</p> </li> <li> <p>-q or --quiet</p> <p>To remove verbosity.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_count_attributes/","title":"agat_sq_count_attributes.pl","text":""},{"location":"tools/agat_sq_count_attributes/#description","title":"DESCRIPTION","text":"<p>The script count the number of a choosen attribute and also count the number of unique value of this attribute.</p>"},{"location":"tools/agat_sq_count_attributes/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_count_attributes.pl --gff file.gff  --att gene_id [ -o outfile ]\nagat_sq_count_attributes.pl --help\n</code></pre>"},{"location":"tools/agat_sq_count_attributes/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>Input GTF/GFF file.</p> </li> <li> <p>--tag, --att</p> <p>The name of the attribute that will be investigated.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_filter_feature_from_fasta/","title":"agat_sq_filter_feature_from_fasta.pl","text":""},{"location":"tools/agat_sq_filter_feature_from_fasta/#description","title":"DESCRIPTION","text":"<p>This script is a kind of annotation filter by sequence name. It goes through the gff annotation features and remove those that are not linked to a sequence from the fasta file provided. The match between sequence name in the fasta file and the 1st column of the gff3 file is case sensitive.</p>"},{"location":"tools/agat_sq_filter_feature_from_fasta/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_filter_feature_from_fasta.pl --gff &lt;gff_file.gff&gt; --fasta &lt;fasta_file.fa&gt; [-o &lt;output file&gt;]\nagat_sq_filter_feature_from_fasta.pl --help\n</code></pre>"},{"location":"tools/agat_sq_filter_feature_from_fasta/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, --file or --input</p> <p>STRING: Input GTF/GFF file.</p> </li> <li> <p>-f or --fasta</p> <p>STRING: fasta file.</p> </li> <li> <p>-v or --verbose</p> <p>For verbosity</p> </li> <li> <p>-o or --output</p> <p>STRING: Output file.  If no output file is specified, the output will be written to STDOUT. The result is in tabulate format.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_list_attributes/","title":"agat_sq_list_attributes.pl","text":""},{"location":"tools/agat_sq_list_attributes/#description","title":"DESCRIPTION","text":"<p>The script take a gff3 file as input. - The script give information about attribute tags used within you file.</p>"},{"location":"tools/agat_sq_list_attributes/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_list_attributes.pl -gff file.gff -p level2,cds,exon [ -o outfile ]\nagat_sq_list_attributes.pl --help\n</code></pre>"},{"location":"tools/agat_sq_list_attributes/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-p,  -t or  -l</p> <p>primary tag option, case insensitive, list. Allow to specied the feature types that will be handled. You can specified a specific feature by given its primary tag name (column 3) as: cds, Gene, MrNa You can specify directly all the feature of a particular level:       level2=mRNA,ncRNA,tRNA,etc       level3=CDS,exon,UTR,etc By default all feature are taking in account. fill the option by the value \"all\" will have the same behaviour.</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_manage_IDs/","title":"agat_sq_manage_ID.pl","text":""},{"location":"tools/agat_sq_manage_IDs/#description","title":"DESCRIPTION","text":"<p>The script changes IDs to give uniq one and reflect the change in Parent attribute of impacted features.</p>"},{"location":"tools/agat_sq_manage_IDs/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_manage_IDs.pl --gff &lt;input file&gt; [-o &lt;output file&gt;]\nagat_sq_manage_IDs.pl --help\n</code></pre>"},{"location":"tools/agat_sq_manage_IDs/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, --file or --input</p> <p>STRING: Input GTF/GFF file.</p> </li> <li> <p>--of</p> <p>Output format, if no ouput format is given, the same as the input one detected will be used. Otherwise you can force to have a gff version 1 or 2 or 3 by giving the corresponding number.</p> </li> <li> <p>-o or --output</p> <p>STRING: Output file.  If no output file is specified, the output will be written to STDOUT. The result is in tabulate format.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_manage_attributes/","title":"agat_sp_manage_attributes.pl","text":""},{"location":"tools/agat_sq_manage_attributes/#description","title":"DESCRIPTION","text":"<p>The script removes choosen attributes of selected features. It can also create new attribute with 'empty' value, or copy paste an existing attribute using a new specified tag. Attribute in a gff file have this shape (2 attributes here): tag=value;tag=value and are stored within the 9th column.</p>"},{"location":"tools/agat_sq_manage_attributes/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_manage_attributes.pl --gff file.gff  --att locus_tag,product,name/NewName -p level2,cds,exon [ -o outfile ]\nagat_sq_manage_attributes.pl --help\n</code></pre>"},{"location":"tools/agat_sq_manage_attributes/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff or -f</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-p,  --type or  -l</p> <p>primary tag option, case insensitive, list. Allow to specied the feature types that will be handled. You can specified a specific feature by given its primary tag name (column 3) as: cds, Gene, MrNa You can specify directly all the feature of a particular level:       level2=mRNA,ncRNA,tRNA,etc       level3=CDS,exon,UTR,etc By default all feature are taking in account.</p> </li> <li> <p>--tag, --att</p> <p>Attributes with the tag specified will be removed from the feature type specified by the option p (primary tag). List of tag must be coma separated. /! You must use \"\" if name contains spaces. Instead to remove an attribute, you can replace its Tag by a new Tag using this formulation tagName/newTagName. To remove all attributes non mandatory (only ID and Parent are mandatory) you can use the option with &lt;all_attributes&gt; parameter.</p> </li> <li> <p>--add</p> <p>Attribute with the tag specified will be added if doesn't exist. The value will be 'empty'.</p> </li> <li> <p>--cp</p> <p>When tags specied are with this form: tagName/newTagName. By using this &lt;cp&gt; parameter, the attribute with the tag tagName will be duplicated with the new tag newTagName if no attribute with the tag newTagName already exits.</p> </li> <li> <p>--overwrite</p> <p>When using --add parameter, if an attribute with the specificed tag already exists, it will not be modified. When using --cp parameter, if an attribute with the specificed newTagName already exists, it will not be modified. So using the --overwrite parameter allows to overwrite the value of the existing attribute.</p> </li> <li> <p>--value</p> <p>String. When a value is provided the attribute is taken into account only if the attribute contains (or match) a specific value</p> </li> <li> <p>--strategy</p> <p>String. [Default equal]. Strategy to use when --value parameter is in use. Can be equal or match. Equal =&gt; the attribute value must be identical. Match =&gt; the attribute value must match</p> </li> <li> <p>-o , --output , --out or --outfile</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_mask/","title":"agat_sq_mask.pl","text":""},{"location":"tools/agat_sq_mask/#description","title":"DESCRIPTION","text":"<p>The script masks (hard or soft) GFF-denoted segments out of a FASTA format file. It needs 3 input parameters: a gff3 file, a fasta file, and a Mask method. The result is written to the specified output file, or to STDOUT.</p>"},{"location":"tools/agat_sq_mask/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_mask.pl -g infile.gff -f infile.fasta  (-hm or -sm) [ -o outfile ]\nagat_sq_mask.pl --help\n</code></pre>"},{"location":"tools/agat_sq_mask/#options","title":"OPTIONS","text":"<ul> <li> <p>-g, --gff or -ref</p> <p>Input GTF/GFF file.</p> </li> <li> <p>-f, --fa  or --fasta</p> <p>Input fasta file that will be masked</p> </li> <li> <p>-sm</p> <p>SoftMask option =&gt;Sequences masked will be in lowercase</p> </li> <li> <p>-hm</p> <p>HardMask option =&gt; Sequences masked will be replaced by a character. By default the character used is 'n'. But you are allowed to speceify any character of your choice. To use 'z' instead of 'n' type: -hm z</p> </li> <li> <p>-o or --output</p> <p>Output GFF file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>-h or --help</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_remove_redundant_entries/","title":"agat_sq_remove_redundant_entries.pl","text":""},{"location":"tools/agat_sq_remove_redundant_entries/#description","title":"DESCRIPTION","text":"<p>The script remove redundant entries: same seq_id,primary_tag,start,stop,ID,Parent. If ID and Parent attribute is not present, we do no remove the feature. If one of them do not exists we use \"\" instead.</p>"},{"location":"tools/agat_sq_remove_redundant_entries/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_remove_redundant_entries.pl -i &lt;input file&gt; [-o &lt;output file&gt;]\nagat_sq_remove_redundant_entries.pl --help\n</code></pre>"},{"location":"tools/agat_sq_remove_redundant_entries/#options","title":"OPTIONS","text":"<ul> <li> <p>-i, --gff, --file or --input</p> <p>STRING: Input GTF/GFF file.</p> </li> <li> <p>-o or --output</p> <p>STRING: Output file.  If no output file is specified, the output will be written to STDOUT. The result is in tabulate format.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_repeats_analyzer/","title":"agat_sq_repeats_analyzer.pl","text":""},{"location":"tools/agat_sq_repeats_analyzer/#description","title":"DESCRIPTION","text":"<p>The script allows to generate a tabulated format report of repeats annotated from a gff file containing repeats (feature type must be match or protein_match).</p>"},{"location":"tools/agat_sq_repeats_analyzer/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_repeats_analyzer.pl -i &lt;input file&gt; [-g &lt;integer or fasta&gt; -o &lt;output file&gt;]\nagat_sq_repeats_analyzer.pl --help\n</code></pre>"},{"location":"tools/agat_sq_repeats_analyzer/#options","title":"OPTIONS","text":"<ul> <li> <p>-i, --gff, --file or --input</p> <p>STRING: Input GTF/GFF file(s). Several files can be processed at once: -i file1 -i file2</p> </li> <li> <p>-g, --genome</p> <p>That input is design to know the genome size in order to calculate the percentage of the genome represented by each kind of repeats. You can provide an INTEGER or the genome in fasta format. If you provide the fasta, the genome size will be calculated on the fly.</p> </li> <li> <p>-o or --output</p> <p>STRING: Output file.  If no output file is specified, the output will be written to STDOUT. The result is in tabulate format.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_reverse_complement/","title":"agat_sq_reverse_complement.pl","text":""},{"location":"tools/agat_sq_reverse_complement/#description","title":"DESCRIPTION","text":"<p>This script will reverse complement the annotation of all annotation from the gff that are hold by sequences described in the fasta file. The match between sequence name in the fasta file and the 1st column of the gff3 file is case sensitive.</p>"},{"location":"tools/agat_sq_reverse_complement/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_reverse_complement.pl --gff &lt;gff_file.gff&gt; --fasta &lt;fasta_file.fa&gt; [-o &lt;output file&gt;]\nagat_sq_reverse_complement.pl --help\n</code></pre>"},{"location":"tools/agat_sq_reverse_complement/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, --file or --input</p> <p>STRING: Input GTF/GFF file.</p> </li> <li> <p>-f, --fasta</p> <p>STRING: fasta file.</p> </li> <li> <p>-v, --verbose</p> <p>BOOLEAN: For verbosity.</p> </li> <li> <p>-o or --output</p> <p>STRING: Output file.  If no output file is specified, the output will be written to STDOUT.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>BOOLEAN: Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_rfam_analyzer/","title":"agat_sq_rfam_analyzer.pl","text":""},{"location":"tools/agat_sq_rfam_analyzer/#description","title":"DESCRIPTION","text":"<p>The script allows to generate a tabulated format report of rfam-id annotated from a gff file containing rfam results (type of the 3rd column must be ncRNA or nc_RNA - not case sensitive. And the 9th column must contain the rfam-id attribute).     e.g: ScG6Pog_82  Rfam  ncRNA 737595  737663  20.7  + 0 ID=RF00134_ScG6Pog_82_737595;Name=RF00134_ScG6Pog_82_737595;evalue=0.45;gc-content=0.28;model_end=1;model_start=1;rfam-acc=RF00134;rfam-id=snoZ196 ScG6Pog_82  Rfam  ncRNA 305023  305103  20.8  + 0 ID=RF00227_ScG6Pog_82_305023;Name=RF00227_ScG6Pog_82_305023;evalue=0.35;gc-content=0.31;model_end=1;model_start=1;rfam-acc=RF00227;rfam-id=FIE3</p>"},{"location":"tools/agat_sq_rfam_analyzer/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_rfam_analyzer.pl -i &lt;input file&gt; [-g &lt;integer or fasta&gt; -o &lt;output file&gt;]\nagat_sq_rfam_analyzer.pl --help\n</code></pre>"},{"location":"tools/agat_sq_rfam_analyzer/#options","title":"OPTIONS","text":"<ul> <li> <p>-i, --gff, --file or --input</p> <p>STRING: Input GTF/GFF file(s). Several files can be processed at once: -i file1 -i file2</p> </li> <li> <p>-g, --genome</p> <p>That input is design to know the genome size in order to calculate the percentage of the genome represented by each kind of rfam-id. You can provide an INTEGER or the genome in fasta format. If you provide the fasta, the genome size will be calculated on the fly.</p> </li> <li> <p>-o or --output</p> <p>STRING: Output file.  If no output file is specified, the output will be written to STDOUT. The result is in tabulate format.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_split/","title":"agat_sq_split.pl","text":""},{"location":"tools/agat_sq_split/#description","title":"DESCRIPTION","text":"<p>split gff3 file into several files. By default we create files containing 1000 genes and all sub-features associated. GFF3 input file must be sequential.</p>"},{"location":"tools/agat_sq_split/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_split.pl --input &lt;input file&gt; -o &lt;output file&gt;\nagat_sq_split.pl --help\n</code></pre>"},{"location":"tools/agat_sq_split/#options","title":"OPTIONS","text":"<ul> <li> <p>--gff, --file or --input</p> <p>STRING: Input GTF/GFF file.</p> </li> <li> <p>-i or --interval Integer.  Number of group of feature to include in each file. 1000 by default.</p> </li> <li>--ft or --feature_type The top feature of the feature group. By default \"gene\".</li> <li> <p>-o or --output</p> <p>STRING: Output file.  If no output file is specified, the output will be written to STDOUT. The result is in tabulate format.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"},{"location":"tools/agat_sq_stat_basic/","title":"agat_sq_stat_basic.pl","text":""},{"location":"tools/agat_sq_stat_basic/#description","title":"DESCRIPTION","text":"<p>The script aims to provide basic statistics of a gtf/gff file.</p>"},{"location":"tools/agat_sq_stat_basic/#synopsis","title":"SYNOPSIS","text":"<pre><code>agat_sq_stat_basic.pl -i &lt;input file&gt; [-g &lt;integer or fasta&gt; -o &lt;output file&gt;]\nagat_sq_stat_basic.pl --help\n</code></pre>"},{"location":"tools/agat_sq_stat_basic/#options","title":"OPTIONS","text":"<ul> <li> <p>-i, --gff, --file or --input</p> <p>STRING: Input GTF/GFF file. Several files can be processed at once: -i file1 -i file2</p> </li> <li> <p>-g, --genome</p> <p>That input is design to know the genome size in order to calculate the percentage of the genome represented by each kind of feature type. You can provide an INTEGER or the genome in fasta format. If you provide the fasta, the genome size will be calculated on the fly.</p> </li> <li> <p>--inflate</p> <p>Inflate the statistics taking into account feature with multi-parents. Indeed to avoid redundant information, some gff factorize identical features. e.g: one exon used in two different isoform will be defined only once, and will have multiple parent. By default the script count such feature only once. Using the inflate option allows to count the feature and its size as many time there are parents.</p> </li> <li> <p>-o or --output</p> <p>STRING: Output file. If no output file is specified, the output will be written to STDOUT. The result is in tabulate format.</p> </li> <li> <p>-c or --config</p> <p>String - Input agat config file. By default AGAT takes as input agat_config.yaml file from the working directory if any, otherwise it takes the orignal agat_config.yaml shipped with AGAT. To get the agat_config.yaml locally type: \"agat config --expose\". The --config option gives you the possibility to use your own AGAT config file (located elsewhere or named differently).</p> </li> <li> <p>--help or -h</p> <p>Display this helpful text.</p> </li> </ul>"}]}